{
  "routes": {
    "telegram__bottoken__sendmessage___post": {
      "provider_intent": "telegram__bottoken__sendmessage___post",
      "provider_alias_intent": "/bot-token/sendmessage",
      "provider_proxy_intent": "/bot{token}/sendMessage",
      "text": "Send message",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "text": {
          "text": "Text of the message to be sent 1-4096 characters after entities parsing",
          "type": "string",
          "required": true
        },
        "chat_id": {
          "text": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "entities": {
          "text": "A JSON-serialized list of special entities that appear in message text which can be specified instead of parse_mode",
          "type": "array"
        },
        "parse_mode": {
          "text": "Mode for parsing entities in the message text. Values: MarkdownV2, Markdown, HTML",
          "type": "string"
        },
        "reply_markup": {
          "text": "A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Protects the contents of the sent message from forwarding and saving",
          "type": "boolean"
        },
        "reply_parameters": {
          "text": "Description of the message to reply to",
          "type": "string"
        },
        "message_effect_id": {
          "text": "Unique identifier of the message effect to be added to the message; for private chats only",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Sends the message silently. Users will receive a notification with no sound.",
          "type": "boolean"
        },
        "business_connection_id": {
          "text": "Unique identifier of the business connection on behalf of which the message will be sent",
          "type": "string"
        },
        "disable_web_page_preview": {
          "text": "Disables link previews for links in this message",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "boolean"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendmessage",
        "version": "",
        "rate_limit": [],
        "description": "Send text messages",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendMessage",
        "alias_endpoint": "/telegram/bot-token/sendmessage"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-03-10T09:19:57.000Z"
    },
    "telegram__bot-token__getupdates___get": {
      "provider_intent": "telegram__bot-token__getupdates___get",
      "provider_alias_intent": "/bot-token/getupdates",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/getUpdates",
      "text": "Get incoming updates",
      "category": "Activiity",
      "method": "GET",
      "type": "API",
      "request_type": "API",
      "params": {
        "limit": {
          "text": "Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.",
          "type": "string",
          "default": 100
        },
        "offset": {
          "text": "Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten.",
          "type": "string"
        },
        "timeout": {
          "text": "Timeout in seconds for long polling. Defaults to 0 i.e. usual short polling. Should be positive short polling should be used for testing purposes only.",
          "type": "string"
        },
        "allowed_updates": {
          "text": "A JSON-serialized list of the update types you want your bot to receive. For example specify [“message” “edited_channel_post” “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the getUpdates so unwanted updates may be received for a short period of time.",
          "type": "string"
        }
      },
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#getupdates",
        "version": "-",
        "rate_limit": [],
        "description": "Fetch mesage updates",
        "api_endpoint": "https://api.telegram.org/bot{token}/getUpdates",
        "alias_endpoint": "/telegram/bot-token/getupdates"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bottoken__forwardmessage___post": {
      "provider_intent": "telegram__bottoken__forwardmessage___post",
      "provider_alias_intent": "/bottoken/forwardmessage",
      "provider_proxy_intent": "/bot{token}/forwardMessage",
      "text": "Forward message",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "chat_id": {
          "text": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "message_id": {
          "text": "Message identifier in the chat specified in from_chat_id",
          "type": "string",
          "required": true
        },
        "from_chat_id": {
          "text": "Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "protect_content": {
          "text": "Protects the contents of the forwarded message from forwarding and saving",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "disable_notification": {
          "text": "Sends the message silently. Users will receive a notification with no sound.",
          "type": "boolean"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#forwardmessage",
        "version": "-",
        "rate_limit": [],
        "description": "Forward various messages",
        "api_endpoint": "https://api.telegram.org/bot{token}/forwardMessage",
        "alias_endpoint": "/telegram/bot-token/forwardmessage"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-06T05:10:12.000Z"
    },
    "telegram__bot-token__setwebhook___post": {
      "provider_intent": "telegram__bot-token__setwebhook___post",
      "provider_alias_intent": "/bot-token/setwebhook",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/setWebhook",
      "text": "Set or update webhook",
      "category": "Webhook",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "url": {
          "text": "Required. HTTPS URL to send updates to. Use an empty string to remove webhook integration",
          "type": "string",
          "required": true
        },
        "ip_address": {
          "text": "Optional. The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS",
          "type": "string"
        },
        "certificate": {
          "text": "Optional. Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details.",
          "type": "string"
        },
        "secret_token": {
          "text": "Optional. A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request 1-256 characters. Only characters A-Z a-z 0-9 _ and - are allowed. The header is useful to ensure that the request comes from a webhook set by you.",
          "type": "string"
        },
        "allowed_updates": {
          "text": "Optional. A JSON-serialized list of the update types you want your bot to receive. For example specify [“message” “edited_channel_post” “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the setWebhook so unwanted updates may be received for a short period of time.",
          "type": "string"
        },
        "max_connections": {
          "text": "Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery 1-100. Defaults to 40. Use lower values to limit the load on your bot's server and higher values to increase your bot's throughput.",
          "type": "string"
        },
        "drop_pending_updates": {
          "text": "Optional. Pass True to drop all pending updates",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#setwebhook",
        "version": "-",
        "rate_limit": [],
        "description": "Set webhook URL, receive updates, ensure security",
        "api_endpoint": "https://api.telegram.org/bot{token}/setWebhook",
        "alias_endpoint": "/telegram/bot-token/setwebhook"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__deletewebhook___post": {
      "provider_intent": "telegram__bot-token__deletewebhook___post",
      "provider_alias_intent": "/bot-token/deletewebhook",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/deleteWebhook",
      "text": "Remove webhook",
      "category": "Webhook",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "drop_pending_updates": {
          "text": "Optional. Pass True to drop all pending updates",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#deletewebhook",
        "version": "-",
        "rate_limit": [],
        "description": "Remove webhook integration, switch to getUpdates",
        "api_endpoint": "https://api.telegram.org/bot{token}/deleteWebhook",
        "alias_endpoint": "/telegram/bot-token/deletewebhook"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__copymessage___post": {
      "provider_intent": "telegram__bot-token__copymessage___post",
      "provider_alias_intent": "/bot-token/copymessage",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/copyMessage",
      "text": "Copy message",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "caption": {
          "text": "Optional. New caption for media 0-1024 characters after entities parsing. If not specified the original caption is kept",
          "type": "string"
        },
        "chat_id": {
          "text": "Required. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "message_id": {
          "text": "Required. Message identifier in the chat specified in from_chat_id",
          "type": "string",
          "required": true
        },
        "parse_mode": {
          "text": "Optional. Mode for parsing entities in the new caption. See formatting options for more details.",
          "type": "string"
        },
        "from_chat_id": {
          "text": "Required. Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "reply_markup": {
          "text": "Optional. Additional interface options. A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional. Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "caption_entities": {
          "text": "Optional. A JSON-serialized list of special entities that appear in the new caption which can be specified instead of parse_mode",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional. Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional. If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional. Sends the message silently. Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional. Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#copymessage",
        "version": "-",
        "rate_limit": [],
        "description": "Copy various messages, excluding some types. No link provided",
        "api_endpoint": "https://api.telegram.org/bot{token}/copyMessage",
        "alias_endpoint": "/telegram/bot-token/copymessage"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__getwebhookinfo___get": {
      "provider_intent": "telegram__bot-token__getwebhookinfo___get",
      "provider_alias_intent": "/bot-token/getwebhookinfo",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/getWebhookInfo",
      "text": "Get current webhook status",
      "category": "Webhook",
      "method": "GET",
      "type": "API",
      "request_type": "API",
      "params": {
        "url": {
          "text": "Webhook URL, may be empty if webhook is not set up",
          "type": "string",
          "required": true
        },
        "ip_address": {
          "text": "Currently used webhook IP address",
          "type": "string"
        },
        "allowed_updates": {
          "text": "A list of update types the bot is subscribed to. Defaults to all update types except chat_member",
          "type": "array"
        },
        "last_error_date": {
          "text": "Unix time for the most recent error that happened when trying to deliver an update via webhook",
          "type": "number"
        },
        "max_connections": {
          "text": "The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery",
          "type": "number"
        },
        "last_error_message": {
          "text": "Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook",
          "type": "string"
        },
        "pending_update_count": {
          "text": "Number of updates awaiting delivery",
          "type": "number",
          "required": true
        },
        "has_custom_certificate": {
          "enum": [
            true,
            false
          ],
          "text": "True, if a custom certificate was provided for webhook certificate checks",
          "type": "boolean",
          "required": true
        },
        "last_synchronization_error_date": {
          "text": "Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters",
          "type": "number"
        }
      },
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#getwebhookinfo",
        "version": "-",
        "rate_limit": [],
        "description": "Get current webhook status",
        "api_endpoint": "https://api.telegram.org/bot{token}/getWebhookInfo",
        "alias_endpoint": "/telegram/bot-token/getwebhookinfo"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bottoken__sendphoto___post": {
      "provider_intent": "telegram__bottoken__sendphoto___post",
      "provider_alias_intent": "/bot-token/sendphoto",
      "provider_proxy_intent": "/bot{token}/sendPhoto",
      "text": "Send photo",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "photo": {
          "text": "Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended) pass an HTTP URL as a String for Telegram to get a photo from the Internet or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More information on Sending Files",
          "type": "string",
          "required": true
        },
        "caption": {
          "text": "Photo caption (may also be used when resending photos by file_id) 0-1024 characters after entities parsing",
          "type": "string"
        },
        "chat_id": {
          "text": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "parse_mode": {
          "text": "Mode for parsing entities in the photo caption. See formatting options for more details.",
          "type": "string"
        },
        "has_spoiler": {
          "text": "Set true if the photo needs to be covered with a spoiler animation",
          "type": "boolean"
        },
        "reply_markup": {
          "text": "Additional interface options. A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "caption_entities": {
          "text": "A JSON-serialized list of special entities that appear in the caption which can be specified instead of parse_mode",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Sends the message silently. Users will receive a notification with no sound.",
          "type": "string"
        },
        "show_caption_above_media": {
          "text": "Pass True, if the caption must be shown above the message media",
          "type": "boolean"
        },
        "allow_sending_without_reply": {
          "text": "Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "boolean"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendphoto",
        "version": "-",
        "rate_limit": [],
        "description": "Send photos",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendPhoto",
        "alias_endpoint": "/telegram/bot-token/sendphoto"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-03-10T09:23:29.000Z"
    },
    "telegram__bot-token__sendvideo___post": {
      "provider_intent": "telegram__bot-token__sendvideo___post",
      "provider_alias_intent": "/bot-token/sendvideo",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendVideo",
      "text": "Send video",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "thumb": {
          "enum": [
            "",
            "",
            "<file_attach_name>” if the thumbnail was uploaded using multipart",
            "form-data under <file_attach_name>. More information on Sending Files »"
          ],
          "text": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file so you can pass “attach",
          "type": "string"
        },
        "video": {
          "text": "Required. Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended) pass an HTTP URL as a String for Telegram to get a video from the Internet or upload a new video using multipart/form-data. More information on Sending Files »",
          "type": "string",
          "required": true
        },
        "width": {
          "text": "Optional. Video width",
          "type": "string"
        },
        "height": {
          "text": "Optional. Video height",
          "type": "string"
        },
        "caption": {
          "text": "Optional. Video caption (may also be used when resending videos by file_id) 0-1024 characters after entities parsing",
          "type": "string"
        },
        "chat_id": {
          "text": "Required. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "duration": {
          "text": "Optional. Duration of sent video in seconds",
          "type": "string"
        },
        "parse_mode": {
          "text": "Optional. Mode for parsing entities in the video caption. See formatting options for more details.",
          "type": "string"
        },
        "reply_markup": {
          "text": "Optional. Additional interface options. A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional. Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "caption_entities": {
          "text": "Optional. A JSON-serialized list of special entities that appear in the caption which can be specified instead of parse_mode",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional. Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "supports_streaming": {
          "text": "Optional. Pass True if the uploaded video is suitable for streaming",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional. If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional. Sends the message silently. Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional. Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendvideo",
        "version": "-",
        "rate_limit": [],
        "description": "Send video files, supported format MPEG4, file limit 50MB",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendVideo",
        "alias_endpoint": "/telegram/bot-token/sendvideo"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__sendvideonote___post": {
      "provider_intent": "telegram__bot-token__sendvideonote___post",
      "provider_alias_intent": "/bot-token/sendvideonote",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendVideoNote",
      "text": "Send video note",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "thumb": {
          "enum": [
            "",
            "",
            "<file_attach_name>” if the thumbnail was uploaded using multipart",
            "form-data under <file_attach_name>.More information on Sending Files »"
          ],
          "text": "Optional.Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.The thumbnail should be in JPEG format and less than 200 kB in size.A thumbnail's width and height should not exceed 320.Ignored if the file is not uploaded using multipart/form-data.Thumbnails can't be reused and can be only uploaded as a new file so you can pass “attach",
          "type": "string"
        },
        "length": {
          "text": "Optional.Video width and height i.e. diameter of the video message",
          "type": "string"
        },
        "chat_id": {
          "text": "Required.Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "duration": {
          "text": "Optional.Duration of sent video in seconds",
          "type": "string"
        },
        "video_note": {
          "text": "Required.Video note to send.Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More information on Sending Files.Sending video notes by a URL is currently unsupported",
          "type": "string",
          "required": true
        },
        "reply_markup": {
          "text": "Optional.Additional interface options.A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional.Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional.Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional.If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional.Sends the message silently.Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional.Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendvideonote",
        "version": "-",
        "rate_limit": [],
        "description": "Send video messages, format MPEG4, upto 1 minute",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendVideoNote",
        "alias_endpoint": "/telegram/bot-token/sendvideonote"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__senddocument___post": {
      "provider_intent": "telegram__bot-token__senddocument___post",
      "provider_alias_intent": "/bot-token/senddocument",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendDocument",
      "text": "Send general files",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "thumb": {
          "enum": [
            "",
            "",
            "<file_attach_name>” if the thumbnail was uploaded using multipart",
            "form-data under <file_attach_name>. More information on Sending Files »"
          ],
          "text": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file so you can pass “attach",
          "type": "string"
        },
        "caption": {
          "text": "Optional. Document caption (may also be used when resending documents by file_id) 0-1024 characters after entities parsing",
          "type": "string"
        },
        "chat_id": {
          "text": "Required. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "document": {
          "text": "Required. File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended) pass an HTTP URL as a String for Telegram to get a file from the Internet or upload a new one using multipart/form-data. More information on Sending Files »",
          "type": "string",
          "required": true
        },
        "parse_mode": {
          "text": "Optional. Mode for parsing entities in the document caption. See formatting options for more details.",
          "type": "string"
        },
        "reply_markup": {
          "text": "Optional. Additional interface options. A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional. Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "caption_entities": {
          "text": "Optional. A JSON-serialized list of special entities that appear in the caption which can be specified instead of parse_mode",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional. Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional. If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional. Sends the message silently. Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional. Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        },
        "disable_content_type_detection": {
          "text": "Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#senddocument",
        "version": "-",
        "rate_limit": [],
        "description": "Send general files, supported any type of file, file limit 50MB",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendDocument",
        "alias_endpoint": "/telegram/bot-token/senddocument"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__sendanimation___post": {
      "provider_intent": "telegram__bot-token__sendanimation___post",
      "provider_alias_intent": "/bot-token/sendanimation",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendAnimation",
      "text": "Send animated file",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "thumb": {
          "enum": [
            "",
            "",
            "<file_attach_name>” if the thumbnail was uploaded using multipart",
            "form-data under <file_attach_name>. More information on Sending Files »"
          ],
          "text": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file so you can pass “attach",
          "type": "string"
        },
        "width": {
          "text": "Optional. Animation width",
          "type": "string"
        },
        "height": {
          "text": "Optional. Animation height",
          "type": "string"
        },
        "caption": {
          "text": "Optional. Animation caption (may also be used when resending animation by file_id) 0-1024 characters after entities parsing",
          "type": "string"
        },
        "chat_id": {
          "text": "Required. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "duration": {
          "text": "Optional. Duration of sent animation in seconds",
          "type": "string"
        },
        "animation": {
          "text": "Required. Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended) pass an HTTP URL as a String for Telegram to get an animation from the Internet or upload a new animation using multipart/form-data. More information on Sending Files »",
          "type": "string",
          "required": true
        },
        "parse_mode": {
          "text": "Optional. Mode for parsing entities in the animation caption. See formatting options for more details.",
          "type": "string"
        },
        "reply_markup": {
          "text": "Optional. Additional interface options. A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional. Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "caption_entities": {
          "text": "Optional. A JSON-serialized list of special entities that appear in the caption which can be specified instead of parse_mode",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional. Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional. If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional. Sends the message silently. Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional. Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendanimation",
        "version": "-",
        "rate_limit": [],
        "description": "Send animation files, file limit 50 MB in size",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendAnimation",
        "alias_endpoint": "/telegram/bot-token/sendanimation"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__sendvoice___post": {
      "provider_intent": "telegram__bot-token__sendvoice___post",
      "provider_alias_intent": "/bot-token/sendvoice",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendVoice",
      "text": "Send voice message",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "voice": {
          "text": "Required. Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended) pass an HTTP URL as a String for Telegram to get a file from the Internet or upload a new one using multipart/form-data. More information on Sending Files »",
          "type": "string",
          "required": true
        },
        "caption": {
          "text": "Optional. Voice message caption 0-1024 characters after entities parsing",
          "type": "string"
        },
        "chat_id": {
          "text": "Required. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "duration": {
          "text": "Optional. Duration of the voice message in seconds",
          "type": "string"
        },
        "parse_mode": {
          "text": "Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.",
          "type": "string"
        },
        "reply_markup": {
          "text": "Optional. Additional interface options. A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional. Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "caption_entities": {
          "text": "Optional. A JSON-serialized list of special entities that appear in the caption which can be specified instead of parse_mode",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional. Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional. If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional. Sends the message silently. Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional. Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendvoice",
        "version": "-",
        "rate_limit": [],
        "description": "Send Telegram voice messages: OGG, OPUS, 50MB limit",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendVoice",
        "alias_endpoint": "/telegram/bot-token/sendvoice"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__senddice___post": {
      "provider_intent": "telegram__bot-token__senddice___post",
      "provider_alias_intent": "/bot-token/senddice",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendDice",
      "text": "Send a random animated emoji",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "emoji": {
          "text": "Emoji on which the dice throw animation is based. Currently must be one of “🎲” “🎯” “🏀” “⚽” “🎳” or “🎰”.Dice can have values 1-6 for “🎲” “🎯” and “🎳” values 1-5 for “🏀” and “⚽” and values 1-64 for “🎰”. Defaults to “🎲”",
          "type": "string"
        },
        "chat_id": {
          "text": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "reply_markup": {
          "text": "Additional interface options.A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Protects the contents of the sent message from forwarding",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Sends the message silently.Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#senddice",
        "version": "-",
        "rate_limit": [],
        "description": "Send animated emoji with random value on Telegram",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendDice",
        "alias_endpoint": "/telegram/bot-token/senddice"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__sendcontact___post": {
      "provider_intent": "telegram__bot-token__sendcontact___post",
      "provider_alias_intent": "/bot-token/sendcontact",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendContact",
      "text": "Send phone contact",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "vcard": {
          "text": "Optional.Additional data about the contact in the form of a vCard 0-2048 bytes",
          "type": "string"
        },
        "chat_id": {
          "text": "Required.Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "last_name": {
          "text": "Optional.Contact's last name",
          "type": "string"
        },
        "first_name": {
          "text": "Required.Contact's first name",
          "type": "string",
          "required": true
        },
        "phone_number": {
          "text": "Required.Contact's phone number",
          "type": "string",
          "required": true
        },
        "reply_markup": {
          "text": "Optional.Additional interface options.A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional.Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional.Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional.If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional.Sends the message silently.Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional.Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendcontact",
        "version": "-",
        "rate_limit": [],
        "description": "Send phone contacts seamlessly; receive the sent message",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendContact",
        "alias_endpoint": "/telegram/bot-token/sendcontact"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__deletemessage___post": {
      "provider_intent": "telegram__bot-token__deletemessage___post",
      "provider_alias_intent": "/bot-token/deletemessage",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/deleteMessage",
      "text": "Delete messages, including service messages",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "chat_id": {
          "text": "Required.Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "message_id": {
          "text": "Required.Identifier of the message to delete",
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#deletemessage",
        "version": "-",
        "rate_limit": [],
        "description": "Delete messages with specific constraints: 48-hour limit, permissions-based",
        "api_endpoint": "https://api.telegram.org/bot{token}/deleteMessage",
        "alias_endpoint": "/telegram/bot-token/deletemessage"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__sendmediagroup___post": {
      "provider_intent": "telegram__bot-token__sendmediagroup___post",
      "provider_alias_intent": "/bot-token/sendmediagroup",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendMediaGroup",
      "text": "Send multiple media files as an album.",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "media": {
          "text": "Required.A JSON-serialized array describing messages to be sent must include 2-10 items",
          "type": "string",
          "required": true
        },
        "chat_id": {
          "text": "Required.Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "protect_content": {
          "text": "Optional.Protects the contents of the sent messages from forwarding and saving",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional.Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional.If the messages are a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional.Sends messages silently. Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional.Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendmediagroup",
        "version": "-",
        "rate_limit": [],
        "description": "Send album: photos, videos, documents, audio files",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendMediaGroup",
        "alias_endpoint": "/telegram/bot-token/sendmediagroup"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__getfile___get": {
      "provider_intent": "telegram__bot-token__getfile___get",
      "provider_alias_intent": "/bot-token/getfile",
      "provider_proxy_intent": "/bot{token}/getFile",
      "text": "Get file info",
      "category": "Message",
      "method": "GET",
      "type": "API",
      "request_type": "API",
      "params": {
        "file_id": {
          "text": "Required.File identifier to get information about",
          "type": "string",
          "required": true
        }
      },
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#getfile",
        "version": "-",
        "rate_limit": [],
        "description": "Get file information, prepare for download: 20MB limit",
        "api_endpoint": "https://api.telegram.org/bot{token}/getFile",
        "alias_endpoint": "/telegram/bot-token/getfile"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-03-12T02:08:16.000Z"
    },
    "telegram__bot-token__getstickerset___get": {
      "provider_intent": "telegram__bot-token__getstickerset___get",
      "provider_alias_intent": "/bot-token/getstickerset",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/getStickerSet",
      "text": "Get a sticker set",
      "category": "Stickers",
      "method": "GET",
      "type": "API",
      "request_type": "API",
      "params": {
        "name": {
          "text": "Required.Name of the sticker set",
          "type": "string",
          "required": true
        }
      },
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#getstickerset",
        "version": "-",
        "rate_limit": [],
        "description": "Retrieve sticker set; return StickerSet object",
        "api_endpoint": "https://api.telegram.org/bot{token}/getStickerSet",
        "alias_endpoint": "/telegram/bot-token/getstickerset"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__sendsticker___post": {
      "provider_intent": "telegram__bot-token__sendsticker___post",
      "provider_alias_intent": "/bot-token/sendsticker",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendSticker",
      "text": "Send static WEBP, animated TGS, or video WEBM stickers",
      "category": "Stickers",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "chat_id": {
          "text": "Required.Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "sticker": {
          "text": "Required.Sticker to send.Pass a file_id as String to send a file that exists on the Telegram servers (recommended) pass an HTTP URL as a String for Telegram to get a.WEBP file from the Internet or upload a new one using multipart/form-data.More information on Sending Files »",
          "type": "string",
          "required": true
        },
        "reply_markup": {
          "text": "Optional.Additional interface options.A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional.Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional.Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional.If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional.Sends the message silently.Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional.Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendsticker",
        "version": "-",
        "rate_limit": [],
        "description": "Send stickers: .WEBP, .TGS, .WEBM; get returned Message",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendSticker",
        "alias_endpoint": "/telegram/bot-token/sendsticker"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__sendaudio___post": {
      "provider_intent": "telegram__bot-token__sendaudio___post",
      "provider_alias_intent": "/bot-token/sendaudio",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/sendAudio",
      "text": "Send audio file",
      "category": "Message",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "audio": {
          "text": "Required. Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended) pass an HTTP URL as a String for Telegram to get an audio file from the Internet or upload a new one using multipart/form-data. More information on Sending Files",
          "type": "string",
          "required": true
        },
        "thumb": {
          "enum": [
            "",
            "",
            "<file_attach_name>” if the thumbnail was uploaded using multipart",
            "form-data under <file_attach_name>. More information on Sending Files"
          ],
          "text": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file so you can pass “attach",
          "type": "string"
        },
        "title": {
          "text": "Optional. Track name",
          "type": "string"
        },
        "caption": {
          "text": "Optional. Audio caption 0-1024 characters after entities parsing",
          "type": "string"
        },
        "chat_id": {
          "text": "Required. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
          "type": "string",
          "required": true
        },
        "duration": {
          "text": "Optional. Duration of the audio in seconds",
          "type": "string"
        },
        "performer": {
          "text": "Optional. Performer",
          "type": "string"
        },
        "parse_mode": {
          "text": "Optional. Mode for parsing entities in the audio caption. See formatting options for more details.",
          "type": "string"
        },
        "reply_markup": {
          "text": "Optional. Additional interface options. A JSON-serialized object for an inline keyboard custom reply keyboard instructions to remove reply keyboard or to force a reply from the user.",
          "type": "string"
        },
        "protect_content": {
          "text": "Optional. Protects the contents of the sent message from forwarding and saving",
          "type": "string"
        },
        "caption_entities": {
          "text": "Optional. A JSON-serialized list of special entities that appear in the caption which can be specified instead of parse_mode",
          "type": "string"
        },
        "message_thread_id": {
          "text": "Optional. Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
          "type": "string"
        },
        "reply_to_message_id": {
          "text": "Optional. If the message is a reply ID of the original message",
          "type": "string"
        },
        "disable_notification": {
          "text": "Optional. Sends the message silently. Users will receive a notification with no sound.",
          "type": "string"
        },
        "allow_sending_without_reply": {
          "text": "Optional. Pass True if the message should be sent even if the specified replied-to message is not found",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#sendaudio",
        "version": "-",
        "rate_limit": [],
        "description": "Send music files on Telegram: MP3, M4A, 50MB limit",
        "api_endpoint": "https://api.telegram.org/bot{token}/sendAudio",
        "alias_endpoint": "/telegram/bot-token/sendaudio"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__getcustomemojistickers___get": {
      "provider_intent": "telegram__bot-token__getcustomemojistickers___get",
      "provider_alias_intent": "/bot-token/getcustomemojistickers",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/getCustomEmojiStickers",
      "text": "Get custom emoji sticker info by their identifiers",
      "category": "Stickers",
      "method": "GET",
      "type": "API",
      "request_type": "API",
      "params": {
        "custom_emoji_ids": {
          "text": "Required.List of custom emoji identifiers.At most 200 custom emoji identifiers can be specified.",
          "type": "string",
          "required": true
        }
      },
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#getcustomemojistickers",
        "version": "-",
        "rate_limit": [],
        "description": "Retrieve custom emoji sticker information with identifiers",
        "api_endpoint": "https://api.telegram.org/bot{token}/getCustomEmojiStickers",
        "alias_endpoint": "/telegram/bot-token/getcustomemojistickers"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__uploadstickerfile___post": {
      "provider_intent": "telegram__bot-token__uploadstickerfile___post",
      "provider_alias_intent": "/bot-token/uploadstickerfile",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/uploadStickerFile",
      "text": "Upload sticker PNG for future use in sticker sets",
      "category": "Stickers",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "user_id": {
          "text": "Required.User identifier of sticker file owner",
          "type": "string",
          "required": true
        },
        "png_sticker": {
          "text": "Required.PNG image with the sticker must be up to 512 kilobytes in size dimensions must not exceed 512px and either width or height must be exactly 512px.More information on Sending Files",
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#uploadstickerfile",
        "version": "-",
        "rate_limit": [],
        "description": "Upload PNG sticker for Telegram sticker sets",
        "api_endpoint": "https://api.telegram.org/bot{token}/uploadStickerFile",
        "alias_endpoint": "/telegram/bot-token/uploadstickerfile"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__createnewstickerset___post": {
      "provider_intent": "telegram__bot-token__createnewstickerset___post",
      "provider_alias_intent": "/bot-token/createnewstickerset",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/createNewStickerSet",
      "text": "Make a user's new sticker set",
      "category": "Stickers",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "name": {
          "text": "Required.Short name of sticker set to be used in t.me/addstickers/ URLs (e.g.animals).Can contain only English letters digits and underscores.Must begin with a letter can't contain consecutive underscores and must end in \"_by_<bot_username>\".<bot_username> is case insensitive.1-64 characters.",
          "type": "string",
          "required": true
        },
        "title": {
          "text": "Required. Sticker set title 1-64 characters",
          "type": "string",
          "required": true
        },
        "emojis": {
          "text": "Required.One or more emoji corresponding to the sticker",
          "type": "string",
          "required": true
        },
        "user_id": {
          "text": "Required.User identifier of created sticker set owner",
          "type": "string",
          "required": true
        },
        "png_sticker": {
          "text": "Optional.PNG image with the sticker must be up to 512 kilobytes in size dimensions must not exceed 512px and either width or height must be exactly 512px.Pass a file_id as a String to send a file that already exists on the Telegram servers pass an HTTP URL as a String for Telegram to get a file from the Internet or upload a new one using multipart/form-data.More information on Sending Files »",
          "type": "string"
        },
        "tgs_sticker": {
          "enum": [
            "",
            "",
            "core.telegram.org",
            "stickers#animated-sticker-requirements for technical requirements"
          ],
          "text": "Optional.TGS animation with the sticker uploaded using multipart/form-data.See https",
          "type": "string"
        },
        "sticker_type": {
          "text": "Optional.Type of stickers in the set pass “regular” or “mask”.Custom emoji sticker sets can't be created via the Bot API at the moment.By default a regular sticker set is created.",
          "type": "string"
        },
        "webm_sticker": {
          "enum": [
            "",
            "",
            "core.telegram.org",
            "stickers#video-sticker-requirements for technical requirements"
          ],
          "text": "Optional.WEBM video with the sticker uploaded using multipart/form-data. See https",
          "type": "string"
        },
        "mask_position": {
          "text": "Optional.A JSON-serialized object for position where the mask should be placed on faces",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#createnewstickerset",
        "version": "-",
        "rate_limit": [],
        "description": "Create user-owned sticker set for bot",
        "api_endpoint": "https://api.telegram.org/bot{token}/createNewStickerSet",
        "alias_endpoint": "/telegram/bot-token/createnewstickerset"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__addstickertoset___post": {
      "provider_intent": "telegram__bot-token__addstickertoset___post",
      "provider_alias_intent": "/bot-token/addstickertoset",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/addStickerToSet",
      "text": "Bot creates set. Add new sticker",
      "category": "Stickers",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "name": {
          "text": "Required.Sticker set name",
          "type": "string",
          "required": true
        },
        "emojis": {
          "text": "Required.One or more emoji corresponding to the sticker",
          "type": "string",
          "required": true
        },
        "user_id": {
          "text": "Required.User identifier of sticker set owner",
          "type": "string",
          "required": true
        },
        "png_sticker": {
          "text": "Optional.PNG image with the sticker must be up to 512 kilobytes in size dimensions must not exceed 512px and either width or height must be exactly 512px.\nPass a file_id as a String to send a file that already exists on the Telegram servers pass an HTTP URL as a String for Telegram to get a file from the Internet or upload a new one using multipart/form-data.More information on Sending Files",
          "type": "string"
        },
        "tgs_sticker": {
          "enum": [
            "",
            "",
            "core.telegram.org",
            "stickers#animated-sticker-requirements for technical requirements"
          ],
          "text": "Optional.TGS animation with the sticker uploaded using multipart/form-data.See https",
          "type": "string"
        },
        "webm_sticker": {
          "enum": [
            "",
            "",
            "core.telegram.org",
            "stickers#video-sticker-requirements for technical requirements"
          ],
          "text": "Optional. WEBM video with the sticker uploaded using multipart/form-data. See https",
          "type": "string"
        },
        "mask_position": {
          "text": "Optional.A JSON-serialized object for position where the mask should be placed on faces",
          "type": "string"
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#addstickertoset",
        "version": "-",
        "rate_limit": [],
        "description": "Add new sticker to bot's set: animated/static, 50/120 limit",
        "api_endpoint": "https://api.telegram.org/bot{token}/addStickerToSet",
        "alias_endpoint": "/telegram/bot-token/addstickertoset"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__setstickerpositioninset___post": {
      "provider_intent": "telegram__bot-token__setstickerpositioninset___post",
      "provider_alias_intent": "/bot-token/setstickerpositioninset",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/setStickerPositionInSet",
      "text": "Bot moves sticker to specific position in set",
      "category": "Stickers",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "sticker": {
          "text": "Required.File identifier of the sticker",
          "type": "string",
          "required": true
        },
        "position": {
          "text": "Required.New sticker position in the set zero-based",
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#setstickerpositioninset",
        "version": "-",
        "rate_limit": [],
        "description": "Move bot-created sticker in set to position",
        "api_endpoint": "https://api.telegram.org/bot{token}/setStickerPositionInSet",
        "alias_endpoint": "/telegram/bot-token/setstickerpositioninset"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__deletestickerfromset___post": {
      "provider_intent": "telegram__bot-token__deletestickerfromset___post",
      "provider_alias_intent": "/bot-token/deletestickerfromset",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/deleteStickerFromSet",
      "text": "Remove bot-created set sticker",
      "category": "Stickers",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "sticker": {
          "text": "Required.File identifier of the sticker",
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#deletestickerfromset",
        "version": "-",
        "rate_limit": [],
        "description": "Delete bot-created sticker",
        "api_endpoint": "https://api.telegram.org/bot{token}/deleteStickerFromSet",
        "alias_endpoint": "/telegram/bot-token/deletestickerfromset"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__setstickersetthumb___post": {
      "provider_intent": "telegram__bot-token__setstickersetthumb___post",
      "provider_alias_intent": "/bot-token/setstickersetthumb",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/setStickerSetThumb",
      "text": "Set sticker set thumbnail: animated for animations",
      "category": "Stickers",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {
        "name": {
          "text": "Required.Sticker set name",
          "type": "string",
          "required": true
        },
        "thumb": {
          "enum": [
            "",
            "",
            "core.telegram.org",
            "stickers#animated-sticker-requirements for animated sticker technical requirements or a WEBM video with the thumbnail up to 32 kilobytes in size; see https"
          ],
          "text": "Optional.A PNG image with the thumbnail must be up to 128 kilobytes in size and have width and height exactly 100px or a TGS animation with the thumbnail up to 32 kilobytes in size; see https",
          "type": "string"
        },
        "user_id": {
          "text": "Required.User identifier of the sticker set owner",
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#setstickersetthumbnail",
        "version": "-",
        "rate_limit": [],
        "description": "Set animated or video sticker set thumbnails easily.",
        "api_endpoint": "https://api.telegram.org/bot{token}/setStickerSetThumb",
        "alias_endpoint": "/telegram/bot-token/setstickersetthumb"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__getme___get": {
      "provider_intent": "telegram__bot-token__getme___get",
      "provider_alias_intent": "/bot-token/getme",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/getMe",
      "text": "Get bot details",
      "category": "User",
      "method": "GET",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#getme",
        "version": "-",
        "rate_limit": [],
        "description": "Bot authentication token test",
        "api_endpoint": "https://api.telegram.org/bot{token}/getMe",
        "alias_endpoint": "/telegram/bot-token/getme"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__logout___post": {
      "provider_intent": "telegram__bot-token__logout___post",
      "provider_alias_intent": "/bot-token/logout",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/logOut",
      "text": "Logout from Cloud Bot API before running locally",
      "category": "User",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#logout",
        "version": "-",
        "rate_limit": [],
        "description": "Logout from cloud Bot API server before launching locally",
        "api_endpoint": "https://api.telegram.org/bot{token}/logOut",
        "alias_endpoint": "/telegram/bot-token/logout"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__close___post": {
      "provider_intent": "telegram__bot-token__close___post",
      "provider_alias_intent": "/bot-token/close",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/close",
      "text": "Close bot instance",
      "category": "User",
      "method": "POST",
      "type": "API",
      "request_type": "API",
      "params": {},
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#close",
        "version": "-",
        "rate_limit": [],
        "description": "Close bot instance safely before server migration",
        "api_endpoint": "https://api.telegram.org/bot{token}/close",
        "alias_endpoint": "/telegram/bot-token/close"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    },
    "telegram__bot-token__getuserprofilephotos___get": {
      "provider_intent": "telegram__bot-token__getuserprofilephotos___get",
      "provider_alias_intent": "/bot-token/getuserprofilephotos",
      "provider_proxy_intent": "https://api.telegram.org/bot{token}/getUserProfilePhotos",
      "text": "Get user profile pictures",
      "category": "User",
      "method": "GET",
      "type": "API",
      "request_type": "API",
      "params": {
        "limit": {
          "text": "Optional.Limits the number of photos to be retrieved.Values between 1-100 are accepted.Defaults to 100.",
          "type": "string"
        },
        "offset": {
          "text": "Optional.Sequential number of the first photo to be returned.By default all photos are returned.",
          "type": "string"
        },
        "user_id": {
          "text": "Required.Unique identifier of the target user",
          "type": "string",
          "required": true
        }
      },
      "path": {},
      "body": {},
      "custom_headers": {},
      "domain_params": {},
      "meta": {
        "auth": [],
        "api_ref": "https://core.telegram.org/bots/api#getuserprofilephotos",
        "version": "-",
        "rate_limit": [],
        "description": "Get a list of profile pictures for a user",
        "api_endpoint": "https://api.telegram.org/bot{token}/getUserProfilePhotos",
        "alias_endpoint": "/telegram/bot-token/getuserprofilephotos"
      },
      "auth": {
        "path": {
          "token": "api_key"
        }
      },
      "response_format": {},
      "updated_at": "2025-02-18T13:13:04.000Z"
    }
  }
}