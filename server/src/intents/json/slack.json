{
  "app": {
    "title": "Slack API",
    "description": "",
    "api_base": "/slack",
    "copyright": "",
    "copyright_year": "",
    "contact_email": ""
  },
  "category": {
    "All": ""
  },
  "routes": {
    "post_admin_apps_approve": {
      "provider_intent": "post_admin_apps_approve",
      "provider_alias_intent": "/admin.apps.approve",
      "text": "Approve an app for installation on a workspace. ðŸš§",
      "category": "Admin Apps",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "app_id": {
          "type": "string",
          "text": "The id of the app to approve"
        },
        "request_id": {
          "type": "string",
          "text": "The id of the request to approve"
        },
        "team_id": {
          "type": "string"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Approve an app for installation on a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.apps.approve",
        "alias_endpoint": "/slack/admin.apps.approve",
        "api_ref": "https://api.slack.com/methods/admin.apps.approve"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_apps_restrict": {
      "provider_intent": "post_admin_apps_restrict",
      "provider_alias_intent": "/admin.apps.restrict",
      "text": "Restrict an app for installation on a workspace. ðŸš§",
      "category": "Admin Apps",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "app_id": {
          "type": "string",
          "text": "The id of the app to restrict"
        },
        "request_id": {
          "type": "string",
          "text": "The id of the request to restrict"
        },
        "team_id": {
          "type": "string"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Restrict an app for installation on a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.apps.restrict",
        "alias_endpoint": "/slack/admin.apps.restrict",
        "api_ref": "https://api.slack.com/methods/admin.apps.restrict"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_apps_approved_list": {
      "provider_intent": "get_admin_apps_approved_list",
      "provider_alias_intent": "/admin.apps.approved.list",
      "text": "List approved apps for an org or workspace. ðŸš§",
      "category": "Admin Apps Approved",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        },
        "team_id": {
          "type": "string"
        },
        "enterprise_id": {
          "type": "string"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List approved apps for an org or workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.apps.approved.list",
        "alias_endpoint": "/slack/admin.apps.approved.list",
        "api_ref": "https://api.slack.com/methods/admin.apps.approved.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_apps_requests_list": {
      "provider_intent": "get_admin_apps_requests_list",
      "provider_alias_intent": "/admin.apps.requests.list",
      "text": "List app requests for a team/workspace. ðŸš§",
      "category": "Admin Apps Requests",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        },
        "team_id": {
          "type": "string"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List app requests for a team/workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.apps.requests.list",
        "alias_endpoint": "/slack/admin.apps.requests.list",
        "api_ref": "https://api.slack.com/methods/admin.apps.requests.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_apps_restricted_list": {
      "provider_intent": "get_admin_apps_restricted_list",
      "provider_alias_intent": "/admin.apps.restricted.list",
      "text": "List restricted apps for an org or workspace. ðŸš§",
      "category": "Admin Apps Restricted",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        },
        "team_id": {
          "type": "string"
        },
        "enterprise_id": {
          "type": "string"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List restricted apps for an org or workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.apps.restricted.list",
        "alias_endpoint": "/slack/admin.apps.restricted.list",
        "api_ref": "https://api.slack.com/methods/admin.apps.restricted.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_conversations_archive": {
      "provider_intent": "post_admin_conversations_archive",
      "provider_alias_intent": "/admin.conversations.archive",
      "text": "Archive a public or private channel.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel_id": {
          "type": "string",
          "text": "The channel to archive",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Archive a public or private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.archive",
        "alias_endpoint": "/slack/admin.conversations.archive",
        "api_ref": "https://api.slack.com/methods/admin.conversations.archive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_converttoprivate": {
      "provider_intent": "post_admin_conversations_converttoprivate",
      "provider_alias_intent": "/admin.conversations.converttoprivate",
      "text": "Convert a public channel to a private channel.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel_id": {
          "type": "string",
          "text": "The channel to convert to private",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Convert a public channel to a private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.convertToPrivate",
        "alias_endpoint": "/slack/admin.conversations.converttoprivate",
        "api_ref": "https://api.slack.com/methods/admin.conversations.convertToPrivate"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_create": {
      "provider_intent": "post_admin_conversations_create",
      "provider_alias_intent": "/admin.conversations.create",
      "text": "Create a public or private channel-based conversation.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "name": {
          "type": "string",
          "text": "Name of the public or private channel to create",
          "required": true
        },
        "description": {
          "type": "string",
          "text": "Description of the public or private channel to create"
        },
        "is_private": {
          "type": "boolean",
          "text": "When `true` creates a private channel instead of a public channel",
          "required": true,
          "enum": [
            true,
            false
          ]
        },
        "org_wide": {
          "type": "boolean",
          "text": "When `true` the channel will be available org-wide",
          "enum": [
            true,
            false
          ]
        },
        "team_id": {
          "type": "string",
          "text": "The workspace to create the channel in"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a public or private channel-based conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.create",
        "alias_endpoint": "/slack/admin.conversations.create",
        "api_ref": "https://api.slack.com/methods/admin.conversations.create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_delete": {
      "provider_intent": "post_admin_conversations_delete",
      "provider_alias_intent": "/admin.conversations.delete",
      "text": "Delete a public or private channel.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel_id": {
          "type": "string",
          "text": "The channel to delete",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Delete a public or private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.delete",
        "alias_endpoint": "/slack/admin.conversations.delete",
        "api_ref": "https://api.slack.com/methods/admin.conversations.delete"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_disconnectshared": {
      "provider_intent": "post_admin_conversations_disconnectshared",
      "provider_alias_intent": "/admin.conversations.disconnectshared",
      "text": "Disconnect a connected channel from one or more workspaces.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel_id": {
          "type": "string",
          "text": "The channel to be disconnected from some workspaces",
          "required": true
        },
        "leaving_team_ids": {
          "type": "string",
          "text": "The team to be removed from the channel"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Disconnect a connected channel from one or more workspaces.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.disconnectShared",
        "alias_endpoint": "/slack/admin.conversations.disconnectshared",
        "api_ref": "https://api.slack.com/methods/admin.conversations.disconnectShared"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_admin_conversations_getconversationprefs": {
      "provider_intent": "get_admin_conversations_getconversationprefs",
      "provider_alias_intent": "/admin.conversations.getconversationprefs",
      "text": "Get conversation preferences for a public or private channel.",
      "category": "Admin Conversations",
      "method": "GET",
      "type": "API",
      "params": {
        "channel_id": {
          "type": "string",
          "text": "The channel to get preferences for",
          "required": true
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get conversation preferences for a public or private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.getConversationPrefs",
        "alias_endpoint": "/slack/admin.conversations.getconversationprefs",
        "api_ref": "https://api.slack.com/methods/admin.conversations.getConversationPrefs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_admin_conversations_getteams": {
      "provider_intent": "get_admin_conversations_getteams",
      "provider_alias_intent": "/admin.conversations.getteams",
      "text": "Get all the workspaces a given public or private channel is connected to within this Enterprise org.",
      "category": "Admin Conversations",
      "method": "GET",
      "type": "API",
      "params": {
        "channel_id": {
          "type": "string",
          "text": "The channel to determine connected workspaces within the organization for",
          "required": true
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get all the workspaces a given public or private channel is connected to within this Enterprise org.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.getTeams",
        "alias_endpoint": "/slack/admin.conversations.getteams",
        "api_ref": "https://api.slack.com/methods/admin.conversations.getTeams"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_invite": {
      "provider_intent": "post_admin_conversations_invite",
      "provider_alias_intent": "/admin.conversations.invite",
      "text": "Invite a user to a public or private channel.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "user_ids": {
          "type": "string",
          "text": "The users to invite",
          "required": true
        },
        "channel_id": {
          "type": "string",
          "text": "The channel that the users will be invited to",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Invite a user to a public or private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.invite",
        "alias_endpoint": "/slack/admin.conversations.invite",
        "api_ref": "https://api.slack.com/methods/admin.conversations.invite"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_rename": {
      "provider_intent": "post_admin_conversations_rename",
      "provider_alias_intent": "/admin.conversations.rename",
      "text": "Rename a public or private channel.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel_id": {
          "type": "string",
          "text": "The channel to rename",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Rename a public or private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.rename",
        "alias_endpoint": "/slack/admin.conversations.rename",
        "api_ref": "https://api.slack.com/methods/admin.conversations.rename"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_admin_conversations_search": {
      "provider_intent": "get_admin_conversations_search",
      "provider_alias_intent": "/admin.conversations.search",
      "text": "Search for public or private channels in an Enterprise organization.",
      "category": "Admin Conversations",
      "method": "GET",
      "type": "API",
      "params": {
        "team_ids": {
          "type": "string",
          "text": "Comma separated string of team IDs signifying the workspaces to search through"
        },
        "query": {
          "type": "string",
          "text": "Name of the the channel to query by"
        },
        "limit": {
          "type": "integer",
          "text": "Maximum number of items to be returned"
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        },
        "search_channel_types": {
          "type": "string",
          "text": "The type of channel to include or exclude in the search"
        },
        "sort": {
          "type": "string",
          "text": "Possible values are `relevant` (search ranking based on what we think is closest) `name` (alphabetical) `member_count` (number of users in the channel) and `created` (date channel was created)"
        },
        "sort_dir": {
          "type": "string",
          "text": "Sort direction"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Search for public or private channels in an Enterprise organization.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.search",
        "alias_endpoint": "/slack/admin.conversations.search",
        "api_ref": "https://api.slack.com/methods/admin.conversations.search"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_setconversationprefs": {
      "provider_intent": "post_admin_conversations_setconversationprefs",
      "provider_alias_intent": "/admin.conversations.setconversationprefs",
      "text": "Set the posting permissions for a public or private channel.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel_id": {
          "type": "string",
          "text": "The channel to set the prefs for",
          "required": true
        },
        "prefs": {
          "type": "string",
          "text": "The prefs for this channel in a stringified JSON format",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set the posting permissions for a public or private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.setConversationPrefs",
        "alias_endpoint": "/slack/admin.conversations.setconversationprefs",
        "api_ref": "https://api.slack.com/methods/admin.conversations.setConversationPrefs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_setteams": {
      "provider_intent": "post_admin_conversations_setteams",
      "provider_alias_intent": "/admin.conversations.setteams",
      "text": "Set the workspaces in an Enterprise grid org that connect to a public or private channel.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel_id": {
          "type": "string",
          "text": "The encoded `channel_id` to add or remove to workspaces",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "The workspace to which the channel belongs"
        },
        "target_team_ids": {
          "type": "string",
          "text": "A comma-separated list of workspaces to which the channel should be shared"
        },
        "org_channel": {
          "type": "boolean",
          "text": "True if channel has to be converted to an org channel",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set the workspaces in an Enterprise grid org that connect to a public or private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.setTeams",
        "alias_endpoint": "/slack/admin.conversations.setteams",
        "api_ref": "https://api.slack.com/methods/admin.conversations.setTeams"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_unarchive": {
      "provider_intent": "post_admin_conversations_unarchive",
      "provider_alias_intent": "/admin.conversations.unarchive",
      "text": "Unarchive a public or private channel.",
      "category": "Admin Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel_id": {
          "type": "string",
          "text": "The channel to unarchive",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Unarchive a public or private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.unarchive",
        "alias_endpoint": "/slack/admin.conversations.unarchive",
        "api_ref": "https://api.slack.com/methods/admin.conversations.unarchive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_admin_conversations_ekm_listoriginalconnectedchannelinfo": {
      "provider_intent": "get_admin_conversations_ekm_listoriginalconnectedchannelinfo",
      "provider_alias_intent": "/admin.conversations.ekm.listoriginalconnectedchannelinfo",
      "text": "List all disconnected channelsâ€”i.e. channels that were once connected to other workspaces and then disconnectedâ€”and the corresponding original channel IDs for key revocation with EKM.",
      "category": "Admin Conversations Ekm",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "channel_ids": {
          "type": "string",
          "text": "A comma-separated list of channels to filter to"
        },
        "team_ids": {
          "type": "string",
          "text": "A comma-separated list of the workspaces to which the channels you would like returned belong"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all disconnected channelsâ€”i.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.ekm.listOriginalConnectedChannelInfo",
        "alias_endpoint": "/slack/admin.conversations.ekm.listoriginalconnectedchannelinfo",
        "api_ref": "https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_restrictaccess_addgroup": {
      "provider_intent": "post_admin_conversations_restrictaccess_addgroup",
      "provider_alias_intent": "/admin.conversations.restrictaccess.addgroup",
      "text": "Add an allowlist of IDP groups for accessing a channel",
      "category": "Admin Conversations RestrictAccess",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "The workspace where the channel exists"
        },
        "group_id": {
          "type": "string",
          "text": "The [IDP Group](https",
          "required": true,
          "enum": [
            "",
            "",
            "slack"
          ]
        },
        "channel_id": {
          "type": "string",
          "text": "The channel to link this group to",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add an allowlist of IDP groups for accessing a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.restrictAccess.addGroup",
        "alias_endpoint": "/slack/admin.conversations.restrictaccess.addgroup",
        "api_ref": "https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_admin_conversations_restrictaccess_listgroups": {
      "provider_intent": "get_admin_conversations_restrictaccess_listgroups",
      "provider_alias_intent": "/admin.conversations.restrictaccess.listgroups",
      "text": "List all IDP Groups linked to a channel",
      "category": "Admin Conversations RestrictAccess",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "channel_id": {
          "type": "string",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "The workspace where the channel exists"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all IDP Groups linked to a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.restrictAccess.listGroups",
        "alias_endpoint": "/slack/admin.conversations.restrictaccess.listgroups",
        "api_ref": "https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_conversations_restrictaccess_removegroup": {
      "provider_intent": "post_admin_conversations_restrictaccess_removegroup",
      "provider_alias_intent": "/admin.conversations.restrictaccess.removegroup",
      "text": "Remove a linked IDP group linked from a private channel",
      "category": "Admin Conversations RestrictAccess",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "The workspace where the channel exists",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The [IDP Group](https",
          "required": true,
          "enum": [
            "",
            "",
            "slack"
          ]
        },
        "channel_id": {
          "type": "string",
          "text": "The channel to remove the linked group from",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove a linked IDP group linked from a private channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.conversations.restrictAccess.removeGroup",
        "alias_endpoint": "/slack/admin.conversations.restrictaccess.removegroup",
        "api_ref": "https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_emoji_add": {
      "provider_intent": "post_admin_emoji_add",
      "provider_alias_intent": "/admin.emoji.add",
      "text": "Add an emoji.",
      "category": "Admin Emoji",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the emoji to be removed",
          "required": true
        },
        "url": {
          "type": "string",
          "text": "The URL of a file to use as an image for the emoji",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add an emoji.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.emoji.add",
        "alias_endpoint": "/slack/admin.emoji.add",
        "api_ref": "https://api.slack.com/methods/admin.emoji.add"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_emoji_addalias": {
      "provider_intent": "post_admin_emoji_addalias",
      "provider_alias_intent": "/admin.emoji.addalias",
      "text": "Add an emoji alias.",
      "category": "Admin Emoji",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the emoji to be aliased",
          "required": true
        },
        "alias_for": {
          "type": "string",
          "text": "The alias of the emoji",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add an emoji alias.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.emoji.addAlias",
        "alias_endpoint": "/slack/admin.emoji.addalias",
        "api_ref": "https://api.slack.com/methods/admin.emoji.addAlias"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_admin_emoji_list": {
      "provider_intent": "get_admin_emoji_list",
      "provider_alias_intent": "/admin.emoji.list",
      "text": "List emoji for an Enterprise Grid organization.",
      "category": "Admin Emoji",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List emoji for an Enterprise Grid organization.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.emoji.list",
        "alias_endpoint": "/slack/admin.emoji.list",
        "api_ref": "https://api.slack.com/methods/admin.emoji.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_emoji_remove": {
      "provider_intent": "post_admin_emoji_remove",
      "provider_alias_intent": "/admin.emoji.remove",
      "text": "Remove an emoji across an Enterprise Grid organization",
      "category": "Admin Emoji",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the emoji to be removed",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove an emoji across an Enterprise Grid organization.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.emoji.remove",
        "alias_endpoint": "/slack/admin.emoji.remove",
        "api_ref": "https://api.slack.com/methods/admin.emoji.remove"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_emoji_rename": {
      "provider_intent": "post_admin_emoji_rename",
      "provider_alias_intent": "/admin.emoji.rename",
      "text": "Rename an emoji.",
      "category": "Admin Emoji",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the emoji to be renamed",
          "required": true
        },
        "new_name": {
          "type": "string",
          "text": "The new name of the emoji",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Rename an emoji.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.emoji.rename",
        "alias_endpoint": "/slack/admin.emoji.rename",
        "api_ref": "https://api.slack.com/methods/admin.emoji.rename"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_inviterequests_approve": {
      "provider_intent": "post_admin_inviterequests_approve",
      "provider_alias_intent": "/admin.inviterequests.approve",
      "text": "Approve a workspace invite request.",
      "category": "Admin InviteRequests",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "ID for the workspace where the invite request was made"
        },
        "invite_request_id": {
          "type": "string",
          "text": "ID of the request to invite",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Approve a workspace invite request.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.inviteRequests.approve",
        "alias_endpoint": "/slack/admin.inviterequests.approve",
        "api_ref": "https://api.slack.com/methods/admin.inviteRequests.approve"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_admin_inviterequests_deny": {
      "provider_intent": "post_admin_inviterequests_deny",
      "provider_alias_intent": "/admin.inviterequests.deny",
      "text": "Deny a workspace invite request. ðŸš§",
      "category": "Admin InviteRequests",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "ID for the workspace where the invite request was made"
        },
        "invite_request_id": {
          "type": "string",
          "text": "ID of the request to invite",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deny a workspace invite request.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.inviteRequests.deny",
        "alias_endpoint": "/slack/admin.inviterequests.deny",
        "api_ref": "https://api.slack.com/methods/admin.inviteRequests.deny"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_inviterequests_list": {
      "provider_intent": "get_admin_inviterequests_list",
      "provider_alias_intent": "/admin.inviterequests.list",
      "text": "List all pending workspace invite requests. ðŸš§",
      "category": "Admin InviteRequests",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "string",
          "text": "ID for the workspace where the invite requests were made"
        },
        "cursor": {
          "type": "string",
          "text": "Value of the `next_cursor` field sent as part of the previous API response"
        },
        "limit": {
          "type": "integer",
          "text": "The number of results that will be returned by the API on each invocation"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all pending workspace invite requests.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.inviteRequests.list",
        "alias_endpoint": "/slack/admin.inviterequests.list",
        "api_ref": "https://api.slack.com/methods/admin.inviteRequests.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_inviterequests_approved_list": {
      "provider_intent": "get_admin_inviterequests_approved_list",
      "provider_alias_intent": "/admin.inviterequests.approved.list",
      "text": "List all approved workspace invite requests. ðŸš§",
      "category": "Admin InviteRequests Approved",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "string",
          "text": "ID for the workspace where the invite requests were made"
        },
        "cursor": {
          "type": "string",
          "text": "Value of the `next_cursor` field sent as part of the previous API response"
        },
        "limit": {
          "type": "integer",
          "text": "The number of results that will be returned by the API on each invocation"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all approved workspace invite requests.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.inviteRequests.approved.list",
        "alias_endpoint": "/slack/admin.inviterequests.approved.list",
        "api_ref": "https://api.slack.com/methods/admin.inviteRequests.approved.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_inviterequests_denied_list": {
      "provider_intent": "get_admin_inviterequests_denied_list",
      "provider_alias_intent": "/admin.inviterequests.denied.list",
      "text": "List all denied workspace invite requests. ðŸš§",
      "category": "Admin InviteRequests Denied",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "string",
          "text": "ID for the workspace where the invite requests were made"
        },
        "cursor": {
          "type": "string",
          "text": "Value of the `next_cursor` field sent as part of the previous api response"
        },
        "limit": {
          "type": "integer",
          "text": "The number of results that will be returned by the API on each invocation"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all denied workspace invite requests.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.inviteRequests.denied.list",
        "alias_endpoint": "/slack/admin.inviterequests.denied.list",
        "api_ref": "https://api.slack.com/methods/admin.inviteRequests.denied.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_teams_create": {
      "provider_intent": "post_admin_teams_create",
      "provider_alias_intent": "/admin.teams.create",
      "text": "Create an Enterprise team. ðŸš§",
      "category": "Admin Teams",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_domain": {
          "type": "string",
          "text": "Team domain (for example slacksoftballteam)",
          "required": true
        },
        "team_name": {
          "type": "string",
          "text": "Team name (for example Slack Softball Team)",
          "required": true
        },
        "team_description": {
          "type": "string",
          "text": "Description for the team"
        },
        "team_discoverability": {
          "type": "string",
          "text": "Who can join the team"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create an Enterprise team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.create",
        "alias_endpoint": "/slack/admin.teams.create",
        "api_ref": "https://api.slack.com/methods/admin.teams.create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_teams_list": {
      "provider_intent": "get_admin_teams_list",
      "provider_alias_intent": "/admin.teams.list",
      "text": "List all teams on an Enterprise organization ðŸš§",
      "category": "Admin Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all teams on an Enterprise organization.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.list",
        "alias_endpoint": "/slack/admin.teams.list",
        "api_ref": "https://api.slack.com/methods/admin.teams.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_teams_admins_list": {
      "provider_intent": "get_admin_teams_admins_list",
      "provider_alias_intent": "/admin.teams.admins.list",
      "text": "List all of the admins on a given workspace. ðŸš§",
      "category": "Admin Teams Admins",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        },
        "team_id": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all of the admins on a given workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.admins.list",
        "alias_endpoint": "/slack/admin.teams.admins.list",
        "api_ref": "https://api.slack.com/methods/admin.teams.admins.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_teams_owners_list": {
      "provider_intent": "get_admin_teams_owners_list",
      "provider_alias_intent": "/admin.teams.owners.list",
      "text": "List all of the owners on a given workspace. ðŸš§",
      "category": "Admin Teams Owners",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "team_id": {
          "type": "string",
          "required": true
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all of the owners on a given workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.owners.list",
        "alias_endpoint": "/slack/admin.teams.owners.list",
        "api_ref": "https://api.slack.com/methods/admin.teams.owners.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_teams_settings_info": {
      "provider_intent": "get_admin_teams_settings_info",
      "provider_alias_intent": "/admin.teams.settings.info",
      "text": "Fetch information about settings in a workspace ðŸš§",
      "category": "Admin Teams Settings",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Fetch information about settings in a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.settings.info",
        "alias_endpoint": "/slack/admin.teams.settings.info",
        "api_ref": "https://api.slack.com/methods/admin.teams.settings.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_teams_settings_setdefaultchannels": {
      "provider_intent": "post_admin_teams_settings_setdefaultchannels",
      "provider_alias_intent": "/admin.teams.settings.setdefaultchannels",
      "text": "Set the default channels of a workspace. ðŸš§",
      "category": "Admin Teams Settings",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "ID for the workspace to set the default channel for",
          "required": true
        },
        "channel_ids": {
          "type": "string",
          "text": "An array of channel IDs",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set the default channels of a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.settings.setDefaultChannels",
        "alias_endpoint": "/slack/admin.teams.settings.setdefaultchannels",
        "api_ref": "https://api.slack.com/methods/admin.teams.settings.setDefaultChannels"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_teams_settings_setdescription": {
      "provider_intent": "post_admin_teams_settings_setdescription",
      "provider_alias_intent": "/admin.teams.settings.setdescription",
      "text": "Set the description of a given workspace. ðŸš§",
      "category": "Admin Teams Settings",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "ID for the workspace to set the description for",
          "required": true
        },
        "description": {
          "type": "string",
          "text": "The new description for the workspace",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set the description of a given workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.settings.setDescription",
        "alias_endpoint": "/slack/admin.teams.settings.setdescription",
        "api_ref": "https://api.slack.com/methods/admin.teams.settings.setDescription"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_teams_settings_setdiscoverability": {
      "provider_intent": "post_admin_teams_settings_setdiscoverability",
      "provider_alias_intent": "/admin.teams.settings.setdiscoverability",
      "text": "An API method that allows admins to set the discoverability of a given workspace ðŸš§",
      "category": "Admin Teams Settings",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "The ID of the workspace to set discoverability on",
          "required": true
        },
        "discoverability": {
          "type": "string",
          "text": "This workspace's discovery setting",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "An API method that allows admins to set the discoverability of a given workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.settings.setDiscoverability",
        "alias_endpoint": "/slack/admin.teams.settings.setdiscoverability",
        "api_ref": "https://api.slack.com/methods/admin.teams.settings.setDiscoverability"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_teams_settings_seticon": {
      "provider_intent": "post_admin_teams_settings_seticon",
      "provider_alias_intent": "/admin.teams.settings.seticon",
      "text": "Sets the icon of a workspace. ðŸš§",
      "category": "Admin Teams Settings",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "image_url": {
          "type": "string",
          "text": "Image URL for the icon",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "ID for the workspace to set the icon for",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the icon of a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.settings.setIcon",
        "alias_endpoint": "/slack/admin.teams.settings.seticon",
        "api_ref": "https://api.slack.com/methods/admin.teams.settings.setIcon"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_teams_settings_setname": {
      "provider_intent": "post_admin_teams_settings_setname",
      "provider_alias_intent": "/admin.teams.settings.setname",
      "text": "Set the name of a given workspace. ðŸš§",
      "category": "Admin Teams Settings",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "ID for the workspace to set the name for",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The new name of the workspace",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set the name of a given workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.teams.settings.setName",
        "alias_endpoint": "/slack/admin.teams.settings.setname",
        "api_ref": "https://api.slack.com/methods/admin.teams.settings.setName"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_usergroups_addchannels": {
      "provider_intent": "post_admin_usergroups_addchannels",
      "provider_alias_intent": "/admin.usergroups.addchannels",
      "text": "Add one or more default channels to an IDP group. ðŸš§",
      "category": "Admin Usergroups",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "usergroup_id": {
          "type": "string",
          "text": "ID of the IDP group to add default channels for",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "The workspace to add default channels in"
        },
        "channel_ids": {
          "type": "string",
          "text": "Comma separated string of channel IDs",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add one or more default channels to an IDP group.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.usergroups.addChannels",
        "alias_endpoint": "/slack/admin.usergroups.addchannels",
        "api_ref": "https://api.slack.com/methods/admin.usergroups.addChannels"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_usergroups_addteams": {
      "provider_intent": "post_admin_usergroups_addteams",
      "provider_alias_intent": "/admin.usergroups.addteams",
      "text": "Associate one or more default workspaces with an organization-wide IDP group. ðŸš§",
      "category": "Admin Usergroups",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "usergroup_id": {
          "type": "string",
          "text": "An encoded usergroup (IDP Group) ID",
          "required": true
        },
        "team_ids": {
          "type": "string",
          "text": "A comma separated list of encoded team (workspace) IDs",
          "required": true
        },
        "auto_provision": {
          "type": "boolean",
          "text": "When `true` this method automatically creates new workspace accounts for the IDP group members",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Associate one or more default workspaces with an organization-wide IDP group.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.usergroups.addTeams",
        "alias_endpoint": "/slack/admin.usergroups.addteams",
        "api_ref": "https://api.slack.com/methods/admin.usergroups.addTeams"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_usergroups_listchannels": {
      "provider_intent": "get_admin_usergroups_listchannels",
      "provider_alias_intent": "/admin.usergroups.listchannels",
      "text": "List the channels linked to an org-level IDP group (user group). ðŸš§",
      "category": "Admin Usergroups",
      "method": "GET",
      "type": "API",
      "params": {
        "usergroup_id": {
          "type": "string",
          "text": "ID of the IDP group to list default channels for",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "ID of the the workspace"
        },
        "include_num_members": {
          "type": "boolean",
          "text": "Flag to include or exclude the count of members per channel",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the channels linked to an org-level IDP group (user group).",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.usergroups.listChannels",
        "alias_endpoint": "/slack/admin.usergroups.listchannels",
        "api_ref": "https://api.slack.com/methods/admin.usergroups.listChannels"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_usergroups_removechannels": {
      "provider_intent": "post_admin_usergroups_removechannels",
      "provider_alias_intent": "/admin.usergroups.removechannels",
      "text": "Remove one or more default channels from an org-level IDP group (user group). ðŸš§",
      "category": "Admin Usergroups",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "usergroup_id": {
          "type": "string",
          "text": "ID of the IDP Group",
          "required": true
        },
        "channel_ids": {
          "type": "string",
          "text": "Comma-separated string of channel IDs",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove one or more default channels from an org-level IDP group (user group).",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.usergroups.removeChannels",
        "alias_endpoint": "/slack/admin.usergroups.removechannels",
        "api_ref": "https://api.slack.com/methods/admin.usergroups.removeChannels"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_assign": {
      "provider_intent": "post_admin_users_assign",
      "provider_alias_intent": "/admin.users.assign",
      "text": "Add an Enterprise user to a workspace. ðŸš§",
      "category": "Admin Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "The ID (`T1234`) of the workspace",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to add to the workspace",
          "required": true
        },
        "is_restricted": {
          "type": "boolean",
          "text": "True if user should be added to the workspace as a guest",
          "enum": [
            true,
            false
          ]
        },
        "is_ultra_restricted": {
          "type": "boolean",
          "text": "True if user should be added to the workspace as a single-channel guest",
          "enum": [
            true,
            false
          ]
        },
        "channel_ids": {
          "type": "string",
          "text": "Comma separated values of channel IDs to add user in the new workspace"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add an Enterprise user to a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.assign",
        "alias_endpoint": "/slack/admin.users.assign",
        "api_ref": "https://api.slack.com/methods/admin.users.assign"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_invite": {
      "provider_intent": "post_admin_users_invite",
      "provider_alias_intent": "/admin.users.invite",
      "text": "Invite a user to a workspace. ðŸš§",
      "category": "Admin Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "The ID (`T1234`) of the workspace",
          "required": true
        },
        "email": {
          "type": "string",
          "text": "The email address of the person to invite",
          "required": true
        },
        "channel_ids": {
          "type": "string",
          "text": "A comma-separated list of `channel_id`s for this user to join",
          "required": true
        },
        "custom_message": {
          "type": "string",
          "text": "An optional message to send to the user in the invite email"
        },
        "real_name": {
          "type": "string",
          "text": "Full name of the user"
        },
        "resend": {
          "type": "boolean",
          "text": "Allow this invite to be resent in the future if a user has not signed up yet",
          "enum": [
            true,
            false
          ]
        },
        "is_restricted": {
          "type": "boolean",
          "text": "Is this user a multi-channel guest user? (default",
          "enum": [
            "false)"
          ]
        },
        "is_ultra_restricted": {
          "type": "boolean",
          "text": "Is this user a single channel guest user? (default",
          "enum": [
            "false)"
          ]
        },
        "guest_expiration_ts": {
          "type": "string",
          "text": "Timestamp when guest account should be disabled"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Invite a user to a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.invite",
        "alias_endpoint": "/slack/admin.users.invite",
        "api_ref": "https://api.slack.com/methods/admin.users.invite"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_admin_users_list": {
      "provider_intent": "get_admin_users_list",
      "provider_alias_intent": "/admin.users.list",
      "text": "List users on a workspace ðŸš§",
      "category": "Admin Users",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "string",
          "text": "The ID (`T1234`) of the workspace",
          "required": true
        },
        "cursor": {
          "type": "string",
          "text": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
        },
        "limit": {
          "type": "integer",
          "text": "Limit for how many users to be retrieved per page"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List users on a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.list",
        "alias_endpoint": "/slack/admin.users.list",
        "api_ref": "https://api.slack.com/methods/admin.users.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_remove": {
      "provider_intent": "post_admin_users_remove",
      "provider_alias_intent": "/admin.users.remove",
      "text": "Remove a user from a workspace. ðŸš§",
      "category": "Admin Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "The ID (`T1234`) of the workspace",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to remove",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove a user from a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.remove",
        "alias_endpoint": "/slack/admin.users.remove",
        "api_ref": "https://api.slack.com/methods/admin.users.remove"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_setadmin": {
      "provider_intent": "post_admin_users_setadmin",
      "provider_alias_intent": "/admin.users.setadmin",
      "text": "Set an existing guest regular user or owner to be an admin user. ðŸš§",
      "category": "Admin Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "The ID (`T1234`) of the workspace",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to designate as an admin",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set an existing guest regular user or owner to be an admin user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.setAdmin",
        "alias_endpoint": "/slack/admin.users.setadmin",
        "api_ref": "https://api.slack.com/methods/admin.users.setAdmin"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_setexpiration": {
      "provider_intent": "post_admin_users_setexpiration",
      "provider_alias_intent": "/admin.users.setexpiration",
      "text": "Set an expiration for a guest user ðŸš§",
      "category": "Admin Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "The ID (`T1234`) of the workspace",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to set an expiration for",
          "required": true
        },
        "expiration_ts": {
          "type": "integer",
          "text": "Timestamp when guest account should be disabled",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set an expiration for a guest user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.setExpiration",
        "alias_endpoint": "/slack/admin.users.setexpiration",
        "api_ref": "https://api.slack.com/methods/admin.users.setExpiration"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_setowner": {
      "provider_intent": "post_admin_users_setowner",
      "provider_alias_intent": "/admin.users.setowner",
      "text": "Set an existing guest regular user or admin user to be a workspace owner. ðŸš§",
      "category": "Admin Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "The ID (`T1234`) of the workspace",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "Id of the user to promote to owner",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set an existing guest regular user or admin user to be a workspace owner.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.setOwner",
        "alias_endpoint": "/slack/admin.users.setowner",
        "api_ref": "https://api.slack.com/methods/admin.users.setOwner"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_setregular": {
      "provider_intent": "post_admin_users_setregular",
      "provider_alias_intent": "/admin.users.setregular",
      "text": "Set an existing guest user admin user or owner to be a regular user. ðŸš§",
      "category": "Admin Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "The ID (`T1234`) of the workspace",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to designate as a regular user",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set an existing guest user admin user or owner to be a regular user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.setRegular",
        "alias_endpoint": "/slack/admin.users.setregular",
        "api_ref": "https://api.slack.com/methods/admin.users.setRegular"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_session_invalidate": {
      "provider_intent": "post_admin_users_session_invalidate",
      "provider_alias_intent": "/admin.users.session.invalidate",
      "text": "Invalidate a single session for a user by session_id ðŸš§",
      "category": "Admin Users Session",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "team_id": {
          "type": "string",
          "text": "ID of the team that the session belongs to",
          "required": true
        },
        "session_id": {
          "type": "integer",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Invalidate a single session for a user by session_id.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.session.invalidate",
        "alias_endpoint": "/slack/admin.users.session.invalidate",
        "api_ref": "https://api.slack.com/methods/admin.users.session.invalidate"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "post_admin_users_session_reset": {
      "provider_intent": "post_admin_users_session_reset",
      "provider_alias_intent": "/admin.users.session.reset",
      "text": "Wipes all valid sessions on all devices for a given user ðŸš§",
      "category": "Admin Users Session",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "user_id": {
          "type": "string",
          "text": "The ID of the user to wipe sessions for",
          "required": true
        },
        "mobile_only": {
          "type": "boolean",
          "text": "Only expire mobile sessions (default",
          "enum": [
            "false)"
          ]
        },
        "web_only": {
          "type": "boolean",
          "text": "Only expire web sessions (default",
          "enum": [
            "false)"
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Wipes all valid sessions on all devices for a given user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/admin.users.session.reset",
        "alias_endpoint": "/slack/admin.users.session.reset",
        "api_ref": "https://api.slack.com/methods/admin.users.session.reset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_api_test": {
      "provider_intent": "get_api_test",
      "provider_alias_intent": "/api.test",
      "text": "Checks API calling code. ðŸš§",
      "category": "Api",
      "method": "GET",
      "type": "API",
      "params": {
        "error": {
          "type": "string",
          "text": "Error response to return"
        },
        "foo": {
          "type": "string",
          "text": "example property to return"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Checks API calling code.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/api.test",
        "alias_endpoint": "/slack/api.test",
        "api_ref": "https://api.slack.com/methods/api.test"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_apps_uninstall": {
      "provider_intent": "get_apps_uninstall",
      "provider_alias_intent": "/apps.uninstall",
      "text": "Uninstalls your app from a workspace.",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "client_id": {
          "type": "string",
          "text": "Issued when you created your application"
        },
        "client_secret": {
          "type": "string",
          "text": "Issued when you created your application"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Uninstalls your app from a workspace.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/apps.uninstall",
        "alias_endpoint": "/slack/apps.uninstall",
        "api_ref": "https://api.slack.com/methods/apps.uninstall"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_apps_event_authorizations_list": {
      "provider_intent": "get_apps_event_authorizations_list",
      "provider_alias_intent": "/apps.event.authorizations.list",
      "text": "Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to. ðŸš§",
      "category": "Apps Event Authorizations",
      "method": "GET",
      "type": "API",
      "params": {
        "event_context": {
          "type": "string",
          "required": true
        },
        "cursor": {
          "type": "string"
        },
        "limit": {
          "type": "integer"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a list of authorizations for the given event context.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/apps.event.authorizations.list",
        "alias_endpoint": "/slack/apps.event.authorizations.list",
        "api_ref": "https://api.slack.com/methods/apps.event.authorizations.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_apps_permissions_info": {
      "provider_intent": "get_apps_permissions_info",
      "provider_alias_intent": "/apps.permissions.info",
      "text": "Returns list of permissions this app has on a team. ðŸš§",
      "category": "Apps Permissions",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns list of permissions this app has on a team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/apps.permissions.info",
        "alias_endpoint": "/slack/apps.permissions.info",
        "api_ref": "https://api.slack.com/methods/apps.permissions.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_apps_permissions_request": {
      "provider_intent": "get_apps_permissions_request",
      "provider_alias_intent": "/apps.permissions.request",
      "text": "Allows an app to request additional scopes ðŸš§",
      "category": "Apps Permissions",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "scopes": {
          "type": "string",
          "text": "A comma separated list of scopes to request for",
          "required": true
        },
        "trigger_id": {
          "type": "string",
          "text": "Token used to trigger the permissions API",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Allows an app to request additional scopes.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/apps.permissions.request",
        "alias_endpoint": "/slack/apps.permissions.request",
        "api_ref": "https://api.slack.com/methods/apps.permissions.request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_apps_permissions_resources_list": {
      "provider_intent": "get_apps_permissions_resources_list",
      "provider_alias_intent": "/apps.permissions.resources.list",
      "text": "Returns list of resource grants this app has on a team. ðŸš§",
      "category": "Apps Permissions Resources",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns list of resource grants this app has on a team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/apps.permissions.resources.list",
        "alias_endpoint": "/slack/apps.permissions.resources.list",
        "api_ref": "https://api.slack.com/methods/apps.permissions.resources.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_apps_permissions_scopes_list": {
      "provider_intent": "get_apps_permissions_scopes_list",
      "provider_alias_intent": "/apps.permissions.scopes.list",
      "text": "Returns list of scopes this app has on a team. ðŸš§",
      "category": "Apps Permissions Scopes",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns list of scopes this app has on a team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/apps.permissions.scopes.list",
        "alias_endpoint": "/slack/apps.permissions.scopes.list",
        "api_ref": "https://api.slack.com/methods/apps.permissions.scopes.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_apps_permissions_users_list": {
      "provider_intent": "get_apps_permissions_users_list",
      "provider_alias_intent": "/apps.permissions.users.list",
      "text": "Returns list of user grants and corresponding scopes this app has on a team. ðŸš§",
      "category": "Apps Permissions Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns list of user grants and corresponding scopes this app has on a team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/apps.permissions.users.list",
        "alias_endpoint": "/slack/apps.permissions.users.list",
        "api_ref": "https://api.slack.com/methods/apps.permissions.users.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_apps_permissions_users_request": {
      "provider_intent": "get_apps_permissions_users_request",
      "provider_alias_intent": "/apps.permissions.users.request",
      "text": "Enables an app to trigger a permissions modal to grant an app access to a user access scope. ðŸš§",
      "category": "Apps Permissions Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "scopes": {
          "type": "string",
          "text": "A comma separated list of user scopes to request for",
          "required": true
        },
        "trigger_id": {
          "type": "string",
          "text": "Token used to trigger the request",
          "required": true
        },
        "user": {
          "type": "string",
          "text": "The user this scope is being requested for",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables an app to trigger a permissions modal to grant an app access to a user access scope.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/apps.permissions.users.request",
        "alias_endpoint": "/slack/apps.permissions.users.request",
        "api_ref": "https://api.slack.com/methods/apps.permissions.users.request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "response_type": "",
      "wip": 1,
      "subdomain": {},
      "payload_type": ""
    },
    "get_auth_revoke": {
      "provider_intent": "get_auth_revoke",
      "provider_alias_intent": "/auth.revoke",
      "text": "Revokes a token.",
      "category": "Auth",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "test": {
          "type": "boolean",
          "text": "Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Revokes a token.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/auth.revoke",
        "alias_endpoint": "/slack/auth.revoke",
        "api_ref": "https://api.slack.com/methods/auth.revoke"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_auth_test": {
      "provider_intent": "get_auth_test",
      "provider_alias_intent": "/auth.test",
      "text": "Checks authentication & identity.",
      "category": "Auth",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Checks authentication & identity.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/auth.test",
        "alias_endpoint": "/slack/auth.test",
        "api_ref": "https://api.slack.com/methods/auth.test"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_bots_info": {
      "provider_intent": "get_bots_info",
      "provider_alias_intent": "/bots.info",
      "text": "Gets information about a bot user.",
      "category": "Bots",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "bot": {
          "type": "string",
          "text": "Bot user to get info on"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a bot user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/bots.info",
        "alias_endpoint": "/slack/bots.info",
        "api_ref": "https://api.slack.com/methods/bots.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_calls_add": {
      "provider_intent": "post_calls_add",
      "provider_alias_intent": "/calls.add",
      "text": "Registers a new Call.",
      "category": "Calls",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "external_unique_id": {
          "type": "string",
          "text": "An ID supplied by the 3rd-party Call provider",
          "required": true
        },
        "external_display_id": {
          "type": "string",
          "text": "An optional human-readable ID supplied by the 3rd-party Call provider"
        },
        "join_url": {
          "type": "string",
          "text": "The URL required for a client to join the Call",
          "required": true
        },
        "desktop_app_join_url": {
          "type": "string",
          "text": "When supplied available Slack clients will attempt to directly launch the 3rd-party Call with this URL"
        },
        "date_start": {
          "type": "integer",
          "text": "Call start time in UTC UNIX timestamp format"
        },
        "title": {
          "type": "string",
          "text": "The name of the Call"
        },
        "created_by": {
          "type": "string",
          "text": "The valid Slack user ID of the user who created this Call"
        },
        "users": {
          "type": "string",
          "text": "The list of users to register as participants in the Call"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Registers a new Call.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/calls.add",
        "alias_endpoint": "/slack/calls.add",
        "api_ref": "https://api.slack.com/methods/calls.add"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_calls_end": {
      "provider_intent": "post_calls_end",
      "provider_alias_intent": "/calls.end",
      "text": "Ends a Call.",
      "category": "Calls",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "id": {
          "type": "string",
          "text": "`id` returned when registering the call using the [`calls",
          "required": true
        },
        "duration": {
          "type": "integer",
          "text": "Call duration in seconds"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Ends a Call.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/calls.end",
        "alias_endpoint": "/slack/calls.end",
        "api_ref": "https://api.slack.com/methods/calls.end"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_calls_info": {
      "provider_intent": "get_calls_info",
      "provider_alias_intent": "/calls.info",
      "text": "Returns information about a Call.",
      "category": "Calls",
      "method": "GET",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "`id` of the Call returned by the [`calls",
          "required": true
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns information about a Call.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/calls.info",
        "alias_endpoint": "/slack/calls.info",
        "api_ref": "https://api.slack.com/methods/calls.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_calls_update": {
      "provider_intent": "post_calls_update",
      "provider_alias_intent": "/calls.update",
      "text": "Updates information about a Call.",
      "category": "Calls",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "id": {
          "type": "string",
          "text": "`id` returned by the [`calls",
          "required": true
        },
        "title": {
          "type": "string",
          "text": "The name of the Call"
        },
        "join_url": {
          "type": "string",
          "text": "The URL required for a client to join the Call"
        },
        "desktop_app_join_url": {
          "type": "string",
          "text": "When supplied available Slack clients will attempt to directly launch the 3rd-party Call with this URL"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates information about a Call.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/calls.update",
        "alias_endpoint": "/slack/calls.update",
        "api_ref": "https://api.slack.com/methods/calls.update"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_calls_participants_add": {
      "provider_intent": "post_calls_participants_add",
      "provider_alias_intent": "/calls.participants.add",
      "text": "Registers new participants added to a Call.",
      "category": "Calls Participants",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "id": {
          "type": "string",
          "text": "`id` returned by the [`calls",
          "required": true
        },
        "users": {
          "type": "string",
          "text": "The list of users to add as participants in the Call",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Registers new participants added to a Call.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/calls.participants.add",
        "alias_endpoint": "/slack/calls.participants.add",
        "api_ref": "https://api.slack.com/methods/calls.participants.add"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_calls_participants_remove": {
      "provider_intent": "post_calls_participants_remove",
      "provider_alias_intent": "/calls.participants.remove",
      "text": "Registers participants removed from a Call.",
      "category": "Calls Participants",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "id": {
          "type": "string",
          "text": "`id` returned by the [`calls",
          "required": true
        },
        "users": {
          "type": "string",
          "text": "The list of users to remove as participants in the Call",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Registers participants removed from a Call.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/calls.participants.remove",
        "alias_endpoint": "/slack/calls.participants.remove",
        "api_ref": "https://api.slack.com/methods/calls.participants.remove"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_chat_delete": {
      "provider_intent": "post_chat_delete",
      "provider_alias_intent": "/chat.delete",
      "text": "Deletes a message.",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "ts": {
          "type": "number",
          "text": "Timestamp of the message to be deleted"
        },
        "channel": {
          "type": "string",
          "text": "Channel containing the message to be deleted"
        },
        "as_user": {
          "type": "boolean",
          "text": "Pass true to delete the message as the authed user with `chat",
          "enum": [
            "write"
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a message.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.delete",
        "alias_endpoint": "/slack/chat.delete",
        "api_ref": "https://api.slack.com/methods/chat.delete"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_chat_deletescheduledmessage": {
      "provider_intent": "post_chat_deletescheduledmessage",
      "provider_alias_intent": "/chat.deletescheduledmessage",
      "text": "Deletes a pending scheduled message from the queue.",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "as_user": {
          "type": "boolean",
          "text": "Pass true to delete the message as the authed user with `chat",
          "enum": [
            "write"
          ]
        },
        "channel": {
          "type": "string",
          "text": "The channel the scheduled_message is posting to",
          "required": true
        },
        "scheduled_message_id": {
          "type": "string",
          "text": "`scheduled_message_id` returned from call to chat",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a pending scheduled message from the queue.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.deleteScheduledMessage",
        "alias_endpoint": "/slack/chat.deletescheduledmessage",
        "api_ref": "https://api.slack.com/methods/chat.deleteScheduledMessage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_chat_getpermalink": {
      "provider_intent": "get_chat_getpermalink",
      "provider_alias_intent": "/chat.getpermalink",
      "text": "Retrieve a permalink URL for a specific extant message",
      "category": "Chat",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "channel": {
          "type": "string",
          "text": "The ID of the conversation or channel containing the message",
          "required": true
        },
        "message_ts": {
          "type": "string",
          "text": "A message's `ts` value uniquely identifying it within a channel",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieve a permalink URL for a specific extant message.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.getPermalink",
        "alias_endpoint": "/slack/chat.getpermalink",
        "api_ref": "https://api.slack.com/methods/chat.getPermalink"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_chat_memessage": {
      "provider_intent": "post_chat_memessage",
      "provider_alias_intent": "/chat.memessage",
      "text": "Share a me message into a channel.",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel to send message to"
        },
        "text": {
          "type": "string",
          "text": "Text of the message to send"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Share a me message into a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.meMessage",
        "alias_endpoint": "/slack/chat.memessage",
        "api_ref": "https://api.slack.com/methods/chat.meMessage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_chat_postephemeral": {
      "provider_intent": "post_chat_postephemeral",
      "provider_alias_intent": "/chat.postephemeral",
      "text": "Sends an ephemeral message to a user in a channel.",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "as_user": {
          "type": "boolean",
          "text": "Pass true to post the message as the authed user",
          "enum": [
            true,
            false
          ]
        },
        "attachments": {
          "type": "string",
          "text": "A JSON-based array of structured attachments presented as a URL-encoded string"
        },
        "blocks": {
          "type": "string",
          "text": "A JSON-based array of structured blocks presented as a URL-encoded string"
        },
        "channel": {
          "type": "string",
          "text": "Channel private group or IM channel to send message to",
          "required": true
        },
        "icon_emoji": {
          "type": "string",
          "text": "Emoji to use as the icon for this message"
        },
        "icon_url": {
          "type": "string",
          "text": "URL to an image to use as the icon for this message"
        },
        "link_names": {
          "type": "boolean",
          "text": "Find and link channel names and usernames",
          "enum": [
            true,
            false
          ]
        },
        "parse": {
          "type": "string",
          "text": "Change how messages are treated"
        },
        "text": {
          "type": "string",
          "text": "How this field works and whether it is required depends on other fields you use in your API call"
        },
        "thread_ts": {
          "type": "string",
          "text": "Provide another message's `ts` value to post this message in a thread"
        },
        "user": {
          "type": "string",
          "text": "`id` of the user who will receive the ephemeral message",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "Set your bot's user name"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sends an ephemeral message to a user in a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.postEphemeral",
        "alias_endpoint": "/slack/chat.postephemeral",
        "api_ref": "https://api.slack.com/methods/chat.postEphemeral"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_chat_postmessage": {
      "provider_intent": "post_chat_postmessage",
      "provider_alias_intent": "/chat.postmessage",
      "text": "Sends a message to a channel.",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "as_user": {
          "type": "string",
          "text": "Pass true to post the message as the authed user instead of as a bot"
        },
        "attachments": {
          "type": "string",
          "text": "A JSON-based array of structured attachments presented as a URL-encoded string"
        },
        "blocks": {
          "type": "string",
          "text": "A JSON-based array of structured blocks presented as a URL-encoded string"
        },
        "channel": {
          "type": "string",
          "text": "Channel private group or IM channel to send message to",
          "required": true
        },
        "icon_emoji": {
          "type": "string",
          "text": "Emoji to use as the icon for this message"
        },
        "icon_url": {
          "type": "string",
          "text": "URL to an image to use as the icon for this message"
        },
        "link_names": {
          "type": "boolean",
          "text": "Find and link channel names and usernames",
          "enum": [
            true,
            false
          ]
        },
        "mrkdwn": {
          "type": "boolean",
          "text": "Disable Slack markup parsing by setting to `false`",
          "enum": [
            true,
            false
          ]
        },
        "parse": {
          "type": "string",
          "text": "Change how messages are treated"
        },
        "reply_broadcast": {
          "type": "boolean",
          "text": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation",
          "enum": [
            true,
            false
          ]
        },
        "text": {
          "type": "string",
          "text": "How this field works and whether it is required depends on other fields you use in your API call"
        },
        "thread_ts": {
          "type": "string",
          "text": "Provide another message's `ts` value to make this message a reply"
        },
        "unfurl_links": {
          "type": "boolean",
          "text": "Pass true to enable unfurling of primarily text-based content",
          "enum": [
            true,
            false
          ]
        },
        "unfurl_media": {
          "type": "boolean",
          "text": "Pass false to disable unfurling of media content",
          "enum": [
            true,
            false
          ]
        },
        "username": {
          "type": "string",
          "text": "Set your bot's user name"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sends a message to a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.postMessage",
        "alias_endpoint": "/slack/chat.postmessage",
        "api_ref": "https://api.slack.com/methods/chat.postMessage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_chat_schedulemessage": {
      "provider_intent": "post_chat_schedulemessage",
      "provider_alias_intent": "/chat.schedulemessage",
      "text": "Schedules a message to be sent to a channel.",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel private group or DM channel to send message to"
        },
        "text": {
          "type": "string",
          "text": "How this field works and whether it is required depends on other fields you use in your API call"
        },
        "post_at": {
          "type": "string",
          "text": "Unix EPOCH timestamp of time in future to send the message"
        },
        "parse": {
          "type": "string",
          "text": "Change how messages are treated"
        },
        "as_user": {
          "type": "boolean",
          "text": "Pass true to post the message as the authed user instead of as a bot",
          "enum": [
            true,
            false
          ]
        },
        "link_names": {
          "type": "boolean",
          "text": "Find and link channel names and usernames",
          "enum": [
            true,
            false
          ]
        },
        "attachments": {
          "type": "string",
          "text": "A JSON-based array of structured attachments presented as a URL-encoded string"
        },
        "blocks": {
          "type": "string",
          "text": "A JSON-based array of structured blocks presented as a URL-encoded string"
        },
        "unfurl_links": {
          "type": "boolean",
          "text": "Pass true to enable unfurling of primarily text-based content",
          "enum": [
            true,
            false
          ]
        },
        "unfurl_media": {
          "type": "boolean",
          "text": "Pass false to disable unfurling of media content",
          "enum": [
            true,
            false
          ]
        },
        "thread_ts": {
          "type": "number",
          "text": "Provide another message's `ts` value to make this message a reply"
        },
        "reply_broadcast": {
          "type": "boolean",
          "text": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Schedules a message to be sent to a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.scheduleMessage",
        "alias_endpoint": "/slack/chat.schedulemessage",
        "api_ref": "https://api.slack.com/methods/chat.scheduleMessage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_chat_unfurl": {
      "provider_intent": "post_chat_unfurl",
      "provider_alias_intent": "/chat.unfurl",
      "text": "Provide custom unfurl behavior for user-posted URLs",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel ID of the message",
          "required": true
        },
        "ts": {
          "type": "string",
          "text": "Timestamp of the message to add unfurl behavior to",
          "required": true
        },
        "unfurls": {
          "type": "string",
          "text": "URL-encoded JSON map with keys set to URLs featured in the the message pointing to their unfurl blocks or message attachments"
        },
        "user_auth_message": {
          "type": "string",
          "text": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"
        },
        "user_auth_required": {
          "type": "boolean",
          "text": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain",
          "enum": [
            true,
            false
          ]
        },
        "user_auth_url": {
          "type": "string",
          "text": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Provide custom unfurl behavior for user-posted URLs.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.unfurl",
        "alias_endpoint": "/slack/chat.unfurl",
        "api_ref": "https://api.slack.com/methods/chat.unfurl"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_chat_update": {
      "provider_intent": "post_chat_update",
      "provider_alias_intent": "/chat.update",
      "text": "Updates a message.",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "as_user": {
          "type": "string",
          "text": "Pass true to update the message as the authed user"
        },
        "attachments": {
          "type": "string",
          "text": "A JSON-based array of structured attachments presented as a URL-encoded string"
        },
        "blocks": {
          "type": "string",
          "text": "A JSON-based array of [structured blocks](/block-kit/building) presented as a URL-encoded string"
        },
        "channel": {
          "type": "string",
          "text": "Channel containing the message to be updated",
          "required": true
        },
        "link_names": {
          "type": "string",
          "text": "Find and link channel names and usernames"
        },
        "parse": {
          "type": "string",
          "text": "Change how messages are treated"
        },
        "text": {
          "type": "string",
          "text": "New text for the message using the [default formatting rules](/reference/surfaces/formatting)"
        },
        "ts": {
          "type": "string",
          "text": "Timestamp of the message to be updated",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates a message.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.update",
        "alias_endpoint": "/slack/chat.update",
        "api_ref": "https://api.slack.com/methods/chat.update"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_chat_scheduledmessages_list": {
      "provider_intent": "get_chat_scheduledmessages_list",
      "provider_alias_intent": "/chat.scheduledmessages.list",
      "text": "Returns a list of scheduled messages.",
      "category": "Chat ScheduledMessages",
      "method": "GET",
      "type": "API",
      "params": {
        "channel": {
          "type": "string",
          "text": "The channel of the scheduled messages"
        },
        "latest": {
          "type": "number",
          "text": "A UNIX timestamp of the latest value in the time range"
        },
        "oldest": {
          "type": "number",
          "text": "A UNIX timestamp of the oldest value in the time range"
        },
        "limit": {
          "type": "integer",
          "text": "Maximum number of original entries to return"
        },
        "cursor": {
          "type": "string",
          "text": "For pagination purposes this is the `cursor` value returned from a previous call to `chat"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a list of scheduled messages.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/chat.scheduledMessages.list",
        "alias_endpoint": "/slack/chat.scheduledmessages.list",
        "api_ref": "https://api.slack.com/methods/chat.scheduledMessages.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_archive": {
      "provider_intent": "post_conversations_archive",
      "provider_alias_intent": "/conversations.archive",
      "text": "Archives a conversation.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "ID of conversation to archive"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Archives a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.archive",
        "alias_endpoint": "/slack/conversations.archive",
        "api_ref": "https://api.slack.com/methods/conversations.archive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_close": {
      "provider_intent": "post_conversations_close",
      "provider_alias_intent": "/conversations.close",
      "text": "Closes a direct message or multi-person direct message.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Conversation to close"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Closes a direct message or multi-person direct message.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.close",
        "alias_endpoint": "/slack/conversations.close",
        "api_ref": "https://api.slack.com/methods/conversations.close"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_create": {
      "provider_intent": "post_conversations_create",
      "provider_alias_intent": "/conversations.create",
      "text": "Initiates a public or private channel-based conversation",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "name": {
          "type": "string",
          "text": "Name of the public or private channel to create"
        },
        "is_private": {
          "type": "boolean",
          "text": "Create a private channel instead of a public one",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Initiates a public or private channel-based conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.create",
        "alias_endpoint": "/slack/conversations.create",
        "api_ref": "https://api.slack.com/methods/conversations.create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_conversations_history": {
      "provider_intent": "get_conversations_history",
      "provider_alias_intent": "/conversations.history",
      "text": "Fetches a conversation's history of messages and events.",
      "category": "Conversations",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "channel": {
          "type": "string",
          "text": "Conversation ID to fetch history for"
        },
        "latest": {
          "type": "number",
          "text": "End of time range of messages to include in results"
        },
        "oldest": {
          "type": "number",
          "text": "Start of time range of messages to include in results"
        },
        "inclusive": {
          "type": "boolean",
          "text": "Include messages with latest or oldest timestamp in results only when either timestamp is specified",
          "enum": [
            true,
            false
          ]
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Fetches a conversation's history of messages and events.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.history",
        "alias_endpoint": "/slack/conversations.history",
        "api_ref": "https://api.slack.com/methods/conversations.history"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_conversations_info": {
      "provider_intent": "get_conversations_info",
      "provider_alias_intent": "/conversations.info",
      "text": "Retrieve information about a conversation.",
      "category": "Conversations",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "channel": {
          "type": "string",
          "text": "Conversation ID to learn more about"
        },
        "include_locale": {
          "type": "boolean",
          "text": "Set this to `true` to receive the locale for this conversation",
          "enum": [
            true,
            false
          ]
        },
        "include_num_members": {
          "type": "boolean",
          "text": "Set to `true` to include the member count for the specified conversation",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieve information about a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.info",
        "alias_endpoint": "/slack/conversations.info",
        "api_ref": "https://api.slack.com/methods/conversations.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_invite": {
      "provider_intent": "post_conversations_invite",
      "provider_alias_intent": "/conversations.invite",
      "text": "Invites users to a channel.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "The ID of the public or private channel to invite user(s) to"
        },
        "users": {
          "type": "string",
          "text": "A comma separated list of user IDs"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Invites users to a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.invite",
        "alias_endpoint": "/slack/conversations.invite",
        "api_ref": "https://api.slack.com/methods/conversations.invite"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_join": {
      "provider_intent": "post_conversations_join",
      "provider_alias_intent": "/conversations.join",
      "text": "Joins an existing conversation.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "ID of conversation to join"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Joins an existing conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.join",
        "alias_endpoint": "/slack/conversations.join",
        "api_ref": "https://api.slack.com/methods/conversations.join"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_kick": {
      "provider_intent": "post_conversations_kick",
      "provider_alias_intent": "/conversations.kick",
      "text": "Removes a user from a conversation.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "ID of conversation to remove user from"
        },
        "user": {
          "type": "string",
          "text": "User ID to be removed"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a user from a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.kick",
        "alias_endpoint": "/slack/conversations.kick",
        "api_ref": "https://api.slack.com/methods/conversations.kick"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_leave": {
      "provider_intent": "post_conversations_leave",
      "provider_alias_intent": "/conversations.leave",
      "text": "Leaves a conversation.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Conversation to leave"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Leaves a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.leave",
        "alias_endpoint": "/slack/conversations.leave",
        "api_ref": "https://api.slack.com/methods/conversations.leave"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_conversations_list": {
      "provider_intent": "get_conversations_list",
      "provider_alias_intent": "/conversations.list",
      "text": "Lists all channels in a Slack team.",
      "category": "Conversations",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "exclude_archived": {
          "type": "boolean",
          "text": "Set to `true` to exclude archived channels from the list",
          "enum": [
            true,
            false
          ]
        },
        "types": {
          "type": "string",
          "text": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel` `private_channel` `mpim` `im`"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all channels in a Slack team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.list",
        "alias_endpoint": "/slack/conversations.list",
        "api_ref": "https://api.slack.com/methods/conversations.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_mark": {
      "provider_intent": "post_conversations_mark",
      "provider_alias_intent": "/conversations.mark",
      "text": "Sets the read cursor in a channel.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel or conversation to set the read cursor for"
        },
        "ts": {
          "type": "number",
          "text": "Unique identifier of message you want marked as most recently seen in this conversation"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the read cursor in a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.mark",
        "alias_endpoint": "/slack/conversations.mark",
        "api_ref": "https://api.slack.com/methods/conversations.mark"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_conversations_members": {
      "provider_intent": "get_conversations_members",
      "provider_alias_intent": "/conversations.members",
      "text": "Retrieve members of a conversation.",
      "category": "Conversations",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "channel": {
          "type": "string",
          "text": "ID of the conversation to retrieve members for"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieve members of a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.members",
        "alias_endpoint": "/slack/conversations.members",
        "api_ref": "https://api.slack.com/methods/conversations.members"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_open": {
      "provider_intent": "post_conversations_open",
      "provider_alias_intent": "/conversations.open",
      "text": "Opens or resumes a direct message or multi-person direct message.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Resume a conversation by supplying an `im` or `mpim`'s ID"
        },
        "users": {
          "type": "string",
          "text": "Comma separated lists of users"
        },
        "return_im": {
          "type": "boolean",
          "text": "Boolean indicates you want the full IM channel definition in the response",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Opens or resumes a direct message or multi-person direct message.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.open",
        "alias_endpoint": "/slack/conversations.open",
        "api_ref": "https://api.slack.com/methods/conversations.open"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_rename": {
      "provider_intent": "post_conversations_rename",
      "provider_alias_intent": "/conversations.rename",
      "text": "Renames a conversation.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "ID of conversation to rename"
        },
        "name": {
          "type": "string",
          "text": "New name for conversation"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Renames a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.rename",
        "alias_endpoint": "/slack/conversations.rename",
        "api_ref": "https://api.slack.com/methods/conversations.rename"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_conversations_replies": {
      "provider_intent": "get_conversations_replies",
      "provider_alias_intent": "/conversations.replies",
      "text": "Retrieve a thread of messages posted to a conversation",
      "category": "Conversations",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "channel": {
          "type": "string",
          "text": "Conversation ID to fetch thread from"
        },
        "ts": {
          "type": "number",
          "text": "Unique identifier of a thread's parent message"
        },
        "latest": {
          "type": "number",
          "text": "End of time range of messages to include in results"
        },
        "oldest": {
          "type": "number",
          "text": "Start of time range of messages to include in results"
        },
        "inclusive": {
          "type": "boolean",
          "text": "Include messages with latest or oldest timestamp in results only when either timestamp is specified",
          "enum": [
            true,
            false
          ]
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieve a thread of messages posted to a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.replies",
        "alias_endpoint": "/slack/conversations.replies",
        "api_ref": "https://api.slack.com/methods/conversations.replies"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_setpurpose": {
      "provider_intent": "post_conversations_setpurpose",
      "provider_alias_intent": "/conversations.setpurpose",
      "text": "Sets the purpose for a conversation.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Conversation to set the purpose of"
        },
        "purpose": {
          "type": "string",
          "text": "A new specialer purpose"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the purpose for a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.setPurpose",
        "alias_endpoint": "/slack/conversations.setpurpose",
        "api_ref": "https://api.slack.com/methods/conversations.setPurpose"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_settopic": {
      "provider_intent": "post_conversations_settopic",
      "provider_alias_intent": "/conversations.settopic",
      "text": "Sets the topic for a conversation.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Conversation to set the topic of"
        },
        "topic": {
          "type": "string",
          "text": "The new topic string"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the topic for a conversation.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.setTopic",
        "alias_endpoint": "/slack/conversations.settopic",
        "api_ref": "https://api.slack.com/methods/conversations.setTopic"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_conversations_unarchive": {
      "provider_intent": "post_conversations_unarchive",
      "provider_alias_intent": "/conversations.unarchive",
      "text": "Reverses conversation archival.",
      "category": "Conversations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "ID of conversation to unarchive"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Reverses conversation archival.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/conversations.unarchive",
        "alias_endpoint": "/slack/conversations.unarchive",
        "api_ref": "https://api.slack.com/methods/conversations.unarchive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_dialog_open": {
      "provider_intent": "get_dialog_open",
      "provider_alias_intent": "/dialog.open",
      "text": "Open a dialog with a user",
      "category": "Dialog",
      "method": "GET",
      "type": "API",
      "params": {
        "dialog": {
          "type": "string",
          "text": "The dialog definition",
          "required": true
        },
        "trigger_id": {
          "type": "string",
          "text": "Exchange a trigger to post to the user",
          "required": true
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Open a dialog with a user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/dialog.open",
        "alias_endpoint": "/slack/dialog.open",
        "api_ref": "https://api.slack.com/methods/dialog.open"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_dnd_enddnd": {
      "provider_intent": "post_dnd_enddnd",
      "provider_alias_intent": "/dnd.enddnd",
      "text": "Ends the current user's Do Not Disturb session immediately.",
      "category": "Dnd",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Ends the current user's Do Not Disturb session immediately.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/dnd.endDnd",
        "alias_endpoint": "/slack/dnd.enddnd",
        "api_ref": "https://api.slack.com/methods/dnd.endDnd"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_dnd_endsnooze": {
      "provider_intent": "post_dnd_endsnooze",
      "provider_alias_intent": "/dnd.endsnooze",
      "text": "Ends the current user's snooze mode immediately.",
      "category": "Dnd",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Ends the current user's snooze mode immediately.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/dnd.endSnooze",
        "alias_endpoint": "/slack/dnd.endsnooze",
        "api_ref": "https://api.slack.com/methods/dnd.endSnooze"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_dnd_info": {
      "provider_intent": "get_dnd_info",
      "provider_alias_intent": "/dnd.info",
      "text": "Retrieves a user's current Do Not Disturb status.",
      "category": "Dnd",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "user": {
          "type": "string",
          "text": "User to fetch status for (defaults to current user)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieves a user's current Do Not Disturb status.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/dnd.info",
        "alias_endpoint": "/slack/dnd.info",
        "api_ref": "https://api.slack.com/methods/dnd.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_dnd_setsnooze": {
      "provider_intent": "post_dnd_setsnooze",
      "provider_alias_intent": "/dnd.setsnooze",
      "text": "Turns on Do Not Disturb mode for the current user or changes its duration.",
      "category": "Dnd",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "num_minutes": {
          "type": "string",
          "text": "Number of minutes from now to snooze until",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Turns on Do Not Disturb mode for the current user or changes its duration.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/dnd.setSnooze",
        "alias_endpoint": "/slack/dnd.setsnooze",
        "api_ref": "https://api.slack.com/methods/dnd.setSnooze"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_dnd_teaminfo": {
      "provider_intent": "get_dnd_teaminfo",
      "provider_alias_intent": "/dnd.teaminfo",
      "text": "Retrieves the Do Not Disturb status for up to 50 users on a team.",
      "category": "Dnd",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "users": {
          "type": "string",
          "text": "Comma-separated list of users to fetch Do Not Disturb status for"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieves the Do Not Disturb status for up to 50 users on a team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/dnd.teamInfo",
        "alias_endpoint": "/slack/dnd.teaminfo",
        "api_ref": "https://api.slack.com/methods/dnd.teamInfo"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_emoji_list": {
      "provider_intent": "get_emoji_list",
      "provider_alias_intent": "/emoji.list",
      "text": "Lists custom emoji for a team.",
      "category": "Emoji",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists custom emoji for a team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/emoji.list",
        "alias_endpoint": "/slack/emoji.list",
        "api_ref": "https://api.slack.com/methods/emoji.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_files_delete": {
      "provider_intent": "post_files_delete",
      "provider_alias_intent": "/files.delete",
      "text": "Deletes a file.",
      "category": "Files",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "file": {
          "type": "string",
          "text": "ID of file to delete"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a file.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.delete",
        "alias_endpoint": "/slack/files.delete",
        "api_ref": "https://api.slack.com/methods/files.delete"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_files_info": {
      "provider_intent": "get_files_info",
      "provider_alias_intent": "/files.info",
      "text": "Gets information about a file.",
      "category": "Files",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "file": {
          "type": "string",
          "text": "Specify a file by providing its ID"
        },
        "count": {
          "type": "string"
        },
        "page": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Parameter for pagination"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a file.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.info",
        "alias_endpoint": "/slack/files.info",
        "api_ref": "https://api.slack.com/methods/files.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_files_list": {
      "provider_intent": "get_files_list",
      "provider_alias_intent": "/files.list",
      "text": "List for a team in a channel or from a user with applied filters.",
      "category": "Files",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "user": {
          "type": "string",
          "text": "Filter files created by a single user"
        },
        "channel": {
          "type": "string",
          "text": "Filter files appearing in a specific channel indicated by its ID"
        },
        "ts_from": {
          "type": "number",
          "text": "Filter files created after this timestamp (inclusive)"
        },
        "ts_to": {
          "type": "number",
          "text": "Filter files created before this timestamp (inclusive)"
        },
        "types": {
          "type": "string",
          "text": "Filter files by type ([see below](#file_types))"
        },
        "count": {
          "type": "string"
        },
        "page": {
          "type": "string"
        },
        "show_files_hidden_by_limit": {
          "type": "boolean",
          "text": "Show truncated file info for files hidden due to being too old and the team who owns the file being over the file limit",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List for a team in a channel or from a user with applied filters.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.list",
        "alias_endpoint": "/slack/files.list",
        "api_ref": "https://api.slack.com/methods/files.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_files_revokepublicurl": {
      "provider_intent": "post_files_revokepublicurl",
      "provider_alias_intent": "/files.revokepublicurl",
      "text": "Revokes public/external sharing access for a file",
      "category": "Files",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "file": {
          "type": "string",
          "text": "File to revoke"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Revokes public/external sharing access for a file.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.revokePublicURL",
        "alias_endpoint": "/slack/files.revokepublicurl",
        "api_ref": "https://api.slack.com/methods/files.revokePublicURL"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_files_sharedpublicurl": {
      "provider_intent": "post_files_sharedpublicurl",
      "provider_alias_intent": "/files.sharedpublicurl",
      "text": "Enables a file for public/external sharing.",
      "category": "Files",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "file": {
          "type": "string",
          "text": "File to share"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables a file for public/external sharing.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.sharedPublicURL",
        "alias_endpoint": "/slack/files.sharedpublicurl",
        "api_ref": "https://api.slack.com/methods/files.sharedPublicURL"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_files_upload": {
      "provider_intent": "post_files_upload",
      "provider_alias_intent": "/files.upload",
      "text": "Uploads or creates a file.",
      "category": "Files",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "file": {
          "type": "string",
          "text": "File contents via `multipart/form-data`"
        },
        "content": {
          "type": "string",
          "text": "File contents via a POST variable"
        },
        "filetype": {
          "type": "string",
          "text": "A [file type](/types/file#file_types) identifier"
        },
        "filename": {
          "type": "string",
          "text": "Filename of file"
        },
        "title": {
          "type": "string",
          "text": "Title of file"
        },
        "initial_comment": {
          "type": "string",
          "text": "The message text introducing the file in specified `channels`"
        },
        "channels": {
          "type": "string",
          "text": "Comma-separated list of channel names or IDs where the file will be shared"
        },
        "thread_ts": {
          "type": "number",
          "text": "Provide another message's `ts` value to upload this file as a reply"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Uploads or creates a file.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.upload",
        "alias_endpoint": "/slack/files.upload",
        "api_ref": "https://api.slack.com/methods/files.upload"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_files_comments_delete": {
      "provider_intent": "post_files_comments_delete",
      "provider_alias_intent": "/files.comments.delete",
      "text": "Deletes an existing comment on a file.",
      "category": "Files Comments",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "file": {
          "type": "string",
          "text": "File to delete a comment from"
        },
        "id": {
          "type": "string",
          "text": "The comment to delete"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an existing comment on a file.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.comments.delete",
        "alias_endpoint": "/slack/files.comments.delete",
        "api_ref": "https://api.slack.com/methods/files.comments.delete"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_files_remote_add": {
      "provider_intent": "post_files_remote_add",
      "provider_alias_intent": "/files.remote.add",
      "text": "Adds a file from a remote service",
      "category": "Files Remote",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "external_id": {
          "type": "string",
          "text": "Creator defined GUID for the file"
        },
        "title": {
          "type": "string",
          "text": "Title of the file being shared"
        },
        "filetype": {
          "type": "string",
          "text": "type of file"
        },
        "external_url": {
          "type": "string",
          "text": "URL of the remote file"
        },
        "preview_image": {
          "type": "string",
          "text": "Preview of the document via `multipart/form-data`"
        },
        "indexable_file_contents": {
          "type": "string",
          "text": "A text file (txt pdf doc etc"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a file from a remote service.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.remote.add",
        "alias_endpoint": "/slack/files.remote.add",
        "api_ref": "https://api.slack.com/methods/files.remote.add"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_files_remote_info": {
      "provider_intent": "get_files_remote_info",
      "provider_alias_intent": "/files.remote.info",
      "text": "Retrieve information about a remote file added to Slack",
      "category": "Files Remote",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "file": {
          "type": "string",
          "text": "Specify a file by providing its ID"
        },
        "external_id": {
          "type": "string",
          "text": "Creator defined GUID for the file"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieve information about a remote file added to Slack.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.remote.info",
        "alias_endpoint": "/slack/files.remote.info",
        "api_ref": "https://api.slack.com/methods/files.remote.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_files_remote_list": {
      "provider_intent": "get_files_remote_list",
      "provider_alias_intent": "/files.remote.list",
      "text": "Retrieve information about a remote file added to Slack",
      "category": "Files Remote",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "channel": {
          "type": "string",
          "text": "Filter files appearing in a specific channel indicated by its ID"
        },
        "ts_from": {
          "type": "number",
          "text": "Filter files created after this timestamp (inclusive)"
        },
        "ts_to": {
          "type": "number",
          "text": "Filter files created before this timestamp (inclusive)"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieve information about a remote file added to Slack.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.remote.list",
        "alias_endpoint": "/slack/files.remote.list",
        "api_ref": "https://api.slack.com/methods/files.remote.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_files_remote_remove": {
      "provider_intent": "post_files_remote_remove",
      "provider_alias_intent": "/files.remote.remove",
      "text": "Remove a remote file.",
      "category": "Files Remote",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "file": {
          "type": "string",
          "text": "Specify a file by providing its ID"
        },
        "external_id": {
          "type": "string",
          "text": "Creator defined GUID for the file"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove a remote file.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.remote.remove",
        "alias_endpoint": "/slack/files.remote.remove",
        "api_ref": "https://api.slack.com/methods/files.remote.remove"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_files_remote_share": {
      "provider_intent": "get_files_remote_share",
      "provider_alias_intent": "/files.remote.share",
      "text": "Share a remote file into a channel.",
      "category": "Files Remote",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "file": {
          "type": "string",
          "text": "Specify a file registered with Slack by providing its ID"
        },
        "external_id": {
          "type": "string",
          "text": "The globally unique identifier (GUID) for the file as set by the app registering the file with Slack"
        },
        "channels": {
          "type": "string",
          "text": "Comma-separated list of channel IDs where the file will be shared"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Share a remote file into a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.remote.share",
        "alias_endpoint": "/slack/files.remote.share",
        "api_ref": "https://api.slack.com/methods/files.remote.share"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_files_remote_update": {
      "provider_intent": "post_files_remote_update",
      "provider_alias_intent": "/files.remote.update",
      "text": "Updates an existing remote file.",
      "category": "Files Remote",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "file": {
          "type": "string",
          "text": "Specify a file by providing its ID"
        },
        "external_id": {
          "type": "string",
          "text": "Creator defined GUID for the file"
        },
        "title": {
          "type": "string",
          "text": "Title of the file being shared"
        },
        "filetype": {
          "type": "string",
          "text": "type of file"
        },
        "external_url": {
          "type": "string",
          "text": "URL of the remote file"
        },
        "preview_image": {
          "type": "string",
          "text": "Preview of the document via `multipart/form-data`"
        },
        "indexable_file_contents": {
          "type": "string",
          "text": "File containing contents that can be used to improve searchability for the remote file"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates an existing remote file.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/files.remote.update",
        "alias_endpoint": "/slack/files.remote.update",
        "api_ref": "https://api.slack.com/methods/files.remote.update"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_migration_exchange": {
      "provider_intent": "get_migration_exchange",
      "provider_alias_intent": "/migration.exchange",
      "text": "For Enterprise Grid workspaces map local user IDs to global user IDs",
      "category": "Migration",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "users": {
          "type": "string",
          "text": "A comma-separated list of user ids up to 400 per request",
          "required": true
        },
        "team_id": {
          "type": "string",
          "text": "Specify team_id starts with `T` in case of Org Token"
        },
        "to_old": {
          "type": "boolean",
          "text": "Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "For Enterprise Grid workspaces map local user IDs to global user IDs.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/migration.exchange",
        "alias_endpoint": "/slack/migration.exchange",
        "api_ref": "https://api.slack.com/methods/migration.exchange"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_oauth_access": {
      "provider_intent": "get_oauth_access",
      "provider_alias_intent": "/oauth.access",
      "text": "Exchanges a temporary OAuth verifier code for an access token.",
      "category": "Oauth",
      "method": "GET",
      "type": "API",
      "params": {
        "client_id": {
          "type": "string",
          "text": "Issued when you created your application"
        },
        "client_secret": {
          "type": "string",
          "text": "Issued when you created your application"
        },
        "code": {
          "type": "string",
          "text": "The `code` param returned via the OAuth callback"
        },
        "redirect_uri": {
          "type": "string",
          "text": "This must match the originally submitted URI (if one was sent)"
        },
        "single_channel": {
          "type": "boolean",
          "text": "Request the user to add your app only to a single channel",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Exchanges a temporary OAuth verifier code for an access token.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/oauth.access",
        "alias_endpoint": "/slack/oauth.access",
        "api_ref": "https://api.slack.com/methods/oauth.access"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_oauth_token": {
      "provider_intent": "get_oauth_token",
      "provider_alias_intent": "/oauth.token",
      "text": "Exchanges a temporary OAuth verifier code for a workspace token.",
      "category": "Oauth",
      "method": "GET",
      "type": "API",
      "params": {
        "client_id": {
          "type": "string",
          "text": "Issued when you created your application"
        },
        "client_secret": {
          "type": "string",
          "text": "Issued when you created your application"
        },
        "code": {
          "type": "string",
          "text": "The `code` param returned via the OAuth callback"
        },
        "redirect_uri": {
          "type": "string",
          "text": "This must match the originally submitted URI (if one was sent)"
        },
        "single_channel": {
          "type": "boolean",
          "text": "Request the user to add your app only to a single channel",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Exchanges a temporary OAuth verifier code for a workspace token.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/oauth.token",
        "alias_endpoint": "/slack/oauth.token",
        "api_ref": "https://api.slack.com/methods/oauth.token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_oauth_v2_access": {
      "provider_intent": "get_oauth_v2_access",
      "provider_alias_intent": "/oauth.v2.access",
      "text": "Exchanges a temporary OAuth verifier code for an access token.",
      "category": "Oauth V2",
      "method": "GET",
      "type": "API",
      "params": {
        "client_id": {
          "type": "string",
          "text": "Issued when you created your application"
        },
        "client_secret": {
          "type": "string",
          "text": "Issued when you created your application"
        },
        "code": {
          "type": "string",
          "text": "The `code` param returned via the OAuth callback",
          "required": true
        },
        "redirect_uri": {
          "type": "string",
          "text": "This must match the originally submitted URI (if one was sent)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Exchanges a temporary OAuth verifier code for an access token.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/oauth.v2.access",
        "alias_endpoint": "/slack/oauth.v2.access",
        "api_ref": "https://api.slack.com/methods/oauth.v2.access"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_pins_add": {
      "provider_intent": "post_pins_add",
      "provider_alias_intent": "/pins.add",
      "text": "Pins an item to a channel.",
      "category": "Pins",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel to pin the item in",
          "required": true
        },
        "timestamp": {
          "type": "string",
          "text": "Timestamp of the message to pin"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Pins an item to a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/pins.add",
        "alias_endpoint": "/slack/pins.add",
        "api_ref": "https://api.slack.com/methods/pins.add"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_pins_list": {
      "provider_intent": "get_pins_list",
      "provider_alias_intent": "/pins.list",
      "text": "Lists items pinned to a channel.",
      "category": "Pins",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "channel": {
          "type": "string",
          "text": "Channel to get pinned items for",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists items pinned to a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/pins.list",
        "alias_endpoint": "/slack/pins.list",
        "api_ref": "https://api.slack.com/methods/pins.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_pins_remove": {
      "provider_intent": "post_pins_remove",
      "provider_alias_intent": "/pins.remove",
      "text": "Un-pins an item from a channel.",
      "category": "Pins",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel where the item is pinned to",
          "required": true
        },
        "timestamp": {
          "type": "string",
          "text": "Timestamp of the message to un-pin"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Un-pins an item from a channel.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/pins.remove",
        "alias_endpoint": "/slack/pins.remove",
        "api_ref": "https://api.slack.com/methods/pins.remove"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_reactions_add": {
      "provider_intent": "post_reactions_add",
      "provider_alias_intent": "/reactions.add",
      "text": "Adds a reaction to an item.",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel where the message to add reaction to was posted",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "Reaction (emoji) name",
          "required": true
        },
        "timestamp": {
          "type": "string",
          "text": "Timestamp of the message to add reaction to",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a reaction to an item.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reactions.add",
        "alias_endpoint": "/slack/reactions.add",
        "api_ref": "https://api.slack.com/methods/reactions.add"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_reactions_get": {
      "provider_intent": "get_reactions_get",
      "provider_alias_intent": "/reactions.get",
      "text": "Gets reactions for an item.",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "channel": {
          "type": "string",
          "text": "Channel where the message to get reactions for was posted"
        },
        "file": {
          "type": "string",
          "text": "File to get reactions for"
        },
        "file_comment": {
          "type": "string",
          "text": "File comment to get reactions for"
        },
        "full": {
          "type": "boolean",
          "text": "If true always return the complete reaction list",
          "enum": [
            true,
            false
          ]
        },
        "timestamp": {
          "type": "string",
          "text": "Timestamp of the message to get reactions for"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets reactions for an item.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reactions.get",
        "alias_endpoint": "/slack/reactions.get",
        "api_ref": "https://api.slack.com/methods/reactions.get"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_reactions_list": {
      "provider_intent": "get_reactions_list",
      "provider_alias_intent": "/reactions.list",
      "text": "Lists reactions made by a user.",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "user": {
          "type": "string",
          "text": "Show reactions made by this user"
        },
        "full": {
          "type": "boolean",
          "text": "If true always return the complete reaction list",
          "enum": [
            true,
            false
          ]
        },
        "count": {
          "type": "integer"
        },
        "page": {
          "type": "integer"
        },
        "cursor": {
          "type": "string",
          "text": "Parameter for pagination"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists reactions made by a user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reactions.list",
        "alias_endpoint": "/slack/reactions.list",
        "api_ref": "https://api.slack.com/methods/reactions.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_reactions_remove": {
      "provider_intent": "post_reactions_remove",
      "provider_alias_intent": "/reactions.remove",
      "text": "Removes a reaction from an item.",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "name": {
          "type": "string",
          "text": "Reaction (emoji) name",
          "required": true
        },
        "file": {
          "type": "string",
          "text": "File to remove reaction from"
        },
        "file_comment": {
          "type": "string",
          "text": "File comment to remove reaction from"
        },
        "channel": {
          "type": "string",
          "text": "Channel where the message to remove reaction from was posted"
        },
        "timestamp": {
          "type": "string",
          "text": "Timestamp of the message to remove reaction from"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a reaction from an item.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reactions.remove",
        "alias_endpoint": "/slack/reactions.remove",
        "api_ref": "https://api.slack.com/methods/reactions.remove"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_reminders_add": {
      "provider_intent": "post_reminders_add",
      "provider_alias_intent": "/reminders.add",
      "text": "Creates a reminder.",
      "category": "Reminders",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "text": {
          "type": "string",
          "text": "The content of the reminder",
          "required": true
        },
        "time": {
          "type": "string",
          "text": "When this reminder should happen",
          "required": true,
          "enum": [
            "the Unix timestamp (up to five years from now) the number of seconds until the reminder (if within 24 hours) or a natural language description (Ex"
          ]
        },
        "user": {
          "type": "string",
          "text": "The user who will receive the reminder"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a reminder.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reminders.add",
        "alias_endpoint": "/slack/reminders.add",
        "api_ref": "https://api.slack.com/methods/reminders.add"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_reminders_complete": {
      "provider_intent": "post_reminders_complete",
      "provider_alias_intent": "/reminders.complete",
      "text": "Marks a reminder as complete.",
      "category": "Reminders",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "reminder": {
          "type": "string",
          "text": "The ID of the reminder to be marked as complete"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Marks a reminder as complete.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reminders.complete",
        "alias_endpoint": "/slack/reminders.complete",
        "api_ref": "https://api.slack.com/methods/reminders.complete"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_reminders_delete": {
      "provider_intent": "post_reminders_delete",
      "provider_alias_intent": "/reminders.delete",
      "text": "Deletes a reminder.",
      "category": "Reminders",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "body": {
        "reminder": {
          "type": "string",
          "text": "The ID of the reminder"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a reminder.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reminders.delete",
        "alias_endpoint": "/slack/reminders.delete",
        "api_ref": "https://api.slack.com/methods/reminders.delete"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_reminders_info": {
      "provider_intent": "get_reminders_info",
      "provider_alias_intent": "/reminders.info",
      "text": "Gets information about a reminder.",
      "category": "Reminders",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "reminder": {
          "type": "string",
          "text": "The ID of the reminder"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a reminder.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reminders.info",
        "alias_endpoint": "/slack/reminders.info",
        "api_ref": "https://api.slack.com/methods/reminders.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_reminders_list": {
      "provider_intent": "get_reminders_list",
      "provider_alias_intent": "/reminders.list",
      "text": "Lists all reminders created by or for a given user.",
      "category": "Reminders",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all reminders created by or for a given user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/reminders.list",
        "alias_endpoint": "/slack/reminders.list",
        "api_ref": "https://api.slack.com/methods/reminders.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_rtm_connect": {
      "provider_intent": "get_rtm_connect",
      "provider_alias_intent": "/rtm.connect",
      "text": "Starts a Real Time Messaging session.",
      "category": "Rtm",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "batch_presence_aware": {
          "type": "boolean",
          "text": "Batch presence deliveries via subscription",
          "enum": [
            true,
            false
          ]
        },
        "presence_sub": {
          "type": "boolean",
          "text": "Only deliver presence events when requested by subscription",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Starts a Real Time Messaging session.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/rtm.connect",
        "alias_endpoint": "/slack/rtm.connect",
        "api_ref": "https://api.slack.com/methods/rtm.connect"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_search_messages": {
      "provider_intent": "get_search_messages",
      "provider_alias_intent": "/search.messages",
      "text": "Searches for messages matching a query.",
      "category": "Search",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "count": {
          "type": "integer",
          "text": "Pass the number of results you want per \"page\""
        },
        "highlight": {
          "type": "boolean",
          "text": "Pass a value of `true` to enable query highlight markers (see below)",
          "enum": [
            true,
            false
          ]
        },
        "page": {
          "type": "integer"
        },
        "query": {
          "type": "string",
          "text": "Search query",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "Return matches sorted by either `score` or `timestamp`"
        },
        "sort_dir": {
          "type": "string",
          "text": "Change sort direction to ascending (`asc`) or descending (`desc`)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Searches for messages matching a query.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/search.messages",
        "alias_endpoint": "/slack/search.messages",
        "api_ref": "https://api.slack.com/methods/search.messages"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_stars_add": {
      "provider_intent": "post_stars_add",
      "provider_alias_intent": "/stars.add",
      "text": "Adds a star to an item.",
      "category": "Stars",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel to add star to or channel where the message to add star to was posted (used with `timestamp`)"
        },
        "file": {
          "type": "string",
          "text": "File to add star to"
        },
        "file_comment": {
          "type": "string",
          "text": "File comment to add star to"
        },
        "timestamp": {
          "type": "string",
          "text": "Timestamp of the message to add star to"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a star to an item.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/stars.add",
        "alias_endpoint": "/slack/stars.add",
        "api_ref": "https://api.slack.com/methods/stars.add"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_stars_list": {
      "provider_intent": "get_stars_list",
      "provider_alias_intent": "/stars.list",
      "text": "Lists stars for a user.",
      "category": "Stars",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "count": {
          "type": "string"
        },
        "page": {
          "type": "string"
        },
        "cursor": {
          "type": "string",
          "text": "Parameter for pagination"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists stars for a user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/stars.list",
        "alias_endpoint": "/slack/stars.list",
        "api_ref": "https://api.slack.com/methods/stars.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_stars_remove": {
      "provider_intent": "post_stars_remove",
      "provider_alias_intent": "/stars.remove",
      "text": "Removes a star from an item.",
      "category": "Stars",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channel": {
          "type": "string",
          "text": "Channel to remove star from or channel where the message to remove star from was posted (used with `timestamp`)"
        },
        "file": {
          "type": "string",
          "text": "File to remove star from"
        },
        "file_comment": {
          "type": "string",
          "text": "File comment to remove star from"
        },
        "timestamp": {
          "type": "string",
          "text": "Timestamp of the message to remove star from"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a star from an item.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/stars.remove",
        "alias_endpoint": "/slack/stars.remove",
        "api_ref": "https://api.slack.com/methods/stars.remove"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_team_accesslogs": {
      "provider_intent": "get_team_accesslogs",
      "provider_alias_intent": "/team.accesslogs",
      "text": "Gets the access logs for the current team.",
      "category": "Team",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "before": {
          "type": "string",
          "text": "End of time range of logs to include in results (inclusive)"
        },
        "count": {
          "type": "string"
        },
        "page": {
          "type": "string"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the access logs for the current team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/team.accessLogs",
        "alias_endpoint": "/slack/team.accesslogs",
        "api_ref": "https://api.slack.com/methods/team.accessLogs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_team_billableinfo": {
      "provider_intent": "get_team_billableinfo",
      "provider_alias_intent": "/team.billableinfo",
      "text": "Gets billable users information for the current team.",
      "category": "Team",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "user": {
          "type": "string",
          "text": "A user to retrieve the billable information for"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets billable users information for the current team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/team.billableInfo",
        "alias_endpoint": "/slack/team.billableinfo",
        "api_ref": "https://api.slack.com/methods/team.billableInfo"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_team_info": {
      "provider_intent": "get_team_info",
      "provider_alias_intent": "/team.info",
      "text": "Gets information about the current team.",
      "category": "Team",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "team": {
          "type": "string",
          "text": "Team to get info on if omitted will return information about the current team"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about the current team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/team.info",
        "alias_endpoint": "/slack/team.info",
        "api_ref": "https://api.slack.com/methods/team.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_team_integrationlogs": {
      "provider_intent": "get_team_integrationlogs",
      "provider_alias_intent": "/team.integrationlogs",
      "text": "Gets the integration logs for the current team.",
      "category": "Team",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "app_id": {
          "type": "string",
          "text": "Filter logs to this Slack app"
        },
        "change_type": {
          "type": "string",
          "text": "Filter logs with this change type"
        },
        "count": {
          "type": "string"
        },
        "page": {
          "type": "string"
        },
        "service_id": {
          "type": "string",
          "text": "Filter logs to this service"
        },
        "user": {
          "type": "string",
          "text": "Filter logs generated by this userâ€™s actions"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the integration logs for the current team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/team.integrationLogs",
        "alias_endpoint": "/slack/team.integrationlogs",
        "api_ref": "https://api.slack.com/methods/team.integrationLogs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_team_profile_get": {
      "provider_intent": "get_team_profile_get",
      "provider_alias_intent": "/team.profile.get",
      "text": "Retrieve a team's profile.",
      "category": "Team Profile",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "visibility": {
          "type": "string",
          "text": "Filter by visibility"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieve a team's profile.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/team.profile.get",
        "alias_endpoint": "/slack/team.profile.get",
        "api_ref": "https://api.slack.com/methods/team.profile.get"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_usergroups_create": {
      "provider_intent": "post_usergroups_create",
      "provider_alias_intent": "/usergroups.create",
      "text": "Create a User Group",
      "category": "Usergroups",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "channels": {
          "type": "string",
          "text": "A comma separated string of encoded channel IDs for which the User Group uses as a default"
        },
        "description": {
          "type": "string",
          "text": "A short description of the User Group"
        },
        "handle": {
          "type": "string",
          "text": "A mention handle"
        },
        "include_count": {
          "type": "boolean",
          "text": "Include the number of users in each User Group",
          "enum": [
            true,
            false
          ]
        },
        "name": {
          "type": "string",
          "text": "A name for the User Group",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a User Group.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/usergroups.create",
        "alias_endpoint": "/slack/usergroups.create",
        "api_ref": "https://api.slack.com/methods/usergroups.create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_usergroups_disable": {
      "provider_intent": "post_usergroups_disable",
      "provider_alias_intent": "/usergroups.disable",
      "text": "Disable an existing User Group",
      "category": "Usergroups",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "include_count": {
          "type": "boolean",
          "text": "Include the number of users in the User Group",
          "enum": [
            true,
            false
          ]
        },
        "usergroup": {
          "type": "string",
          "text": "The encoded ID of the User Group to disable",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Disable an existing User Group.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/usergroups.disable",
        "alias_endpoint": "/slack/usergroups.disable",
        "api_ref": "https://api.slack.com/methods/usergroups.disable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_usergroups_enable": {
      "provider_intent": "post_usergroups_enable",
      "provider_alias_intent": "/usergroups.enable",
      "text": "Enable a User Group",
      "category": "Usergroups",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "include_count": {
          "type": "boolean",
          "text": "Include the number of users in the User Group",
          "enum": [
            true,
            false
          ]
        },
        "usergroup": {
          "type": "string",
          "text": "The encoded ID of the User Group to enable",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enable a User Group.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/usergroups.enable",
        "alias_endpoint": "/slack/usergroups.enable",
        "api_ref": "https://api.slack.com/methods/usergroups.enable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_usergroups_list": {
      "provider_intent": "get_usergroups_list",
      "provider_alias_intent": "/usergroups.list",
      "text": "List all User Groups for a team",
      "category": "Usergroups",
      "method": "GET",
      "type": "API",
      "params": {
        "include_users": {
          "type": "boolean",
          "text": "Include the list of users for each User Group",
          "enum": [
            true,
            false
          ]
        },
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "include_count": {
          "type": "boolean",
          "text": "Include the number of users in each User Group",
          "enum": [
            true,
            false
          ]
        },
        "include_disabled": {
          "type": "boolean",
          "text": "Include disabled User Groups",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all User Groups for a team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/usergroups.list",
        "alias_endpoint": "/slack/usergroups.list",
        "api_ref": "https://api.slack.com/methods/usergroups.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_usergroups_update": {
      "provider_intent": "post_usergroups_update",
      "provider_alias_intent": "/usergroups.update",
      "text": "Update an existing User Group",
      "category": "Usergroups",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "handle": {
          "type": "string",
          "text": "A mention handle"
        },
        "description": {
          "type": "string",
          "text": "A short description of the User Group"
        },
        "channels": {
          "type": "string",
          "text": "A comma separated string of encoded channel IDs for which the User Group uses as a default"
        },
        "include_count": {
          "type": "boolean",
          "text": "Include the number of users in the User Group",
          "enum": [
            true,
            false
          ]
        },
        "usergroup": {
          "type": "string",
          "text": "The encoded ID of the User Group to update",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "A name for the User Group"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update an existing User Group.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/usergroups.update",
        "alias_endpoint": "/slack/usergroups.update",
        "api_ref": "https://api.slack.com/methods/usergroups.update"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_usergroups_users_list": {
      "provider_intent": "get_usergroups_users_list",
      "provider_alias_intent": "/usergroups.users.list",
      "text": "List all users in a User Group",
      "category": "Usergroups Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "include_disabled": {
          "type": "boolean",
          "text": "Allow results that involve disabled User Groups",
          "enum": [
            true,
            false
          ]
        },
        "usergroup": {
          "type": "string",
          "text": "The encoded ID of the User Group to update",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all users in a User Group.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/usergroups.users.list",
        "alias_endpoint": "/slack/usergroups.users.list",
        "api_ref": "https://api.slack.com/methods/usergroups.users.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_usergroups_users_update": {
      "provider_intent": "post_usergroups_users_update",
      "provider_alias_intent": "/usergroups.users.update",
      "text": "Update the list of users for a User Group",
      "category": "Usergroups Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "include_count": {
          "type": "boolean",
          "text": "Include the number of users in the User Group",
          "enum": [
            true,
            false
          ]
        },
        "usergroup": {
          "type": "string",
          "text": "The encoded ID of the User Group to update",
          "required": true
        },
        "users": {
          "type": "string",
          "text": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update the list of users for a User Group.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/usergroups.users.update",
        "alias_endpoint": "/slack/usergroups.users.update",
        "api_ref": "https://api.slack.com/methods/usergroups.users.update"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_conversations": {
      "provider_intent": "get_users_conversations",
      "provider_alias_intent": "/users.conversations",
      "text": "List conversations the calling user may access.",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "user": {
          "type": "string",
          "text": "Browse conversations by a specific user ID's membership"
        },
        "types": {
          "type": "string",
          "text": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel` `private_channel` `mpim` `im`"
        },
        "exclude_archived": {
          "type": "boolean",
          "text": "Set to `true` to exclude archived channels from the list",
          "enum": [
            true,
            false
          ]
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List conversations the calling user may access.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.conversations",
        "alias_endpoint": "/slack/users.conversations",
        "api_ref": "https://api.slack.com/methods/users.conversations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_users_deletephoto": {
      "provider_intent": "post_users_deletephoto",
      "provider_alias_intent": "/users.deletephoto",
      "text": "Delete the user profile photo",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Delete the user profile photo.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.deletePhoto",
        "alias_endpoint": "/slack/users.deletephoto",
        "api_ref": "https://api.slack.com/methods/users.deletePhoto"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_getpresence": {
      "provider_intent": "get_users_getpresence",
      "provider_alias_intent": "/users.getpresence",
      "text": "Gets user presence information.",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "user": {
          "type": "string",
          "text": "User to get presence info on"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets user presence information.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.getPresence",
        "alias_endpoint": "/slack/users.getpresence",
        "api_ref": "https://api.slack.com/methods/users.getPresence"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_identity": {
      "provider_intent": "get_users_identity",
      "provider_alias_intent": "/users.identity",
      "text": "Get a user's identity.",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a user's identity.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.identity",
        "alias_endpoint": "/slack/users.identity",
        "api_ref": "https://api.slack.com/methods/users.identity"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_info": {
      "provider_intent": "get_users_info",
      "provider_alias_intent": "/users.info",
      "text": "Gets information about a user.",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "include_locale": {
          "type": "boolean",
          "text": "Set this to `true` to receive the locale for this user",
          "enum": [
            true,
            false
          ]
        },
        "user": {
          "type": "string",
          "text": "User to get info on"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.info",
        "alias_endpoint": "/slack/users.info",
        "api_ref": "https://api.slack.com/methods/users.info"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_list": {
      "provider_intent": "get_users_list",
      "provider_alias_intent": "/users.list",
      "text": "Lists all users in a Slack team.",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token"
        },
        "limit": {
          "type": "integer",
          "text": "The maximum number of items to return"
        },
        "cursor": {
          "type": "string",
          "text": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`"
        },
        "include_locale": {
          "type": "boolean",
          "text": "Set this to `true` to receive the locale for users",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all users in a Slack team.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.list",
        "alias_endpoint": "/slack/users.list",
        "api_ref": "https://api.slack.com/methods/users.list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_lookupbyemail": {
      "provider_intent": "get_users_lookupbyemail",
      "provider_alias_intent": "/users.lookupbyemail",
      "text": "Find a user with an email address.",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "email": {
          "type": "string",
          "text": "An email address belonging to a user in the workspace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Find a user with an email address.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.lookupByEmail",
        "alias_endpoint": "/slack/users.lookupbyemail",
        "api_ref": "https://api.slack.com/methods/users.lookupByEmail"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_users_setactive": {
      "provider_intent": "post_users_setactive",
      "provider_alias_intent": "/users.setactive",
      "text": "Marked a user as active. Deprecated and non-functional.",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Marked a user as active.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.setActive",
        "alias_endpoint": "/slack/users.setactive",
        "api_ref": "https://api.slack.com/methods/users.setActive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_users_setphoto": {
      "provider_intent": "post_users_setphoto",
      "provider_alias_intent": "/users.setphoto",
      "text": "Set the user profile photo",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "crop_w": {
          "type": "string",
          "text": "Width/height of crop box (always square)"
        },
        "crop_x": {
          "type": "string",
          "text": "X coordinate of top-left corner of crop box"
        },
        "crop_y": {
          "type": "string",
          "text": "Y coordinate of top-left corner of crop box"
        },
        "image": {
          "type": "string",
          "text": "File contents via `multipart/form-data`"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set the user profile photo.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.setPhoto",
        "alias_endpoint": "/slack/users.setphoto",
        "api_ref": "https://api.slack.com/methods/users.setPhoto"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_users_setpresence": {
      "provider_intent": "post_users_setpresence",
      "provider_alias_intent": "/users.setpresence",
      "text": "Manually sets user presence.",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "presence": {
          "type": "string",
          "text": "Either `auto` or `away`",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Manually sets user presence.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.setPresence",
        "alias_endpoint": "/slack/users.setpresence",
        "api_ref": "https://api.slack.com/methods/users.setPresence"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_profile_get": {
      "provider_intent": "get_users_profile_get",
      "provider_alias_intent": "/users.profile.get",
      "text": "Retrieves a user's profile information.",
      "category": "Users Profile",
      "method": "GET",
      "type": "API",
      "params": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        },
        "include_labels": {
          "type": "boolean",
          "text": "Include labels for each ID in custom profile fields",
          "enum": [
            true,
            false
          ]
        },
        "user": {
          "type": "string",
          "text": "User to retrieve profile info for"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieves a user's profile information.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.profile.get",
        "alias_endpoint": "/slack/users.profile.get",
        "api_ref": "https://api.slack.com/methods/users.profile.get"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_users_profile_set": {
      "provider_intent": "post_users_profile_set",
      "provider_alias_intent": "/users.profile.set",
      "text": "Set the profile information for a user.",
      "category": "Users Profile",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {
        "name": {
          "type": "string",
          "text": "Name of a single key to set"
        },
        "profile": {
          "type": "string",
          "text": "Collection of key",
          "enum": [
            "value pairs presented as a URL-encoded JSON hash"
          ]
        },
        "user": {
          "type": "string",
          "text": "ID of user to change"
        },
        "value": {
          "type": "string",
          "text": "Value to set a single key to"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Set the profile information for a user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/users.profile.set",
        "alias_endpoint": "/slack/users.profile.set",
        "api_ref": "https://api.slack.com/methods/users.profile.set"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_views_open": {
      "provider_intent": "get_views_open",
      "provider_alias_intent": "/views.open",
      "text": "Open a view for a user.",
      "category": "Views",
      "method": "GET",
      "type": "API",
      "params": {
        "trigger_id": {
          "type": "string",
          "text": "Exchange a trigger to post to the user",
          "required": true
        },
        "view": {
          "type": "string",
          "text": "A [view payload](/reference/surfaces/views)",
          "required": true
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Open a view for a user.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/views.open",
        "alias_endpoint": "/slack/views.open",
        "api_ref": "https://api.slack.com/methods/views.open"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_views_publish": {
      "provider_intent": "get_views_publish",
      "provider_alias_intent": "/views.publish",
      "text": "Publish a static view for a User.",
      "category": "Views",
      "method": "GET",
      "type": "API",
      "params": {
        "user_id": {
          "type": "string",
          "text": "`id` of the user you want publish a view to",
          "required": true
        },
        "view": {
          "type": "string",
          "text": "A [view payload](/reference/surfaces/views)",
          "required": true
        },
        "hash": {
          "type": "string",
          "text": "A string that represents view state to protect against possible race conditions"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Publish a static view for a User.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/views.publish",
        "alias_endpoint": "/slack/views.publish",
        "api_ref": "https://api.slack.com/methods/views.publish"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_views_push": {
      "provider_intent": "get_views_push",
      "provider_alias_intent": "/views.push",
      "text": "Push a view onto the stack of a root view.",
      "category": "Views",
      "method": "GET",
      "type": "API",
      "params": {
        "trigger_id": {
          "type": "string",
          "text": "Exchange a trigger to post to the user",
          "required": true
        },
        "view": {
          "type": "string",
          "text": "A [view payload](/reference/surfaces/views)",
          "required": true
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Push a view onto the stack of a root view.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/views.push",
        "alias_endpoint": "/slack/views.push",
        "api_ref": "https://api.slack.com/methods/views.push"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_views_update": {
      "provider_intent": "get_views_update",
      "provider_alias_intent": "/views.update",
      "text": "Update an existing view.",
      "category": "Views",
      "method": "GET",
      "type": "API",
      "params": {
        "view_id": {
          "type": "string",
          "text": "A unique identifier of the view to be updated"
        },
        "external_id": {
          "type": "string",
          "text": "A unique identifier of the view set by the developer"
        },
        "view": {
          "type": "string",
          "text": "A [view object](/reference/surfaces/views)"
        },
        "hash": {
          "type": "string",
          "text": "A string that represents view state to protect against possible race conditions"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update an existing view.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/views.update",
        "alias_endpoint": "/slack/views.update",
        "api_ref": "https://api.slack.com/methods/views.update"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_workflows_stepcompleted": {
      "provider_intent": "get_workflows_stepcompleted",
      "provider_alias_intent": "/workflows.stepcompleted",
      "text": "Indicate that an app's step in a workflow completed execution.",
      "category": "Workflows",
      "method": "GET",
      "type": "API",
      "params": {
        "workflow_step_execute_id": {
          "type": "string",
          "text": "Context identifier that maps to the correct workflow step execution",
          "required": true
        },
        "outputs": {
          "type": "string",
          "text": "Key-value object of outputs from your step"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Indicate that an app's step in a workflow completed execution.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/workflows.stepCompleted",
        "alias_endpoint": "/slack/workflows.stepcompleted",
        "api_ref": "https://api.slack.com/methods/workflows.stepCompleted"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_workflows_stepfailed": {
      "provider_intent": "get_workflows_stepfailed",
      "provider_alias_intent": "/workflows.stepfailed",
      "text": "Indicate that an app's step in a workflow failed to execute.",
      "category": "Workflows",
      "method": "GET",
      "type": "API",
      "params": {
        "workflow_step_execute_id": {
          "type": "string",
          "text": "Context identifier that maps to the correct workflow step execution",
          "required": true
        },
        "error": {
          "type": "string",
          "text": "A JSON-based object with a `message` property that should contain a human readable error message",
          "required": true
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Indicate that an app's step in a workflow failed to execute.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/workflows.stepFailed",
        "alias_endpoint": "/slack/workflows.stepfailed",
        "api_ref": "https://api.slack.com/methods/workflows.stepFailed"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_workflows_updatestep": {
      "provider_intent": "get_workflows_updatestep",
      "provider_alias_intent": "/workflows.updatestep",
      "text": "Update the configuration for a workflow extension step.",
      "category": "Workflows",
      "method": "GET",
      "type": "API",
      "params": {
        "workflow_step_edit_id": {
          "type": "string",
          "text": "A context identifier provided with `view_submission` payloads used to call back to `workflows",
          "required": true
        },
        "inputs": {
          "type": "string",
          "text": "A JSON key-value map of inputs required from a user during configuration"
        },
        "outputs": {
          "type": "string",
          "text": "An JSON array of output objects used during step execution"
        },
        "step_name": {
          "type": "string",
          "text": "An optional field that can be used to override the step name that is shown in the Workflow Builder"
        },
        "step_image_url": {
          "type": "string",
          "text": "An optional field that can be used to override app image that is shown in the Workflow Builder"
        }
      },
      "custom_headers": {
        "token": {
          "type": "string",
          "text": "Authentication token",
          "required": true
        }
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update the configuration for a workflow extension step.",
        "rate_limit": [],
        "api_endpoint": "https://slack.com/api/workflows.updateStep",
        "alias_endpoint": "/slack/workflows.updatestep",
        "api_ref": "https://api.slack.com/methods/workflows.updateStep"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    }
  }
}