{
  "routes": {
    "openai__v1__chat__completions___post": {
      "provider_intent": "openai__v1__chat__completions___post",
      "provider_alias_intent": "/v1/chat/completions",
      "text": "Create chat completion",
      "category": "Chat",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "messages": {
          "type": "array",
          "text": "The messages to generate chat completions for; in the chat format",
          "required": true,
          "examples": [
            {
              "role": "user",
              "content": "Tell something interesting about ocean."
            }
          ]
        },
        "model": {
          "type": "string",
          "text": "ID of the model to use. Currently only gpt-3.5-turbo and gpt-3.5-turbo-0301 are supported",
          "required": true,
          "examples": "gpt-3.5-turbo"
        },
        "frequency_penalty": {
          "type": "number",
          "text": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far; decreasing the model's likelihood to repeat the same line verbatim"
        },
        "logit_bias": {
          "type": "number",
          "text": "Modify the likelihood of specified tokens appearing in the completion"
        },
        "logprobs": {
          "type": "boolean",
          "text": "Whether to return log probabilities of the output tokens or not",
          "enum": [
            true,
            false
          ]
        },
        "top_logprobs": {
          "type": "number",
          "text": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability"
        },
        "max_tokens": {
          "type": "number",
          "text": "The maximum number of tokens allowed for the generated answer. By default the number of tokens the model can return will be (4096 - prompt tokens)"
        },
        "n": {
          "type": "number",
          "text": "How many chat completion choices to generate for each input message"
        },
        "presence_penalty": {
          "type": "number",
          "text": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far; increasing the model's likelihood to talk about new topics"
        },
        "response_format": {
          "type": "object",
          "text": "An object specifying the format that the model must output"
        },
        "seed": {
          "type": "string",
          "text": "Up to 4 sequences where the API will stop generating further tokens"
        },
        "stream": {
          "type": "boolean",
          "text": "If set; partial message deltas will be sent like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available; with the stream terminated by a data - [DONE] message",
          "enum": [
            true,
            false
          ]
        },
        "stream_options": {
          "type": "object",
          "text": "Options for streaming response"
        },
        "temperature": {
          "type": "number",
          "text": "What sampling temperature to use between 0 and 2. Higher values like 0.8 will make the output more random; while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both",
          "examples": 0.8
        },
        "top_p": {
          "type": "number",
          "text": "An alternative to sampling with temperature; called nucleus sampling; where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both"
        },
        "tools": {
          "type": "array",
          "text": "A list of tools the model may call"
        },
        "tool_choice": {
          "type": "object",
          "text": "Controls which (if any) tool is called by the model. none means the model will not call any tool and instead generates a message"
        },
        "parallel_tool_calls": {
          "type": "boolean",
          "text": "Whether to enable parallel function calling during tool use",
          "enum": [
            true,
            false
          ]
        },
        "user": {
          "type": "string",
          "text": "A unique identifier representing your end-user which can help OpenAI to monitor and detect abuse"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Creates a completion for the chat message.\n\n\nList of available models for ChatGPT API:  \n\n\n`gpt-3.5-turbo` (Current)\n\n`gpt-3.5-turbo-16k`\n\n`gpt-3.5-turbo-instruct`\n\n\n`gpt-4` \n\n`gpt-4-32k`\n\n`gpt-4-1106-preview`\n\n`gpt-4-vision-preview`\n\n\n[Official OpenAI model here: https://platform.openai.com/docs/models](https://platform.openai.com/docs/models)",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/chat/completions",
        "alias_endpoint": "/openai/v1/chat/completions",
        "api_ref": "https://platform.openai.com/docs/api-reference/chat/create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "response_type": "",
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__audio__transcriptions___post": {
      "provider_intent": "openai__v1__audio__transcriptions___post",
      "provider_alias_intent": "/v1/audio/transcriptions",
      "text": "Create transcription",
      "category": "Audio",
      "method": "POST",
      "type": "Upload",
      "params": {},
      "custom_headers": {},
      "body": {
        "file": {
          "type": "file",
          "text": "The audio file to transcribe in one of these formats",
          "required": true,
          "enum": [
            "mp3, mp4, mpeg, mpga, m4a, wav, or webm"
          ],
          "examples": "file"
        },
        "model": {
          "type": "string",
          "text": "ID of the model to use. Only whisper-1 is currently available",
          "required": true,
          "examples": "whisper-1"
        },
        "language": {
          "type": "string",
          "text": "The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency",
          "examples": ""
        },
        "prompt": {
          "type": "string",
          "text": "An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language",
          "examples": ""
        },
        "response_format": {
          "type": "string",
          "text": "The format of the transcript output; in one of these options",
          "enum": [
            "json; text; srt; verbose_json; or vtt"
          ]
        },
        "temperature": {
          "type": "number",
          "text": "The sampling temperature; between 0 and 1. Higher values like 0.8 will make the output more random; while lower values like 0.2 will make it more focused and deterministic. If set to 0; the model will use log probability to automatically increase the temperature until certain thresholds are hit"
        },
        "timestamp_granularities[]": {
          "type": "array",
          "text": "The timestamp granularities to populate for this transcription"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Transcribes audio into the input language",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/audio/transcriptions",
        "alias_endpoint": "/openai/v1/audio/transcriptions",
        "api_ref": "https://platform.openai.com/docs/api-reference/audio/createTranscription"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "response_type": "",
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__audio__translations___post": {
      "provider_intent": "openai__v1__audio__translations___post",
      "provider_alias_intent": "/v1/audio/translations",
      "text": "Create translation",
      "category": "Audio",
      "method": "POST",
      "type": "Upload",
      "params": {},
      "custom_headers": {},
      "body": {
        "file": {
          "type": "file",
          "text": "The audio file to transcribe in one of these formats",
          "required": true,
          "enum": [
            "mp3; mp4; mpeg; mpga; m4a; wav; or webm"
          ]
        },
        "model": {
          "type": "string",
          "text": "ID of the model to use. Only whisper-1 is currently available",
          "required": true
        },
        "prompt": {
          "type": "string",
          "text": "An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language"
        },
        "response_format": {
          "type": "string",
          "text": "The format of the transcript output; in one of these options",
          "enum": [
            "json; text; srt; verbose_json; or vtt"
          ]
        },
        "temperature": {
          "type": "number",
          "text": "The sampling temperature; between 0 and 1. Higher values like 0.8 will make the output more random; while lower values like 0.2 will make it more focused and deterministic. If set to 0; the model will use log probability to automatically increase the temperature until certain thresholds are hit"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Translates audio into into English",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/audio/translations",
        "alias_endpoint": "/openai/v1/audio/translations",
        "api_ref": "https://platform.openai.com/docs/api-reference/audio/createTranslation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "response_type": "",
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__images__generations___post": {
      "provider_intent": "openai__v1__images__generations___post",
      "provider_alias_intent": "/v1/images/generations",
      "text": "Create image",
      "category": "Images",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "prompt": {
          "type": "string",
          "text": "Provide a text description of the desired image(s), with a maximum length of 1000 characters for DALL-E 2 and 4000 characters for DALL-E 3.",
          "required": true
        },
        "model": {
          "type": "number",
          "text": "The model to use for image generation"
        },
        "n": {
          "type": "number",
          "text": "Specify the number of images to generate, between 1 and 10; for DALL-E 3, only n=1 is supported."
        },
        "quality": {
          "type": "string",
          "text": "Specify the quality of the image; 'hd' creates images with finer details and greater consistency, supported only for DALL-E 3."
        },
        "response_format": {
          "type": "string",
          "text": "Specify the format of the generated images, either 'url' or 'b64_json'; URLs are valid for 60 minutes after generation."
        },
        "size": {
          "type": "string",
          "text": "Specify the size of the generated images: 256x256, 512x512, or 1024x1024 for DALL-E 2; 1024x1024, 1792x1024, or 1024x1792 for DALL-E 3."
        },
        "style": {
          "type": "string",
          "text": "Specify the style of the generated images, either 'vivid' for hyper-real and dramatic images or 'natural' for more natural, less hyper-real images, supported only for DALL-E 3."
        },
        "user": {
          "type": "string",
          "text": "Provide a unique identifier representing your end-user to help OpenAI monitor and detect abuse."
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Creates an image given a prompt",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/images/generations",
        "alias_endpoint": "/openai/v1/images/generations",
        "api_ref": "https://platform.openai.com/docs/api-reference/images/create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "response_type": "",
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__images__edits___post": {
      "provider_intent": "openai__v1__images__edits___post",
      "provider_alias_intent": "/v1/images/edits",
      "text": "Create image edit",
      "category": "Images",
      "method": "POST",
      "type": "Upload",
      "params": {},
      "custom_headers": {},
      "body": {
        "image": {
          "type": "file",
          "text": "Provide the image to edit, which must be a valid PNG file, less than 4MB, and square; if no mask is provided, the image must have transparency to be used as the mask",
          "required": true
        },
        "prompt": {
          "type": "string",
          "text": "Provide a text description of the desired image(s) within a maximum length of 1000 characters",
          "required": true
        },
        "mask": {
          "type": "file",
          "text": "Provide an additional image where fully transparent areas (alpha zero) indicate where edits should be applied, valid as a PNG file, less than 4MB, and matching the dimensions of the main image"
        },
        "model": {
          "type": "string",
          "text": "Specify the model for image generation; only DALL-E 2 is supported at this time"
        },
        "n": {
          "type": "number",
          "text": "The number of images to generate. Must be between 1 and 10"
        },
        "size": {
          "type": "string",
          "text": "The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024"
        },
        "response_format": {
          "type": "string",
          "text": "Specify the format for the generated images: 'url' or 'b64_json'. URLs are valid for 60 minutes after generation"
        },
        "user": {
          "type": "string",
          "text": "Provide a unique identifier representing your end-user to help OpenAI monitor and detect abuse."
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Creates an edited or extended image given an original image and a prompt",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/images/edits",
        "alias_endpoint": "/openai/v1/images/edits",
        "api_ref": "https://platform.openai.com/docs/api-reference/images/createEdit"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "response_type": "",
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__images__variations___post": {
      "provider_intent": "openai__v1__images__variations___post",
      "provider_alias_intent": "/v1/images/variations",
      "text": "Create image variations",
      "category": "Images",
      "method": "POST",
      "type": "Upload",
      "params": {},
      "custom_headers": {},
      "body": {
        "image": {
          "type": "file",
          "text": "The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square",
          "required": true
        },
        "model": {
          "type": "string",
          "text": "The model to use for image generation. Only dall-e-2 is supported at this time"
        },
        "n": {
          "type": "number",
          "text": "The number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1 is supported"
        },
        "size": {
          "type": "string",
          "text": "The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024"
        },
        "response_format": {
          "type": "string",
          "text": "The format in which the generated images are returned. Must be one of url or b64_json. URLs are only valid for 60 minutes after the image has been generated"
        },
        "user": {
          "type": "string",
          "text": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Creates a variation of a given image",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/images/variations",
        "alias_endpoint": "/openai/v1/images/variations",
        "api_ref": "https://platform.openai.com/docs/api-reference/images/createVariation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "response_type": "",
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__assistants___post": {
      "provider_intent": "openai__v1__assistants___post",
      "provider_alias_intent": "/v1/assistants",
      "text": "Create assistant",
      "category": "Assistants",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "model": {
          "type": "number",
          "text": "ID of the model to use",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the assistant"
        },
        "description": {
          "type": "string",
          "text": "The description of the assistant The maximum length is 512 characters"
        },
        "instructions": {
          "type": "string",
          "text": "The system instructions that the assistant uses"
        },
        "tools": {
          "type": "array",
          "text": "A list of tool enabled on the assistant"
        },
        "tool_resources": {
          "type": "object",
          "text": "A set of resources that are used by the assistant's tools"
        },
        "metadata": {
          "type": "number",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        },
        "temperature": {
          "type": "number",
          "text": "What sampling temperature to use, between 0 and 2"
        },
        "top_p": {
          "type": "number",
          "text": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass"
        },
        "response_format": {
          "type": "object",
          "text": "Specifies the format that the model must output. Compatible with GPT-4o, GPT-4 Turbo, and all GPT-3.5 Turbo models since gpt-3.5-turbo-1106"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Create an assistant with a model and instructions",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/assistants",
        "alias_endpoint": "/openai/v1/assistants",
        "api_ref": "https://platform.openai.com/docs/api-reference/assistants/createAssistant"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__assistants__assistant_id___get": {
      "provider_intent": "openai__v1__assistants__assistant_id___get",
      "provider_alias_intent": "/v1/assistants/assistant_id",
      "text": "Retrieve assistant",
      "category": "Assistants",
      "method": "GET",
      "type": "API",
      "params": {
        "assistant_id": {
          "type": "string",
          "text": "The ID of the assistant to retrieve",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "assistant_id": {
          "type": "string",
          "text": "The ID of the assistant to retrieve",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Retrieves an assistant",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/assistants/{assistant_id}",
        "alias_endpoint": "/openai/v1/assistants/assistant_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/assistants/getAssistant"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__assistants__assistant_id___post": {
      "provider_intent": "openai__v1__assistants__assistant_id___post",
      "provider_alias_intent": "/v1/assistants/assistant_id",
      "text": "Modify assistant",
      "category": "Assistants",
      "method": "POST",
      "type": "API",
      "params": {
        "assistant_id": {
          "type": "string",
          "text": "The ID of the assistant to modify",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "model": {
          "type": "number",
          "text": "ID of the model to us"
        },
        "name": {
          "type": "string",
          "text": "The name of the assistant"
        },
        "description": {
          "type": "string",
          "text": "The description of the assistant"
        },
        "instructions": {
          "type": "string",
          "text": "The system instructions that the assistant uses"
        },
        "tools": {
          "type": "array",
          "text": "A list of tool enabled on the assistant"
        },
        "file_ids": {
          "type": "array",
          "text": "A list of File IDs attached to this assistant"
        },
        "metadata": {
          "type": "number",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        },
        "temperature": {
          "type": "number",
          "text": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic"
        },
        "top_p": {
          "type": "number",
          "text": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass"
        },
        "response_format": {
          "type": "object",
          "text": " Specifies the format that the model must output"
        }
      },
      "path": {
        "assistant_id": {
          "type": "string",
          "text": "The ID of the assistant to modify",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Modifies an assistant",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/assistants/{assistant_id}",
        "alias_endpoint": "/openai/v1/assistants/assistant_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/assistants/modifyAssistant"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__assistants__assistant_id___delete": {
      "provider_intent": "openai__v1__assistants__assistant_id___delete",
      "provider_alias_intent": "/v1/assistants/assistant_id",
      "text": "Delete assistant",
      "category": "Assistants",
      "method": "DELETE",
      "type": "API",
      "params": {
        "assistant_id": {
          "type": "string",
          "text": "The ID of the assistant to delete",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "assistant_id": {
          "type": "string",
          "text": "The ID of the assistant to delete",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Delete an assistant",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/assistants/{assistant_id}",
        "alias_endpoint": "/openai/v1/assistants/assistant_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/assistants/deleteAssistant"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__assistants___get": {
      "provider_intent": "openai__v1__assistants___get",
      "provider_alias_intent": "/v1/assistants",
      "text": "List assistants",
      "category": "Assistants",
      "method": "GET",
      "type": "API",
      "params": {
        "limit": {
          "type": "number",
          "text": "A limit on the number of objects to be returned"
        },
        "order": {
          "type": "string",
          "text": "Sort order by the created_at timestamp of the objects"
        },
        "after": {
          "type": "string",
          "text": "A cursor for use in pagination"
        },
        "before": {
          "type": "string",
          "text": "A cursor for use in pagination"
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Returns a list of assistants",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/assistants",
        "alias_endpoint": "/openai/v1/assistants",
        "api_ref": "https://platform.openai.com/docs/api-reference/assistants/listAssistants"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__audio__speech___post": {
      "provider_intent": "openai__v1__audio__speech___post",
      "provider_alias_intent": "/v1/audio/speech",
      "text": "Create speech",
      "category": "Audio",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "model": {
          "type": "string",
          "text": "one of the available TTS models",
          "required": true
        },
        "input": {
          "type": "string",
          "text": "The text to generate audio",
          "required": true
        },
        "voice": {
          "type": "string",
          "text": "The voice to use when generating the audio",
          "required": true
        },
        "response_format": {
          "type": "string",
          "text": "The format to audio in. Supported formats are mp3 opus aac and flac"
        },
        "speed": {
          "type": "number",
          "text": "The speed of the generated audio"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Generates audio from the input text",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/audio/speech",
        "alias_endpoint": "/openai/v1/audio/speech",
        "api_ref": "https://platform.openai.com/docs/api-reference/audio/createSpeech"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__embeddings___post": {
      "provider_intent": "openai__v1__embeddings___post",
      "provider_alias_intent": "/v1/embeddings",
      "text": "Create embeddings",
      "category": "Embeddings",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "input": {
          "type": "array",
          "text": "Input text to embed, encoded as a string or array of tokens",
          "required": true
        },
        "model": {
          "type": "string",
          "text": "ID of the model to use"
        },
        "encoding_format": {
          "type": "string",
          "text": "The format to return the embeddings in. Can be either float or base64."
        },
        "dimensions": {
          "type": "number",
          "text": "The number of dimensions the resulting output embeddings should have. Only supported in text-embedding-3 and later models"
        },
        "user": {
          "type": "string",
          "text": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Creates an embedding vector representing the input text",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/embeddings",
        "alias_endpoint": "/openai/v1/embeddings",
        "api_ref": "https://platform.openai.com/docs/api-reference/embeddings/create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__files___get": {
      "provider_intent": "openai__v1__files___get",
      "provider_alias_intent": "/v1/files",
      "text": "List Files",
      "category": "Files",
      "method": "GET",
      "type": "API",
      "params": {
        "purpose": {
          "type": "string",
          "text": "Only return files with the given purpose"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Return a list of files that belong to the user's organization",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/files",
        "alias_endpoint": "/openai/v1/files",
        "api_ref": "https://platform.openai.com/docs/api-reference/files/list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__files___post": {
      "provider_intent": "openai__v1__files___post",
      "provider_alias_intent": "/v1/files",
      "text": "Upload files",
      "category": "Files",
      "method": "POST",
      "type": "Upload",
      "params": {},
      "custom_headers": {},
      "body": {
        "file": {
          "type": "file",
          "text": "The File object (not file name) to be uploaded",
          "required": true
        },
        "purpose": {
          "type": "string",
          "text": "The intended purpose of the uploaded file",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/files",
        "alias_endpoint": "/openai/v1/files",
        "api_ref": "https://platform.openai.com/docs/api-reference/files/create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__files__file_id___delete": {
      "provider_intent": "openai__v1__files__file_id___delete",
      "provider_alias_intent": "/v1/files/file_id",
      "text": "Delete files",
      "category": "Files",
      "method": "DELETE",
      "type": "API",
      "params": {
        "file_id": {
          "type": "string",
          "text": "The ID of the file to use for this request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "file_id": {
          "type": "string",
          "text": "The ID of the file to use for this request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Delete files",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/files/{file_id}",
        "alias_endpoint": "/openai/v1/files/file_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/files/delete"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__files__file_id___get": {
      "provider_intent": "openai__v1__files__file_id___get",
      "provider_alias_intent": "/v1/files/file_id",
      "text": "Retrieve files",
      "category": "Files",
      "method": "GET",
      "type": "API",
      "params": {
        "file_id": {
          "type": "string",
          "text": "The ID of the file to use for this request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "file_id": {
          "type": "string",
          "text": "The ID of the file to use for this request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Returns information about a specific file",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/files/{file_id}",
        "alias_endpoint": "/openai/v1/files/file_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/files/retrieve"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__files__file_id__content___get": {
      "provider_intent": "openai__v1__files__file_id__content___get",
      "provider_alias_intent": "/v1/files/file_id/content",
      "text": "Retrieve files content",
      "category": "Files",
      "method": "GET",
      "type": "API",
      "params": {
        "file_id": {
          "type": "string",
          "text": "The ID of the file to use for this request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "file_id": {
          "type": "string",
          "text": "The ID of the file to use for this request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Returns the contents of the specified file",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/files/{file_id}/content",
        "alias_endpoint": "/openai/v1/files/file_id/content",
        "api_ref": "https://platform.openai.com/docs/api-reference/files/retrieve-contents"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__fine_tuning__jobs___post": {
      "provider_intent": "openai__v1__fine_tuning__jobs___post",
      "provider_alias_intent": "/v1/fine_tuning/jobs",
      "text": "Create fine-tuning job",
      "category": "Fine Tunes ",
      "method": "POST",
      "type": "Upload",
      "params": {},
      "custom_headers": {},
      "body": {
        "model": {
          "type": "string",
          "text": "The name of the model to fine-tune",
          "required": true
        },
        "training_file": {
          "type": "string",
          "text": "The ID of an uploaded file that contains training data",
          "required": true
        },
        "hyperparameters": {
          "type": "object",
          "text": "The hyperparameters used for the fine-tuning job"
        },
        "suffix": {
          "type": "string",
          "text": "A string of up to 18 characters that will be added to your fine-tuned model name"
        },
        "validation_file": {
          "type": "string",
          "text": "The ID of an uploaded file that contains validation data"
        },
        "integrations": {
          "type": "array",
          "text": "A list of integrations to enable for your fine-tuning job"
        },
        "seed": {
          "type": "number",
          "text": "The weight to use for loss on the prompt tokens"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Creates a job that fine-tunes a specified model from a given dataset. Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/fine_tuning/jobs",
        "alias_endpoint": "/openai/v1/fine_tuning/jobs",
        "api_ref": "https://platform.openai.com/docs/api-reference/fine-tuning/create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__fine_tuning__jobs___get": {
      "provider_intent": "openai__v1__fine_tuning__jobs___get",
      "provider_alias_intent": "/v1/fine_tuning/jobs",
      "text": "List fine-tuning jobs",
      "category": "Fine Tunes ",
      "method": "GET",
      "type": "API",
      "params": {
        "after": {
          "type": "string",
          "text": "Identifier for the last job from the previous pagination request"
        },
        "limit": {
          "type": "number",
          "text": "Number of fine-tuning jobs to retrieve"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "List your organization's fine-tuning jobs",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/fine_tuning/jobs",
        "alias_endpoint": "/openai/v1/fine_tuning/jobs",
        "api_ref": "https://platform.openai.com/docs/api-reference/fine-tuning/list"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__fine_tuning__jobs__fine_tuning_job_id__events___get": {
      "provider_intent": "openai__v1__fine_tuning__jobs__fine_tuning_job_id__events___get",
      "provider_alias_intent": "/v1/fine_tuning/jobs/fine_tuning_job_id/events",
      "text": "List fine-tuning events",
      "category": "Fine Tunes ",
      "method": "GET",
      "type": "API",
      "params": {
        "fine_tuning_job_id": {
          "type": "string",
          "text": "The ID of the fine-tuning job to get events for",
          "required": true
        },
        "after": {
          "type": "string",
          "text": "Identifier for the last event from the previous pagination request"
        },
        "limit": {
          "type": "number",
          "text": "Number of fine-tuning jobs to retrieve"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "fine_tuning_job_id": {
          "type": "string",
          "text": "The ID of the fine-tuning job to get events for",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Get status updates for a fine-tuning job",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/fine_tuning/jobs/{fine_tuning_job_id}/events",
        "alias_endpoint": "/openai/v1/fine_tuning/jobs/fine_tuning_job_id/events",
        "api_ref": "https://platform.openai.com/docs/api-reference/fine-tuning/list-events"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__fine_tuning__jobs__fine_tuning_job_id__checkpoints___get": {
      "provider_intent": "openai__v1__fine_tuning__jobs__fine_tuning_job_id__checkpoints___get",
      "provider_alias_intent": "/v1/fine_tuning/jobs/fine_tuning_job_id/checkpoints",
      "text": "List fine-tuning checkpoints",
      "category": "Fine Tunes ",
      "method": "GET",
      "type": "API",
      "params": {
        "fine_tuning_job_id": {
          "type": "string",
          "text": "The ID of the fine-tuning job to get events for",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "fine_tuning_job_id": {
          "type": "string",
          "text": "The ID of the fine-tuning job to get events for",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "List checkpoints for a fine-tuning job",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints",
        "alias_endpoint": "/openai/v1/fine_tuning/jobs/fine_tuning_job_id/checkpoints",
        "api_ref": "https://platform.openai.com/docs/api-reference/fine-tuning/list-checkpoints"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__fine_tuning__jobs__fine_tuning_job_id___get": {
      "provider_intent": "openai__v1__fine_tuning__jobs__fine_tuning_job_id___get",
      "provider_alias_intent": "/v1/fine_tuning/jobs/fine_tuning_job_id",
      "text": "Retrieve fine-tuning job",
      "category": "Fine Tunes ",
      "method": "GET",
      "type": "API",
      "params": {
        "fine_tuning_job_id": {
          "type": "string",
          "text": "The ID of the fine-tuning job to get events for",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "fine_tuning_job_id": {
          "type": "string",
          "text": "The ID of the fine-tuning job to get events for",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Get fine-grained status updates for a fine-tune job",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/fine_tuning/jobs/{fine_tuning_job_id}",
        "alias_endpoint": "/openai/v1/fine_tuning/jobs/fine_tuning_job_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/fine-tuning/retrieve"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__fine_tuning__jobs__fine_tuning_job_id__cancel___post": {
      "provider_intent": "openai__v1__fine_tuning__jobs__fine_tuning_job_id__cancel___post",
      "provider_alias_intent": "/v1/fine_tuning/jobs/fine_tuning_job_id/cancel",
      "text": "Cancel fine-tuning",
      "category": "Fine Tunes ",
      "method": "POST",
      "type": "API",
      "params": {
        "fine_tuning_job_id": {
          "type": "string",
          "text": "The ID of the fine-tuning job to get events for",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "fine_tuning_job_id": {
          "type": "string",
          "text": "The ID of the fine-tuning job to get events for",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Immediately cancel a fine-tune job",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/fine_tuning/jobs/{fine_tuning_job_id}/cancel",
        "alias_endpoint": "/openai/v1/fine_tuning/jobs/fine_tuning_job_id/cancel",
        "api_ref": "https://platform.openai.com/docs/api-reference/fine-tuning/cancel"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__messages___post": {
      "provider_intent": "openai__v1__threads__thread_id__messages___post",
      "provider_alias_intent": "/v1/threads/thread_id/messages",
      "text": "Create message",
      "category": "Messages",
      "method": "POST",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "Thread ID"
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "role": {
          "type": "string",
          "text": "The role of the entity that is creating the message",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "The content of the message",
          "required": true
        },
        "attachments": {
          "type": "array",
          "text": "A list of files attached to the message, and the tools they should be added to"
        },
        "metadata": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        }
      },
      "path": {
        "thread_id": {
          "type": "string",
          "text": "Thread ID"
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Create a message",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/messages",
        "alias_endpoint": "/openai/v1/threads/thread_id/messages",
        "api_ref": "https://platform.openai.com/docs/api-reference/messages/createMessage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__messages__message_id___get": {
      "provider_intent": "openai__v1__threads__thread_id__messages__message_id___get",
      "provider_alias_intent": "/v1/threads/thread_id/messages/message_id",
      "text": "Retrieve message",
      "category": "Messages",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this message belongs",
          "required": true
        },
        "message_id": {
          "type": "string",
          "text": "The ID of the message to retrieve",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this message belongs",
          "required": true
        },
        "message_id": {
          "type": "string",
          "text": "The ID of the message to retrieve",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Retrieve a message",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/messages/{message_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id/messages/message_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/messages/getMessage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__messages__message_id___post": {
      "provider_intent": "openai__v1__threads__thread_id__messages__message_id___post",
      "provider_alias_intent": "/v1/threads/thread_id/messages/message_id",
      "text": "Modify message",
      "category": "Messages",
      "method": "POST",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this message belongs",
          "required": true
        },
        "message_id": {
          "type": "string",
          "text": "The ID of the message to modify",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "metadata": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        }
      },
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this message belongs",
          "required": true
        },
        "message_id": {
          "type": "string",
          "text": "The ID of the message to modify",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Modifies a message",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/messages/{message_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id/messages/message_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/messages/modifyMessage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__messages___get": {
      "provider_intent": "openai__v1__threads__thread_id__messages___get",
      "provider_alias_intent": "/v1/threads/thread_id/messages",
      "text": "List messages",
      "category": "Messages",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread the messages belong to",
          "required": true
        },
        "limit": {
          "type": "number",
          "text": "A limit on the number of objects to be returned"
        },
        "order": {
          "type": "string",
          "text": "Sort order by the created_at timestamp of the objects"
        },
        "after": {
          "type": "string",
          "text": "A cursor for use in pagination"
        },
        "before": {
          "type": "string",
          "text": "A cursor for use in pagination"
        },
        "run_id": {
          "type": "string",
          "text": "Filter messages by the run ID that generated them"
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread the messages belong to",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Returns a list of messages for a given thread",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/messages",
        "alias_endpoint": "/openai/v1/threads/thread_id/messages",
        "api_ref": "https://platform.openai.com/docs/api-reference/messages/listMessages"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__messages__message_id___delete": {
      "provider_intent": "openai__v1__threads__thread_id__messages__message_id___delete",
      "provider_alias_intent": "/v1/threads/thread_id/messages/message_id",
      "text": "Delete message",
      "category": "Messages",
      "method": "DELETE",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this message belongs",
          "required": true
        },
        "message_id": {
          "type": "string",
          "text": "The ID of the message to delete",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this message belongs",
          "required": true
        },
        "message_id": {
          "type": "string",
          "text": "The ID of the message to delete",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Deletes a message",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/messages/{message_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id/messages/message_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/messages/deleteMessage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__models___get": {
      "provider_intent": "openai__v1__models___get",
      "provider_alias_intent": "/v1/models",
      "text": "List models",
      "category": "Models",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Lists the currently available models, and provides basic information about each one such as the owner and availability",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/models",
        "alias_endpoint": "/openai/v1/models",
        "api_ref": "https://platform.openai.com/docs/api-reference/models"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__models__model___delete": {
      "provider_intent": "openai__v1__models__model___delete",
      "provider_alias_intent": "/v1/models/model",
      "text": "Delete fine-tune model",
      "category": "Models",
      "method": "DELETE",
      "type": "API",
      "params": {
        "model": {
          "type": "string",
          "text": "The model to delete",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "model": {
          "type": "string",
          "text": "The model to delete",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Delete a fine-tuned model. You must have the Owner role in your organization",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/models/{model}",
        "alias_endpoint": "/openai/v1/models/model",
        "api_ref": "https://platform.openai.com/docs/api-reference/models/delete"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__models__model___get": {
      "provider_intent": "openai__v1__models__model___get",
      "provider_alias_intent": "/v1/models/model",
      "text": "Retrieve model",
      "category": "Models",
      "method": "GET",
      "type": "API",
      "params": {
        "model": {
          "type": "string",
          "text": "The ID of the model to use for this request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "model": {
          "type": "string",
          "text": "The ID of the model to use for this request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/models/{model}",
        "alias_endpoint": "/openai/v1/models/model",
        "api_ref": "https://platform.openai.com/docs/api-reference/models/retrieve"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__moderations___post": {
      "provider_intent": "openai__v1__moderations___post",
      "provider_alias_intent": "/v1/moderations",
      "text": "Create moderations",
      "category": "Moderations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "input": {
          "type": "array",
          "text": "The input text to classify",
          "required": true
        },
        "model": {
          "type": "string",
          "text": "Two content moderations models are available: text-moderation-stable and text-moderation-latest"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Classifies if text violates OpenAI's Content Policy",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/moderations",
        "alias_endpoint": "/openai/v1/moderations",
        "api_ref": "https://platform.openai.com/docs/api-reference/moderations/create"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__runs__run_id__steps__step_id___get": {
      "provider_intent": "openai__v1__threads__thread_id__runs__run_id__steps__step_id___get",
      "provider_alias_intent": "/v1/threads/thread_id/runs/run_id/steps/step_id",
      "text": "Retrieve run step",
      "category": "Run steps",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which the run and run step belongs",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run to which the run step belongs",
          "required": true
        },
        "step_id": {
          "type": "string",
          "text": "The ID of the run step to retrieve",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which the run and run step belongs",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run to which the run step belongs",
          "required": true
        },
        "step_id": {
          "type": "string",
          "text": "The ID of the run step to retrieve",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Retrieves a run step",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id/runs/run_id/steps/step_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/run-steps/getRunStep"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__runs__run_id__steps___get": {
      "provider_intent": "openai__v1__threads__thread_id__runs__run_id__steps___get",
      "provider_alias_intent": "/v1/threads/thread_id/runs/run_id/steps",
      "text": "List run steps",
      "category": "Run steps",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread the run and run steps belong to",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run the run steps belong to",
          "required": true
        },
        "limit": {
          "type": "number",
          "text": "A limit on the number of objects to be returned"
        },
        "order": {
          "type": "string",
          "text": "Sort order by the created_at timestamp of the objects"
        },
        "after": {
          "type": "string",
          "text": "A cursor for use in pagination"
        },
        "before": {
          "type": "string",
          "text": "A cursor for use in pagination"
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread the run and run steps belong to",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run the run steps belong to",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Returns a list of run steps belonging to a run",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}/steps",
        "alias_endpoint": "/openai/v1/threads/thread_id/runs/run_id/steps",
        "api_ref": "https://platform.openai.com/docs/api-reference/run-steps/listRunSteps"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__runs___post": {
      "provider_intent": "openai__v1__threads__thread_id__runs___post",
      "provider_alias_intent": "/v1/threads/thread_id/runs",
      "text": "Create run",
      "category": "Runs",
      "method": "POST",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to run",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "assistant_id": {
          "type": "string",
          "text": "The ID of the assistant to use to execute this run",
          "required": true
        },
        "model": {
          "type": "string",
          "text": "The ID of the Model to be used to execute this run"
        },
        "instructions": {
          "type": "string",
          "text": "Override the default system message of the assistant"
        },
        "additional_instructions": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        },
        "additional_messages": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        },
        "tools": {
          "type": "array",
          "text": "Override the tools the assistant can use for this run"
        },
        "metadata": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        },
        "temperature": {
          "type": "number",
          "text": "What sampling temperature to use, between 0 and 2"
        },
        "top_p": {
          "type": "number",
          "text": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass"
        },
        "stream": {
          "type": "boolean",
          "text": "If true, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a data: [DONE] message",
          "enum": [
            true,
            false
          ]
        },
        "max_prompt_tokens": {
          "type": "number",
          "text": "The maximum number of prompt tokens that may be used over the course of the run"
        },
        "max_completion_tokens": {
          "type": "number",
          "text": "The maximum number of completion tokens that may be used over the course of the run"
        },
        "truncation_strategy": {
          "type": "object",
          "text": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run"
        },
        "tool_choice": {
          "type": "object",
          "text": "Controls which (if any) tool is called by the model"
        },
        "parallel_tool_calls": {
          "type": "boolean",
          "text": "Whether to enable parallel function calling during tool use",
          "enum": [
            true,
            false
          ]
        },
        "response_format": {
          "type": "string",
          "text": "Specifies the format that the model must output"
        }
      },
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Create a run",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/runs",
        "alias_endpoint": "/openai/v1/threads/thread_id/runs",
        "api_ref": "https://platform.openai.com/docs/api-reference/runs/createRun"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__runs__run_id___get": {
      "provider_intent": "openai__v1__threads__thread_id__runs__run_id___get",
      "provider_alias_intent": "/v1/threads/thread_id/runs/run_id",
      "text": "Retrieve run",
      "category": "Runs",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread that was run",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run to retrieve",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread that was run",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run to retrieve",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Retrieves a run",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id/runs/run_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/runs/getRun"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__runs__run_id___post": {
      "provider_intent": "openai__v1__threads__thread_id__runs__run_id___post",
      "provider_alias_intent": "/v1/threads/thread_id/runs/run_id",
      "text": "Modify run",
      "category": "Runs",
      "method": "POST",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread that was run",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run to modify",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "metadata": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        }
      },
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread that was run",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run to modify",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Modifies a run",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id/runs/run_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/runs/modifyRun"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__runs___get": {
      "provider_intent": "openai__v1__threads__thread_id__runs___get",
      "provider_alias_intent": "/v1/threads/thread_id/runs",
      "text": "List runs",
      "category": "Runs",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread the run belongs to",
          "required": true
        },
        "limit": {
          "type": "number",
          "text": "A limit on the number of objects to be returned. Defaults:20"
        },
        "order": {
          "type": "string",
          "text": "Sort order by the created_at timestamp of the objects"
        },
        "after": {
          "type": "string",
          "text": "A cursor for use in pagination"
        },
        "before": {
          "type": "string",
          "text": "A cursor for use in pagination"
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread the run belongs to",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Returns a list of runs belonging to a thread",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/runs",
        "alias_endpoint": "/openai/v1/threads/thread_id/runs",
        "api_ref": "https://platform.openai.com/docs/api-reference/runs/listRuns"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__runs__run_id__submit_tool_outputs___post": {
      "provider_intent": "openai__v1__threads__thread_id__runs__run_id__submit_tool_outputs___post",
      "provider_alias_intent": "/v1/threads/thread_id/runs/run_id/submit_tool_outputs",
      "text": "Submit tool outputs to run",
      "category": "Runs",
      "method": "POST",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this run belongs",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run that requires the tool output submission",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "tool_outputs": {
          "type": "array",
          "text": "A list of tools for which the outputs are being submitted",
          "required": true
        }
      },
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this run belongs",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run that requires the tool output submission",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "All outputs must be submitted in a single request",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
        "alias_endpoint": "/openai/v1/threads/thread_id/runs/run_id/submit_tool_outputs",
        "api_ref": "https://platform.openai.com/docs/api-reference/runs/submitToolOutputs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id__runs__run_id__cancel___post": {
      "provider_intent": "openai__v1__threads__thread_id__runs__run_id__cancel___post",
      "provider_alias_intent": "/v1/threads/thread_id/runs/run_id/cancel",
      "text": "Cancel a run",
      "category": "Runs",
      "method": "POST",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this run belongs",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run to cancel",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to which this run belongs",
          "required": true
        },
        "run_id": {
          "type": "string",
          "text": "The ID of the run to cancel",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Cancels a run that is in_progress",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}/cancel",
        "alias_endpoint": "/openai/v1/threads/thread_id/runs/run_id/cancel",
        "api_ref": "https://platform.openai.com/docs/api-reference/runs/cancelRun"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__runs___post": {
      "provider_intent": "openai__v1__threads__runs___post",
      "provider_alias_intent": "/v1/threads/runs",
      "text": "Create thread and run",
      "category": "Runs",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "assistant_id": {
          "type": "string",
          "text": "The ID of the assistant to use to execute this run",
          "required": true
        },
        "thread": {
          "type": "object",
          "text": "Thread"
        },
        "model": {
          "type": "string",
          "text": "The ID of the Model to be used to execute this run"
        },
        "instructions": {
          "type": "string",
          "text": "Override the default system message of the assistant"
        },
        "tools": {
          "type": "array",
          "text": "Override the tools the assistant can use for this run"
        },
        "tool_resources": {
          "type": "object",
          "text": "A set of resources that are used by the assistant's tools"
        },
        "metadata": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        },
        "temperature": {
          "type": "number",
          "text": "What sampling temperature to use, between 0 and 2"
        },
        "top_p": {
          "type": "number",
          "text": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass"
        },
        "stream": {
          "type": "boolean",
          "text": "If true, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a data: [DONE] message",
          "enum": [
            true,
            false
          ]
        },
        "max_prompt_tokens": {
          "type": "number",
          "text": "The maximum number of prompt tokens that may be used over the course of the run"
        },
        "max_completion_tokens": {
          "type": "number",
          "text": "The maximum number of completion tokens that may be used over the course of the run"
        },
        "truncation_strategy": {
          "type": "object",
          "text": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run"
        },
        "tool_choice": {
          "type": "object",
          "text": "Controls which (if any) tool is called by the model"
        },
        "parallel_tool_calls": {
          "type": "boolean",
          "text": "Whether to enable parallel function calling during tool use",
          "enum": [
            true,
            false
          ]
        },
        "response_format": {
          "type": "string",
          "text": "Specifies the format that the model must output"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Create a thread and run it in one request",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/runs",
        "alias_endpoint": "/openai/v1/threads/runs",
        "api_ref": "https://platform.openai.com/docs/api-reference/runs/createThreadAndRun"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads___post": {
      "provider_intent": "openai__v1__threads___post",
      "provider_alias_intent": "/v1/threads",
      "text": "Create thread",
      "category": "Threads",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "messages": {
          "type": "array",
          "text": "A list of messages to start the thread with"
        },
        "metadata": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        },
        "tool_resources": {
          "type": "object",
          "text": "A set of resources that are made available to the assistant's tools in this thread"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Create a thread",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads",
        "alias_endpoint": "/openai/v1/threads",
        "api_ref": "https://platform.openai.com/docs/api-reference/threads/createThread"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id___get": {
      "provider_intent": "openai__v1__threads__thread_id___get",
      "provider_alias_intent": "/v1/threads/thread_id",
      "text": "Retrieve thread",
      "category": "Threads",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to retrieve",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to retrieve",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Retrieves a thread",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/threads/getThread"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id___post": {
      "provider_intent": "openai__v1__threads__thread_id___post",
      "provider_alias_intent": "/v1/threads/thread_id",
      "text": "Modify thread",
      "category": "Threads",
      "method": "POST",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to modify. Only the metadata can be modified",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {
        "metadata": {
          "type": "object",
          "text": "Set of 16 key-value pairs that can be attached to an object"
        },
        "tool_resources": {
          "type": "object",
          "text": "A set of resources that are made available to the assistant's tools in this thread"
        }
      },
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to modify. Only the metadata can be modified",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Modifies a thread",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/threads/modifyThread"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    },
    "openai__v1__threads__thread_id___delete": {
      "provider_intent": "openai__v1__threads__thread_id___delete",
      "provider_alias_intent": "/v1/threads/thread_id",
      "text": "Delete thread",
      "category": "Threads",
      "method": "DELETE",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to delete",
          "required": true
        }
      },
      "custom_headers": {
        "OpenAI-Beta": "assistants=v1"
      },
      "body": {},
      "path": {
        "thread_id": {
          "type": "string",
          "text": "The ID of the thread to delete",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1",
        "auth": [],
        "description": "Delete a thread",
        "rate_limit": [],
        "api_endpoint": "https://api.openai.com/v1/threads/{thread_id}",
        "alias_endpoint": "/openai/v1/threads/thread_id",
        "api_ref": "https://platform.openai.com/docs/api-reference/threads/deleteThread"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "api_key"
        }
      },
      "wip": 0,
      "pinned": 0,
      "featured": 0,
      "payload_type": ""
    }
  }
}