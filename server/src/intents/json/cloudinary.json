{
  "app": {
    "title": "Cloudinary API",
    "description": "",
    "api_base": "/cloudinary",
    "copyright": "",
    "copyright_year": "",
    "contact_email": ""
  },
  "category": {
    "All": ""
  },
  "routes": {
    "get_root_folders": {
      "provider_intent": "get_root_folders",
      "provider_alias_intent": "/v1_1/cloud_name/folders",
      "text": "Get root folders",
      "category": "Admin / Folders",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get root folders",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/folders",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/folders",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_root_folders"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_subfolders": {
      "provider_intent": "get_subfolders",
      "provider_alias_intent": "/v1_1/cloud_name/folders/folder",
      "text": "Get subfolders",
      "category": "Admin / Folders",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The full path of the parent folder whose subfolders you want to return.",
          "required": true
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of results to return (up to 500). Default- 10."
        },
        "next_cursor": {
          "type": "String",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of a following request."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The full path of the parent folder whose subfolders you want to return.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get subfolders",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/folders/:folder",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/folders/folder",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_subfolders"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_folder": {
      "provider_intent": "create_folder",
      "provider_alias_intent": "/v1_1/cloud_name/folders/folder",
      "text": "Create folder",
      "category": "Admin / Folders",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The full path of the new asset folder.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The full path of the new asset folder.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create folder",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/folders/:folder",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/folders/folder",
        "api_ref": "https://cloudinary.com/documentation/admin_api#create_folder"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_folder": {
      "provider_intent": "delete_folder",
      "provider_alias_intent": "/v1_1/cloud_name/folders/folder",
      "text": "Delete folder",
      "category": "Admin / Folders",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The full path of the empty folder to delete.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The full path of the empty folder to delete.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete folder",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/folders/:folder",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/folders/folder",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_folder"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "list_all_metadata_fields_definitions": {
      "provider_intent": "list_all_metadata_fields_definitions",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields",
      "text": "List all metadata fields definitions",
      "category": "Admin / Metadata fields",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "List all metadata fields definitions",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#get_metadata_fields"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_metadata_field_definition_by_external_id": {
      "provider_intent": "get_metadata_field_definition_by_external_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id",
      "text": "Get metadata field definition by external ID.",
      "category": "Admin / Metadata fields",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get metadata field definition by external ID.",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#get_a_metadata_field_by_external_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "creates_a_new_metadata_field_definition": {
      "provider_intent": "creates_a_new_metadata_field_definition",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields",
      "text": "Creates a new metadata field definition",
      "category": "Admin / Metadata fields",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "field": {
          "type": "object",
          "text": "The metadata field to add. For details see Metadata field structure",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Creates a new metadata field definition",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#create_a_metadata_field"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "restore_entries_in_a_metadata_field_datasource": {
      "provider_intent": "restore_entries_in_a_metadata_field_datasource",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id/datasource_restore",
      "text": "Restore entries in a metadata field datasource",
      "category": "Structured metadata / Metadata",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "external_ids": {
          "type": "array",
          "text": "An array of IDs of datasource entries to restore (unblock).",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Restore entries in a metadata field datasource",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id/datasource_restore",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id/datasource_restore",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#restore_entries_in_a_metadata_field_datasource"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "updates_a_metadata_field_definition_by_external_id": {
      "provider_intent": "updates_a_metadata_field_definition_by_external_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id",
      "text": "Updates a metadata field definition by external ID",
      "category": "Admin / Metadata fields",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "field": {
          "type": "object",
          "text": "The metadata field to update. For details see Metadata field structure.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Updates a metadata field definition by external ID",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#update_a_metadata_field_by_external_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "updates_a_metadata_field_datasource_by_external_id": {
      "provider_intent": "updates_a_metadata_field_datasource_by_external_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id/datasource",
      "text": "Updates a metadata field datasource by external ID",
      "category": "Admin / Metadata fields",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "entries": {
          "type": "object",
          "text": "The datasource enties to update. For details see Datasource values.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Updates a metadata field datasource by external ID",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id/datasource",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id/datasource",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#update_a_metadata_field_datasource"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "deletes_a_metadata_field_by_external_id": {
      "provider_intent": "deletes_a_metadata_field_by_external_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id",
      "text": "Deletes a metadata field by external ID",
      "category": "Admin / Metadata fields",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API)",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API)",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Deletes a metadata field by external ID",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#delete_a_metadata_field_by_external_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "deletes_entries_in_a_metadata_field_datasource_for_a_specified_metadata_field_definition": {
      "provider_intent": "deletes_entries_in_a_metadata_field_datasource_for_a_specified_metadata_field_definition",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id/datasource",
      "text": "Deletes entries in a metadata field datasource for a specified metadata field definition",
      "category": "Admin / Metadata fields",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        },
        "external_ids": {
          "type": "array",
          "text": "An array of IDs of datasource entries to delete.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Deletes entries in a metadata field datasource for a specified metadata field definition",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id/datasource",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id/datasource",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#delete_entries_in_a_metadata_field_datasource"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "returns_a_index_of_all_metadate_rules": {
      "provider_intent": "returns_a_index_of_all_metadate_rules",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_rules",
      "text": "Returns a index of all metadate rules",
      "category": "Admin / Metadata rules",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Returns a index of all metadate rules",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_rules",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_rules",
        "api_ref": "https://cloudinary.com/documentation/conditional_metadata_rules_api#get_metadata_rules"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "creates_a_new_metadata_rule_definition": {
      "provider_intent": "creates_a_new_metadata_rule_definition",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_rules",
      "text": "Creates a new metadata rule definition",
      "category": "Admin / Metadata rules",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "metadata_field_id": {
          "type": "string",
          "text": "The external_id of the metadata field that this rule applies to.",
          "required": true
        },
        "condition": {
          "type": "Object",
          "text": "The condition to evaluate. For details see Condition structure.",
          "required": true
        },
        "result": {
          "type": "Object",
          "text": "The result to apply in the case that the condition is met. For details see Result structure.",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the metadata rule.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Creates a new metadata rule definition",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_rules",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_rules",
        "api_ref": "https://cloudinary.com/documentation/conditional_metadata_rules_api#create_a_metadata_rule"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "updates_a_exising_metadata_rule_definition": {
      "provider_intent": "updates_a_exising_metadata_rule_definition",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_rules/external_id",
      "text": "Updates a exising metadata rule definition",
      "category": "Admin / Metadata rules",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata rule (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "metadata_field_id": {
          "type": "string",
          "text": "The external_id of the metadata field that this rule applies to."
        },
        "condition": {
          "type": "Object",
          "text": "The condition to evaluate. For details see Condition structure."
        },
        "result": {
          "type": "Object",
          "text": "The result to apply in the case that the condition is met. For details see Result structure."
        },
        "name": {
          "type": "string",
          "text": "The name of the metadata rule."
        },
        "state": {
          "type": "string",
          "text": "The current status of the rule useful for inactivating a rule without deleting it. Possible values- active or inactive"
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata rule (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Updates a exising metadata rule definition",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_rules/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_rules/external_id",
        "api_ref": "https://cloudinary.com/documentation/conditional_metadata_rules_api#update_a_metadata_rule_by_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "deletes_a_metadata_rule_by_external_id": {
      "provider_intent": "deletes_a_metadata_rule_by_external_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_rules/external_id",
      "text": "Deletes a metadata rule by external ID",
      "category": "Admin / Metadata rules",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata rule (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata rule (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Deletes a metadata rule by external ID",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_rules/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_rules/external_id",
        "api_ref": "https://cloudinary.com/documentation/conditional_metadata_rules_api#delete_a_metadata_rule_by_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "pings_cloudinary_servers": {
      "provider_intent": "pings_cloudinary_servers",
      "provider_alias_intent": "/v1_1/cloud_name/ping",
      "text": "Pings Cloudinary servers",
      "category": "Admin / Ping",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Pings Cloudinary servers",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/ping",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/ping",
        "api_ref": "https://cloudinary.com/documentation/admin_api#ping"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "lists_resources_assets_with_a_specified_tag": {
      "provider_intent": "lists_resources_assets_with_a_specified_tag",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/tags/tag",
      "text": "Lists resources (assets) with a specified tag",
      "category": "Admin / Resources",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "tag": {
          "type": "string",
          "text": "The assets to return that have this tag.",
          "required": true
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of assets to return (maximum=500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of the following request."
        },
        "direction": {
          "type": "string|number",
          "text": "Control the order of returned assets; according to the created_at date. Note- if a prefix is specified; this parameter is ignored and the results are sorted by public ID. Possible values- desc or -1 (default); asc or 1."
        },
        "tags": {
          "type": "boolean",
          "text": "Whether to include the list of tag names assigned to each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "context": {
          "type": "boolean",
          "text": "Whether to include key-value pairs of contextual metadata associated with each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "moderations": {
          "type": "boolean",
          "text": "Whether to include image moderation status of each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "tag": {
          "type": "string",
          "text": "The assets to return that have this tag.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Lists resources (assets) with a specified tag",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/tags/:tag",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/tags/tag",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_resources_by_tag"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "retrieves_resources_assets_with_a_specified_contextual_metadata_key": {
      "provider_intent": "retrieves_resources_assets_with_a_specified_contextual_metadata_key",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/context",
      "text": "Retrieves resources (assets) with a specified contextual metadata key",
      "category": "Admin / Resources",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "key": {
          "type": "string",
          "text": "Only assets with this contextual metadata key are returned.",
          "required": true
        },
        "value": {
          "type": "string",
          "text": "Only assets with this value for the contextual metadata key are returned. If this parameter is not provided; all assets with the specified contextual metadata key are returned; regardless of the actual value of the key."
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of assets to return (maximum=500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of the following request."
        },
        "direction": {
          "type": "string|number",
          "text": "Control the order of returned assets; according to the created_at date. Note- if a prefix is specified; this parameter is ignored and the results are sorted by public ID. Possible values- desc or -1 (default); asc or 1."
        },
        "tags": {
          "type": "boolean",
          "text": "Whether to include the list of tag names assigned to each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "context": {
          "type": "boolean",
          "text": "Whether to include key-value pairs of contextual metadata associated with each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "moderations": {
          "type": "boolean",
          "text": "Whether to include image moderation status of each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Retrieves resources (assets) with a specified contextual metadata key",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/context",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/context",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_resources_by_context"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "retrieves_resources_assets_with_a_particular_status_from_a_specified_moderation_type": {
      "provider_intent": "retrieves_resources_assets_with_a_particular_status_from_a_specified_moderation_type",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/moderations/moderation_kind/status",
      "text": "Retrieves resources (assets) with a particular status from a specified moderation type",
      "category": "Admin / Resources",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "moderation_kind": {
          "type": "string",
          "text": "The type of moderation list to retrieve. Possible values- manual; webpurify; aws_rek; perception_point."
        },
        "status": {
          "type": "string",
          "text": "The moderation status of assets to retrieve. Possible values- pending; approved; rejected; queued; aborted.\nNote- queued and aborted are relevant only when an asset is marked for multiple moderations."
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of assets to return (maximum=500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of the following request."
        },
        "direction": {
          "type": "string|number",
          "text": "Control the order of returned assets; according to the created_at date. Note- if a prefix is specified; this parameter is ignored and the results are sorted by public ID. Possible values- desc or -1 (default); asc or 1."
        },
        "tags": {
          "type": "boolean",
          "text": "Whether to include the list of tag names assigned to each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "context": {
          "type": "boolean",
          "text": "Whether to include key-value pairs of contextual metadata associated with each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "moderations": {
          "type": "boolean",
          "text": "Whether to include image moderation status of each asset. Default- false.",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "moderation_kind": {
          "type": "string",
          "text": "The type of moderation list to retrieve. Possible values- manual; webpurify; aws_rek; perception_point."
        },
        "status": {
          "type": "string",
          "text": "The moderation status of assets to retrieve. Possible values- pending; approved; rejected; queued; aborted.\nNote- queued and aborted are relevant only when an asset is marked for multiple moderations."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Retrieves resources (assets) with a particular status from a specified moderation type",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/moderations/:moderation_kind/:status",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/moderations/moderation_kind/status",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_resources_in_moderation"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "return_details_of_the_requested_resource_asset_as_well_as_all_its_derived_assets": {
      "provider_intent": "return_details_of_the_requested_resource_asset_as_well_as_all_its_derived_assets",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/type/public_id",
      "text": "Return details of the requested resource (asset) as well as all its derived assets",
      "category": "Admin / Resources",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "type": {
          "type": "string",
          "text": "The delivery type; relevant as a parameter only when using the SDKs (the type is included in the endpoint URL when using the REST API). Possible values- upload; private; authenticated; facebook; twitter; gravatar; youtube; hulu; vimeo; animoto; worldstarhiphop; dailymotion; list. Default- upload"
        },
        "public_id": {
          "type": "string",
          "text": "The public ID of the asset.",
          "required": true
        },
        "colors": {
          "type": "boolean",
          "text": "Whether to include color information- predominant colors and histogram of 32 leading colors. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "media_metadata": {
          "type": "boolean",
          "text": "Whether to include IPTC; XMP; and detailed Exif metadata in the response.\nDefault- false.\nThis parameter applies to both image and video asset types (including audio files). The exact set of metadata fields that gets returned for an asset depends on the asset type.\nNote- Using this parameter also returns the asset's ETag value for all asset types; including raw.",
          "enum": [
            true,
            false
          ]
        },
        "exif": {
          "type": "boolean",
          "text": "Deprecated. Use media_metadata instead. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "image_metadata": {
          "type": "boolean",
          "text": "Deprecated. Use media_metadata instead. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "faces": {
          "type": "boolean",
          "text": "Whether to include a list of coordinates of detected faces. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "quality_analysis": {
          "type": "boolean",
          "text": "Whether to return quality analysis scores for the image. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "accessibility_analysis": {
          "type": "boolean",
          "text": "Whether to return accessibility analysis scores for the image. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "pages": {
          "type": "boolean",
          "text": "Whether to report the number of pages in multi-page documents (e.g.; PDF). Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "phash": {
          "type": "boolean",
          "text": "Whether to include the perceptual hash (pHash) of the uploaded photo for image similarity detection. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "coordinates": {
          "type": "boolean",
          "text": "Whether to include previously specified custom cropping coordinates and faces coordinates. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "versions": {
          "type": "boolean",
          "text": "Whether to include details of all the backed up versions of the asset. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "related": {
          "type": "boolean",
          "text": "Whether to include the list of assets related to this asset. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "related_next_cursor": {
          "type": "string",
          "text": "If there are more than 100 related assets; the related_next_cursor value is returned as part of the response. You can then specify this value as the related_next_cursor parameter of the following request."
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of derived assets to return (maximum=500). Default- 10."
        },
        "derived_next_cursor": {
          "type": "string",
          "text": "If there are more derived images than max_results; the derived_next_cursor value is returned as part of the response. You can then specify this value as the derived_next_cursor parameter of the following request."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "type": {
          "type": "string",
          "text": "The delivery type; relevant as a parameter only when using the SDKs (the type is included in the endpoint URL when using the REST API). Possible values- upload; private; authenticated; facebook; twitter; gravatar; youtube; hulu; vimeo; animoto; worldstarhiphop; dailymotion; list. Default- upload"
        },
        "public_id": {
          "type": "string",
          "text": "The public ID of the asset.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Return details of the requested resource (asset) as well as all its derived assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/:type/:public_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/type/public_id",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_resource"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "filtering_and_retrieving_information_on_all_the_resources_assets_in_your_product_environment": {
      "provider_intent": "filtering_and_retrieving_information_on_all_the_resources_assets_in_your_product_environment",
      "provider_alias_intent": "/v1_1/cloud_name/resources/search",
      "text": "Filtering and retrieving information on all the resources (assets) in your product environment",
      "category": "Admin / Resources",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "expression": {
          "type": "string",
          "text": "The (Lucene-like) string expression specifying the search query. If this parameter is not provided then all resources are listed (up to max_results). For details; see the expressions documentation."
        },
        "sort_by": {
          "type": "array",
          "text": "An array of string values representing a key value pair; where the key is the field to sort by and the value is the direction. Valid sort directions are asc or desc. If this parameter is not provided then the results are sorted by descending creation date. You can specify more than one sort_by parameter; results will be sorted according to the order of the fields provided.\r\nNote- you can also sort the results by relevance if you set the key to score and give a sort direction as the value. Results are considered more relevant if the search term appears in multiple fields or in a more prominent field (e.g.; the public ID field)."
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of assets to return (maximum=500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of the following request."
        },
        "with_field": {
          "type": "string",
          "text": "The name of an additional asset attribute to include for each asset in the response. You can specify more than one with_field parameter. Possible value- context; tags; and for Tier 2 also metadata; image_metadata; and image_analysis."
        },
        "aggregate": {
          "type": "string",
          "text": "(Tier 2 only) The name of a field (attribute) for which an aggregation count should be calculated and returned in the response. You can specify more than one aggregate parameter. Supported values- resource_type; type; pixels (only the image assets in the response are aggregated); duration (only the video assets in the response are aggregated); format; and bytes. For aggregation fields without discrete values; the results are divided into categories. For example-\r\n- bytes are divided into small (<500 kb); medium (500 kb - 5 mb); large (5 mb - 100 mb); and huge (>100 mb).\r\n- Video duration is divided into short (< 3 minutes); medium (3-12 min); and long (> 12 min)."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Filtering and retrieving information on all the resources (assets) in your product environment",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/search",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/search",
        "api_ref": "https://cloudinary.com/documentation/admin_api#search_for_resources"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_one_or_more_of_the_attributes_associated_with_a_specified_resource_asset": {
      "provider_intent": "update_one_or_more_of_the_attributes_associated_with_a_specified_resource_asset",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/type/public_id",
      "text": "Update one or more of the attributes associated with a specified resource (asset)",
      "category": "Admin / Resources",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "type": {
          "type": "string",
          "text": "The delivery type; relevant as a parameter only when using the SDKs (the type is included in the endpoint URL when using the REST API). Possible values- upload; private; authenticated; facebook; twitter; gravatar; youtube; hulu; vimeo; animoto; worldstarhiphop; dailymotion. Default- all."
        },
        "public_id": {
          "type": "string",
          "text": "The public ID of the asset to update.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "display_name": {
          "type": "string",
          "text": "Relevant only for product environments using dynamic folder mode.\nA user-friendly name for the asset.\nDisplay names can have spaces and special characters; but can't include forward slashes (/). This name can be completely different than the asset's public id and its value doesn't impact the delivery URL in any way.\nThe display name is shown in user interface pages such as the Console Media Library; Cloudinary collections; and Cloudinary media portals.\nThough not a best practice; it's possible for the same display name to be used for different assets; even in the same asset folder."
        },
        "unique_display_name": {
          "type": "boolean",
          "text": "Relevant only for product environments using dynamic folder mode.\nIf true; and you've passed a display_name that already exists within the same asset_folder or you specify a new asset_folder value (to move the asset) and the same display name already exists in the target asset folder; a random character suffix will be appended to the display name of this asset to ensure it's uniqueness within the asset folder.\nDefault- false",
          "enum": [
            true,
            false
          ]
        },
        "asset_folder": {
          "type": "string",
          "text": "Relevant only for product environments using dynamic folder mode.\nThe folder where the asset is placed within the Cloudinary repository.\nSetting this value in an update method moves the asset to the specified asset folder; but does not impact the asset’s public ID path."
        },
        "tags": {
          "type": "string",
          "text": "A comma-separated list of tag names to assign to the uploaded asset for later group reference."
        },
        "context": {
          "type": "string",
          "text": "A map (using the SDKs) or pipe-separated list (for REST API calls) of key-value pairs of contextual metadata to attach to an uploaded asset. The contextual metadata values of uploaded files can be retrieved using the Admin API. For example- `alt=My image"
        },
        "metadata": {
          "type": "string",
          "text": "A map (supported for Java SDK only) or pipe-separated list (for REST API calls) of custom metadata fields (by external\\_id) and the values to assign to each of them. For example- in_stock_id=50❘color_id=[\\\"green\\\";\\\"red\\\"].\nSDKs- Supports maps.\nNotes-\nThe =; \" and ❘ characters can be supported as values when escaped with a prepended backslash (\\).\nFor a multi-select field; you can set a maximum of 3000 different metadata values on an asset."
        },
        "face_coordinates": {
          "type": "string",
          "text": "List of coordinates of faces contained in an uploaded image. The specified coordinates are used for cropping uploaded images using the face or faces gravity mode. The specified coordinates override the automatically detected faces. Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face. The coordinates are comma separated while faces are concatenated with a pipe (`"
        },
        "custom_coordinates": {
          "type": "string",
          "text": "Coordinates of an interesting region contained in an uploaded image. The specified coordinates are used for cropping uploaded images using the custom gravity mode. The region is specified by the X & Y coordinates of the top left corner and the width & height of the region. For example- 85;120;220;310."
        },
        "quality_override": {
          "type": "number",
          "text": "Sets a quality value for this asset that will override any automatic quality transformations (q_auto) for this specific asset."
        },
        "moderation_status": {
          "type": "string",
          "text": "Manually set image moderation status or override previously automatically moderated images by approving or rejecting. Possible values- approved; rejected."
        },
        "auto_tagging": {
          "type": "number",
          "text": "Automatically assigns tags to an asset according to detected objects or categories with a confidence score higher than the specified value.\nUse together with the detection parameter for-\nCloudinary AI Content Analysis\nAmazon Rekognition Celebrity Detection\nUse together with the categorization parameter for-\nGoogle Automatic Video Tagging\nGoogle Auto Tagging\nImagga Auto Tagging\nAmazon Rekognition Auto Tagging\nRange- 0.0 to 1.0"
        },
        "detection": {
          "type": "string",
          "text": "Invokes the relevant add-on to return a list of detected content.\nSet to-\n<content-aware model>_[<version>] (e.g. coco_v1) to return a list of detected content using the Cloudinary AI Content Analysis add-on. Can be used together with the auto_tagging parameter to apply tags automatically.\nadv_face to return a list of facial attributes using the Advanced Facial Attribute Detection add-on.\naws_rek_face to return a list of detected celebrities and facial attributes using the Amazon Rekognition Celebrity Detection add-on. Can be used together with the auto_tagging parameter to apply tags automatically.\nRelevant for images only."
        },
        "ocr": {
          "type": "string",
          "text": "Set to adv_ocr to extract all text elements in an image as well as the bounding box coordinates of each detected element using the OCR text detection and extraction add-on.\nRelevant for images only."
        },
        "raw_convert": {
          "type": "string",
          "text": "Asynchronously generates a related file based on the uploaded file.\nSet to aspose to automatically create a PDF or other image format from a raw Office document using the Aspose Document Conversion add-on.\nSet to google_speech to instruct the Google AI Video Transcription add-on to generate an automatic transcript raw file from an uploaded video.\nSet to extract_text to extract all the text from a PDF file and store it in a raw file. The public ID of the generated raw file will be in the format- [pdf_public_id].extract_text.json.\nSee also- Converting raw files."
        },
        "categorization": {
          "type": "string",
          "text": "A comma-separated list of the categorization add-ons to run on the asset. Set to google_tagging; google_video_tagging; imagga_tagging and/or aws_rek_tagging to automatically classify the scenes of the uploaded asset. Can be used together with the auto_tagging parameter to apply tags automatically. See the Google Automatic Video Tagging; Google Auto Tagging; Imagga Auto Tagging and Amazon Rekognition Auto Tagging add-ons for more details."
        },
        "visual_search": {
          "type": "boolean",
          "text": "Whether to index the image for the visual search feature. Default- false.\nRelevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "background_removal": {
          "type": "string",
          "text": "Automatically remove the background of an image using an add-on.\nSet to cloudinary_ai to use the deep-learning based Cloudinary AI Background Removal add-on.\nNote- this feature has been superseded by background removal on the fly.\nSet to pixelz to use the human-powered Pixelz Remove-The-Background Editing add-on service.\nRelevant for images only."
        },
        "access_control": {
          "type": "array",
          "text": "An array of access_types for the asset. The asset is accessible as long as one of the access types is valid. Possible values for each access type-\ntoken - requires either Token-based authentication or Cookie-based authentication for accessing the resource. For example- access_type- 'token'\nanonymous - allows public access to the resource. The anonymous access type should also include start and end dates (in ISO 8601 format) defining when the resource is publicly available. For example- access_type- 'anonymous'; start- '2017-12-15T12-00Z'; end- '2018-01-20T12-00Z'"
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "type": {
          "type": "string",
          "text": "The delivery type; relevant as a parameter only when using the SDKs (the type is included in the endpoint URL when using the REST API). Possible values- upload; private; authenticated; facebook; twitter; gravatar; youtube; hulu; vimeo; animoto; worldstarhiphop; dailymotion. Default- all."
        },
        "public_id": {
          "type": "string",
          "text": "The public ID of the asset to update.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update one or more of the attributes associated with a specified resource (asset)",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/:type/:public_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/type/public_id",
        "api_ref": "https://cloudinary.com/documentation/admin_api#update_details_of_an_existing_resource"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "restores_one_or_more_resources_assets_from_backup": {
      "provider_intent": "restores_one_or_more_resources_assets_from_backup",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/type/restore",
      "text": "Restores one or more resources (assets) from backup",
      "category": "Admin / Resources",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The asset type of the requested assets. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "type": {
          "type": "string",
          "text": "The delivery type of the requested assets; relevant as a parameter only when using the SDKs (the type is included in the endpoint URL when using the REST API). Possible values- upload; private; authenticated; Default- upload."
        }
      },
      "custom_headers": {},
      "body": {
        "public_ids": {
          "type": "array",
          "text": "The public IDs of (deleted or existing) backed up assets to restore (array of up to 100 public_ids). By default; the latest backed up version of the asset is restored. If the versions parameter is specified; the corresponding version of each public ID is restored.",
          "required": true
        },
        "versions": {
          "type": "array",
          "text": "The version of each of the assets to restore. Specify the version_id for each public ID. Use the resource method to list details of backed up versions of an asset."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The asset type of the requested assets. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "type": {
          "type": "string",
          "text": "The delivery type of the requested assets; relevant as a parameter only when using the SDKs (the type is included in the endpoint URL when using the REST API). Possible values- upload; private; authenticated; Default- upload."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Restores one or more resources (assets) from backup",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/:type/restore",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/type/restore",
        "api_ref": "https://cloudinary.com/documentation/admin_api#restore_resources"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_the_access_mode_of_resources_assets_by_public_ids,_by_tag,_or_by_prefix": {
      "provider_intent": "update_the_access_mode_of_resources_assets_by_public_ids,_by_tag,_or_by_prefix",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/upload/update_access_mode",
      "text": "Update the access_mode of resources (assets) by public_id(s), by tag, or by prefix",
      "category": "Admin / Resources",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        }
      },
      "custom_headers": {},
      "body": {
        "access_mode": {
          "type": "string",
          "text": "The new access mode to be set. Possible values- public; authenticated.",
          "required": true
        },
        "One of the following-                \n- public_ids": {
          "type": "array",
          "text": "Update all assets with the specified public IDs (array of up to 100 public_ids).",
          "required": true
        },
        "- prefix": {
          "type": "string",
          "text": "Update all assets where the public ID starts with the specified prefix (up to a maximum of 100 matching original assets).",
          "required": true
        },
        "- tag": {
          "type": "string",
          "text": "Update all assets with the specified tag (up to a maximum of 100 matching original assets).",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update the access_mode of resources (assets) by public_id(s), by tag, or by prefix",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/upload/update_access_mode",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/upload/update_access_mode",
        "api_ref": "https://cloudinary.com/documentation/admin_api#update_access_mode"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "relates_an_asset_to_other_assets_by_public_ids": {
      "provider_intent": "relates_an_asset_to_other_assets_by_public_ids",
      "provider_alias_intent": "/v1_1/cloud_name/resources/related_assets/resource_type/type/public_id",
      "text": "Relates an asset to other assets by public IDs",
      "category": "Admin / Resources",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset is included in the endpoint URL. Note- use video for all video and audio assets; such as .mp3. Possible values- image; raw; video.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type is included in the endpoint URL. Possible values- upload; private; authenticated.",
          "required": true
        },
        "public_id": {
          "type": "string",
          "text": "The public ID of the asset to update.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "assets_to_relate": {
          "type": "array",
          "text": "Relates the asset to all the assets specified in this array of up to 10 assets; specified as resource_type/type/public_id. For example- [\"image/upload/dog\";\"video/authenticated/cat\"]",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset is included in the endpoint URL. Note- use video for all video and audio assets; such as .mp3. Possible values- image; raw; video.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type is included in the endpoint URL. Possible values- upload; private; authenticated.",
          "required": true
        },
        "public_id": {
          "type": "string",
          "text": "The public ID of the asset to update.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Relates an asset to other assets by public IDs",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/related_assets/:resource_type/:type/:public_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/related_assets/resource_type/type/public_id",
        "api_ref": "https://cloudinary.com/documentation/admin_api#add_related_assets"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "unrelates_related_assets_by_public_ids": {
      "provider_intent": "unrelates_related_assets_by_public_ids",
      "provider_alias_intent": "/v1_1/cloud_name/resources/related_assets/resource_type/type/public_id",
      "text": "Unrelates related assets by public IDs",
      "category": "Admin / Resources",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset is included in the endpoint URL. Note- use video for all video and audio assets; such as .mp3. Possible values- image; raw; video.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type is included in the endpoint URL. Possible values- upload; private; authenticated.",
          "required": true
        },
        "public_id": {
          "type": "string",
          "text": "The public ID of the asset to update.",
          "required": true
        },
        "assets_to_unrelate": {
          "type": "array",
          "text": "Unrelates the asset from all the assets specified in this array of assets; specified as resource_type/type/public_id. For example- [\"image/upload/dog\";\"video/authenticated/cat\"]",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset is included in the endpoint URL. Note- use video for all video and audio assets; such as .mp3. Possible values- image; raw; video.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type is included in the endpoint URL. Possible values- upload; private; authenticated.",
          "required": true
        },
        "public_id": {
          "type": "string",
          "text": "The public ID of the asset to update.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Unrelates related assets by public IDs",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/related_assets/:resource_type/:type/:public_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/related_assets/resource_type/type/public_id",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_related_assets"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "deletes_resources_by_public_ids": {
      "provider_intent": "deletes_resources_by_public_ids",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/type",
      "text": "Deletes resources by public IDs",
      "category": "Admin / Resources",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "type": {
          "type": "string",
          "text": "The delivery type; relevant as a parameter only when using the SDKs (the type is included in the endpoint URL when using the REST API). Possible values- upload; private; fetch;authenticated; facebook; twitter; gravatar; youtube; hulu; vimeo; animoto; worldstarhiphop; dailymotion; list. Default- upload."
        },
        "public_ids": {
          "type": "array",
          "text": "delete all assets with the specified public IDs (array of up to 100 public_ids).",
          "required": true
        },
        "prefix": {
          "type": "string",
          "text": "Delete all assets; including derived assets; where the public ID starts with the specified prefix (up to a maximum of 1000 original resources).",
          "required": true
        },
        "all": {
          "type": "boolean",
          "text": "Delete all assets (of the relevant resource_type and type); including derived assets (up to a maximum of 1000 original resources).",
          "required": true,
          "enum": [
            true,
            false
          ]
        },
        "keep_original": {
          "type": "boolean",
          "text": "Whether to delete only the derived assets. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "invalidate": {
          "type": "boolean",
          "text": "Whether to also invalidate the copies of the resource on the CDN. It usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. There are also a number of other important considerations to keep in mind when invalidating files. Note that by default this parameter is not enabled- if you need this parameter enabled; please open a support request. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "next_cursor": {
          "type": "string",
          "text": "When a deletion request has more than 1000 resources to delete; the response includes the partial boolean parameter set to true; as well as a next_cursor value. You can then specify this returned next_cursor value as a parameter of the following deletion request."
        },
        "transformations": {
          "type": "string",
          "text": "Only the derived assets matching this hash of transformation parameters will be deleted."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "type": {
          "type": "string",
          "text": "The delivery type; relevant as a parameter only when using the SDKs (the type is included in the endpoint URL when using the REST API). Possible values- upload; private; fetch;authenticated; facebook; twitter; gravatar; youtube; hulu; vimeo; animoto; worldstarhiphop; dailymotion; list. Default- upload."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Deletes resources by public IDs",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/:type",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/type",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_resources"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "deletes_resources_by_tags": {
      "provider_intent": "deletes_resources_by_tags",
      "provider_alias_intent": "/v1_1/cloud_name/resources/resource_type/tags/tag",
      "text": "Deletes resources by tags",
      "category": "Admin / Resources",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "tag": {
          "type": "string",
          "text": "Delete all assets (and their derivatives) with the specified tag name (up to a maximum of 1000 original assets).",
          "required": true
        },
        "keep_original": {
          "type": "boolean",
          "text": "Whether to delete only the derived assets. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "invalidate": {
          "type": "boolean",
          "text": "Whether to also invalidate the copies of the resource on the CDN. It usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. There are also a number of other important considerations to keep in mind when invalidating files. Note that by default this parameter is not enabled- if you need this parameter enabled; please open a support request. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "next_cursor": {
          "type": "string",
          "text": "When a deletion request has more than 1000 resources to delete; the response includes the partial boolean parameter set to true; as well as a next_cursor value. You can then specify this returned next_cursor value as a parameter of the following deletion request."
        },
        "transformations": {
          "type": "string",
          "text": "Only the derived assets matching this hash of transformation parameters will be deleted."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "tag": {
          "type": "string",
          "text": "Delete all assets (and their derivatives) with the specified tag name (up to a maximum of 1000 original assets).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Deletes resources by tags",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/:resource_type/tags/:tag",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/resource_type/tags/tag",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_resources_by_tags"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "deletes_derived_resources": {
      "provider_intent": "deletes_derived_resources",
      "provider_alias_intent": "/v1_1/cloud_name/derived_resources",
      "text": "Deletes derived resources",
      "category": "Admin / Resources",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "derived_resource_ids": {
          "type": "array",
          "text": "Delete all assets with the specified derived_resource_ids IDs (array of up to 100 IDs). The derived asset IDs are returned when calling the Details of a single resource method.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Deletes derived resources",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/derived_resources",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/derived_resources",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_derived_resources"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "lists_the_list_streaming_profiles": {
      "provider_intent": "lists_the_list_streaming_profiles",
      "provider_alias_intent": "/v1_1/cloud_name/streaming_profiles",
      "text": "Lists the List streaming profiles",
      "category": "Admin / Streaming profiles",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Lists the List streaming profiles",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/streaming_profiles",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/streaming_profiles",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_adaptive_streaming_profiles"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "lists_the_details_of_a_single_streaming_profile_by_name": {
      "provider_intent": "lists_the_details_of_a_single_streaming_profile_by_name",
      "provider_alias_intent": "/v1_1/cloud_name/streaming_profiles/name",
      "text": "Lists the details of a single streaming profile by name",
      "category": "Admin / Streaming profiles",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the streaming profile to get the details of.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the streaming profile to get the details of.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Lists the details of a single streaming profile by name",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/streaming_profiles/:name",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/streaming_profiles/name",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_details_of_a_single_streaming_profile"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_new_streaming_profile": {
      "provider_intent": "create_a_new_streaming_profile",
      "provider_alias_intent": "/v1_1/cloud_name/streaming_profiles",
      "text": "Create a new streaming profile",
      "category": "Admin / Streaming profiles",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The identification name to assign to the new streaming profile. The name is case-insensitive and can contain alphanumeric characters; underscores (_) and hyphens (-).",
          "required": true
        },
        "representations": {
          "type": "array",
          "text": "An array of structures that defines a custom streaming profile.",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "Specifies the transformation parameters for the representation. All video transformation parameters except video_sampling are supported. Common transformation parameters for representations include- width; height (or aspect_ratio); bit_rate; video_codec; audio_codec; sample_rate (or fps); etc.",
          "required": true
        },
        "display_name": {
          "type": "string",
          "text": "A descriptive name for the profile."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a new streaming profile",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/streaming_profiles",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/streaming_profiles",
        "api_ref": "https://cloudinary.com/documentation/admin_api#create_a_streaming_profile"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_the_specified_existing_streaming_profile": {
      "provider_intent": "update_the_specified_existing_streaming_profile",
      "provider_alias_intent": "/v1_1/cloud_name/streaming_profiles/name",
      "text": "Update the specified existing streaming profile",
      "category": "Admin / Streaming profiles",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The identification name to assign to the new streaming profile. The name is case-insensitive and can contain alphanumeric characters; underscores (_) and hyphens (-).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "representations": {
          "type": "array",
          "text": "An array of structures that defines a custom streaming profile.",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "Specifies the transformation parameters for the representation. All video transformation parameters except video_sampling are supported. Common transformation parameters for representations include- width; height (or aspect_ratio); bit_rate; video_codec; audio_codec; sample_rate (or fps); etc.",
          "required": true
        },
        "display_name": {
          "type": "string",
          "text": "A descriptive name for the profile."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The identification name to assign to the new streaming profile. The name is case-insensitive and can contain alphanumeric characters; underscores (_) and hyphens (-).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update the specified existing streaming profile",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/streaming_profiles/:name",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/streaming_profiles/name",
        "api_ref": "https://cloudinary.com/documentation/admin_api#update_an_existing_streaming_profile"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "deletes_and_reverts_the_specified_streaming_profiles": {
      "provider_intent": "deletes_and_reverts_the_specified_streaming_profiles",
      "provider_alias_intent": "/v1_1/cloud_name/streaming_profiles/name",
      "text": "Deletes and reverts the specified streaming profiles",
      "category": "Admin / Streaming profiles",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the streaming profile to delete or revert.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the streaming profile to delete or revert.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Deletes and reverts the specified streaming profiles",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/streaming_profiles/:name",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/streaming_profiles/name",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_or_revert_the_specified_streaming_profile"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "list_tags_used_for_a_specified_resource_type": {
      "provider_intent": "list_tags_used_for_a_specified_resource_type",
      "provider_alias_intent": "/v1_1/cloud_name/tags",
      "text": "List tags used for a specified resource_type",
      "category": "Admin / Tags",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note- use video for all video and audio assets; such as .mp3. Possible values- image (default); raw; video."
        },
        "prefix": {
          "type": "string",
          "text": "Find all tags that start with the specified prefix."
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of assets to return (up to 500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of a following request."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "List tags used for a specified resource_type",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/tags",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/tags",
        "api_ref": "https://cloudinary.com/documentation/admin_api#tags"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "list_all_transformations": {
      "provider_intent": "list_all_transformations",
      "provider_alias_intent": "/v1_1/cloud_name/transformations",
      "text": "List all transformations",
      "category": "Admin / Transformations",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of transformations to return (up to 500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of a following request."
        },
        "named": {
          "type": "boolean",
          "text": "Whether to return only named (true) or unnamed (false) transformations. If this parameter is not included; both named and unnamed transformations will be returned.",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "List all transformations",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/transformations",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/transformations",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_transformations"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "list_details_of_a_single_transformation_specified_by_names_or_prameters": {
      "provider_intent": "list_details_of_a_single_transformation_specified_by_names_or_prameters",
      "provider_alias_intent": "/v1_1/cloud_name/transformations/transformation",
      "text": "List details of a single transformation specified by names or prameters",
      "category": "Admin / Transformations",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "The name of the transformation or the transformation parameters.\nNote If the derived assets do not have an extension; add \"/\" at the end of the transformation value- For example- f_webp;q_80;b_blue;w_200;h_200 becomes f_webp;q_80;b_blue;w_200;h_200/",
          "required": true
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of derived assets to return (up to 500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of a following request."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "The name of the transformation or the transformation parameters.\nNote If the derived assets do not have an extension; add \"/\" at the end of the transformation value- For example- f_webp;q_80;b_blue;w_200;h_200 becomes f_webp;q_80;b_blue;w_200;h_200/",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "List details of a single transformation specified by names or prameters",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/transformations/:transformation",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/transformations/transformation",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_transformation_details"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_new_named_transformation": {
      "provider_intent": "create_a_new_named_transformation",
      "provider_alias_intent": "/v1_1/cloud_name/transformations/name",
      "text": "Create a new named transformation",
      "category": "Admin / Transformations",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the transformation.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "transformation": {
          "type": "string",
          "text": "The transformation parameters.",
          "required": true
        },
        "allowed_for_strict": {
          "type": "boolean",
          "text": "Whether to allow this named transformation when strict transformations are enabled. Default- true.",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the transformation.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a new named transformation",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/transformations/:name",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/transformations/name",
        "api_ref": "https://cloudinary.com/documentation/admin_api#create_a_named_transformation"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_a_specific_transformation": {
      "provider_intent": "update_a_specific_transformation",
      "provider_alias_intent": "/v1_1/cloud_name/transformations/transformation",
      "text": "Update a specific transformation",
      "category": "Admin / Transformations",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "The name of the transformation or a listing of the transformation parameters.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "allowed_for_strict": {
          "type": "boolean",
          "text": "Whether to allow this named transformation when strict transformations are enabled.",
          "enum": [
            true,
            false
          ]
        },
        "unsafe_update": {
          "type": "string",
          "text": "Required when modifying the transformation parameters of an existing named transformation. The new transformation definition for the named transformation.\nBecause the changed definition can be unsafe for (significantly change) assets in production; the change is applied only to newly generated derived assets that reference this named transformation.\nTo apply the change to existing derived assets using this named transformation; invalidate them so that they'll be regenerated with the new definition when next requested."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "The name of the transformation or a listing of the transformation parameters.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update a specific transformation",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/transformations/:transformation",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/transformations/transformation",
        "api_ref": "https://cloudinary.com/documentation/admin_api#update_transformation"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_a_specified_transformation": {
      "provider_intent": "delete_a_specified_transformation",
      "provider_alias_intent": "/v1_1/cloud_name/transformations/transformation",
      "text": "Delete a specified transformation",
      "category": "Admin / Transformations",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "The name of the transformation or the transformation parameters.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "The name of the transformation or the transformation parameters.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete a specified transformation",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/transformations/:transformation",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/transformations/transformation",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_transformation"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "list_all_upload_mappings_by_folder": {
      "provider_intent": "list_all_upload_mappings_by_folder",
      "provider_alias_intent": "/v1_1/cloud_name/upload_mappings",
      "text": "List all upload mappings by folder",
      "category": "Admin / Upload mappings",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of assets to return (up to 500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of a following request."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "List all upload mappings by folder",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_mappings",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_mappings",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_upload_mappings"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "list_the_details_of_single_upload_mapping": {
      "provider_intent": "list_the_details_of_single_upload_mapping",
      "provider_alias_intent": "/v1_1/cloud_name//upload_mappings/folder",
      "text": "List the details of single upload mapping",
      "category": "Admin / Upload mappings",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The name of the folder to map.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The name of the folder to map.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "List the details of single upload mapping",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name//upload_mappings/:folder",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name//upload_mappings/folder",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_upload_mapping"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_new_upload_mapping_folder_and_its_templateurl": {
      "provider_intent": "create_a_new_upload_mapping_folder_and_its_templateurl",
      "provider_alias_intent": "/v1_1/cloud_name/upload_mappings",
      "text": "Create a new upload mapping folder and its template(URL)",
      "category": "Admin / Upload mappings",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "folder": {
          "type": "string",
          "text": "The name of the folder to map.",
          "required": true
        },
        "template": {
          "type": "string",
          "text": "The URL prefix to be mapped to the folder; as part of options.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a new upload mapping folder and its template(URL)",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_mappings",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_mappings",
        "api_ref": "https://cloudinary.com/documentation/admin_api#create_an_upload_mapping"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_an_existing_upload_mapping_folder_with_a_new_template_url": {
      "provider_intent": "update_an_existing_upload_mapping_folder_with_a_new_template_url",
      "provider_alias_intent": "/v1_1/cloud_name/upload_mappings",
      "text": "Update an existing upload mapping folder with a new template (URL)",
      "category": "Admin / Upload mappings",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "folder": {
          "type": "string",
          "text": "The name of the folder to map.",
          "required": true
        },
        "template": {
          "type": "string",
          "text": "The URL prefix to be mapped to the folder; as part of options.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update an existing upload mapping folder with a new template (URL)",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_mappings",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_mappings",
        "api_ref": "https://cloudinary.com/documentation/admin_api#update_an_upload_mapping"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_an_upload_mapping_by_folder_name": {
      "provider_intent": "delete_an_upload_mapping_by_folder_name",
      "provider_alias_intent": "/v1_1/cloud_name/upload_mappings/folder",
      "text": "Delete an upload mapping by folder name",
      "category": "Admin / Upload mappings",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The name of the folder to map.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "folder": {
          "type": "string",
          "text": "The name of the folder to map.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete an upload mapping by folder name",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_mappings/:folder",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_mappings/folder",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_an_upload_mapping"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "lists_the_upload_presets_defined_for_your_product_environment": {
      "provider_intent": "lists_the_upload_presets_defined_for_your_product_environment",
      "provider_alias_intent": "/v1_1/cloud_name/upload_presets",
      "text": "Lists the upload presets defined for your product environment",
      "category": "Admin / Upload presets",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of assets to return (up to 500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of a following request."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Lists the upload presets defined for your product environment",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_presets",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_presets",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_upload_presets"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "lists_the_details_of_a_single_upload_preset": {
      "provider_intent": "lists_the_details_of_a_single_upload_preset",
      "provider_alias_intent": "/v1_1/cloud_name/upload_presets/name",
      "text": "Lists the details of a single upload preset",
      "category": "Admin / Upload presets",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the upload preset.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the upload preset.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Lists the details of a single upload preset",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_presets/:name",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_presets/name",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_upload_preset"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_new_upload_preset": {
      "provider_intent": "create_a_new_upload_preset",
      "provider_alias_intent": "/v1_1/cloud_name/upload_presets",
      "text": "Create a new upload preset",
      "category": "Admin / Upload presets",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name to assign to the new upload preset. If not specified; a random name is generated. If the name is of an existing preset; it will be overwritten."
        },
        "unsigned": {
          "type": "boolean",
          "text": "Whether this upload preset allows unsigned uploading to Cloudinary. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "disallow_public_id": {
          "type": "boolean",
          "text": "Whether this upload preset disables assigning a public_id in the upload call. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "live": {
          "type": "boolean",
          "text": "Whether to enable \"live broadcast\"; so that the upload preset can be used for live streaming.\nDefault- false",
          "enum": [
            true,
            false
          ]
        },
        "use_asset_folder_as_public_id_prefix": {
          "type": "boolean",
          "text": "Relevant only for product environments using dynamic folders mode.\nWhether to automatically apply the path specified in the asset_folder parameter (or the asset folder that's in focus when an asset is uploaded directly to a folder in the Cloudinary Console user interface) as a prefix to the specified or generated public_id value. This ensures that the public ID path will always match the initial asset folder.\nThis can help to retain the behavior that previously existed in fixed folder mode. However; keep in mind that even when this option is used during upload; an asset with a certain public ID path can later be moved to a completely different asset folder hierarchy without impacting the public ID. This option only ensures path matching for the initial upload.\nRelevant only when public_id_prefix (or folder) has not been separately specified.\nDefault- false",
          "enum": [
            true,
            false
          ]
        },
        "file": {
          "type": "file",
          "text": "The file to upload"
        },
        "upload_preset": {
          "type": "string",
          "text": "Name of an upload preset that you defined for your Cloudinary product environment"
        },
        "signature": {
          "type": "string",
          "text": "Used to authenticate the request and based on the parameters you use in the request"
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a new upload preset",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_presets",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_presets",
        "api_ref": "https://cloudinary.com/documentation/admin_api#create_an_upload_preset"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_an_existing_upload_preset": {
      "provider_intent": "update_an_existing_upload_preset",
      "provider_alias_intent": "/v1_1/cloud_name/upload_presets/name",
      "text": "Update an existing upload preset",
      "category": "Admin / Upload presets",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the upload preset."
        }
      },
      "custom_headers": {},
      "body": {
        "unsigned": {
          "type": "boolean",
          "text": "Whether this upload preset allows unsigned uploading to Cloudinary. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "disallow_public_id": {
          "type": "boolean",
          "text": "Whether this upload preset disables assigning a public_id in the upload call. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "live": {
          "type": "boolean",
          "text": "Whether to enable \"live broadcast\"; so that the upload preset can be used for live streaming.",
          "enum": [
            true,
            false
          ]
        },
        "file": {
          "type": "file",
          "text": "The file to upload"
        },
        "upload_preset": {
          "type": "string",
          "text": "Name of an upload preset that you defined for your Cloudinary product environment"
        },
        "signature": {
          "type": "string",
          "text": "Used to authenticate the request and based on the parameters you use in the request"
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the upload preset."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update an existing upload preset",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_presets/:name",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_presets/name",
        "api_ref": "https://cloudinary.com/documentation/admin_api#update_an_upload_preset"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_an_existing_upload_preset": {
      "provider_intent": "delete_an_existing_upload_preset",
      "provider_alias_intent": "/v1_1/cloud_name/upload_presets/name",
      "text": "Delete an existing upload preset",
      "category": "Admin / Upload presets",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the upload preset.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the upload preset.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete an existing upload preset",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/upload_presets/:name",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/upload_presets/name",
        "api_ref": "https://cloudinary.com/documentation/admin_api#delete_an_upload_preset"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "lists_product_environment_usage_details": {
      "provider_intent": "lists_product_environment_usage_details",
      "provider_alias_intent": "/v1_1/cloud_name/usage",
      "text": "Lists product environment usage details",
      "category": "Admin / Usages",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "date": {
          "type": "string",
          "text": "The date for the usage report. Must be within the last 3 months and specified in the format- yyyy-mm-dd. Default- the current date"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Lists product environment usage details",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/usage",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/usage",
        "api_ref": "https://cloudinary.com/documentation/admin_api#get_product_environment_usage_details"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "invalidate_all_caches": {
      "provider_intent": "invalidate_all_caches",
      "provider_alias_intent": "/v1_1/invalidate",
      "text": "Invalidate all caches",
      "category": "Media Optimizer / Cache invalidation",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "urls": {
          "type": "array",
          "text": "An array of up to 20 Media Optimizer URLs to invalidate. These URLs; and any derived media from the specified assets; are invalidated. Transformation parameters can be given in the URLs; but all derived assets are invalidated; regardless.",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Invalidate all caches",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/invalidate",
        "alias_endpoint": "/cloudinary/v1_1/invalidate",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#invalidate_all_caches"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "warm_up_the_cache": {
      "provider_intent": "warm_up_the_cache",
      "provider_alias_intent": "/v1_1/cache_warm_up",
      "text": "Warm up the cache",
      "category": "Media Optimizer / Cache warmup",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "url": {
          "type": "string",
          "text": "The Media Optimizer URL to cache. Any default (base) transformations specified in the relevant optimization profile are applied to the cached media. You can also specify other transformations; which are handled by your mapping function; as part of the URL.",
          "required": true
        },
        "notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to receive the response (a webhook) when the derived media is available on the cache. If not specified; the response is sent to the global Notification URL (if defined) in the Delivery Settings of your Cloudinary Console."
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Warm up the cache",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/cache_warm_up",
        "alias_endpoint": "/cloudinary/v1_1/cache_warm_up",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#warm_up_the_cache"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_all_domains": {
      "provider_intent": "get_all_domains",
      "provider_alias_intent": "/v1_1/domains",
      "text": "Get all domains",
      "category": "Media Optimizer / Domains",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get all domains",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/domains",
        "alias_endpoint": "/cloudinary/v1_1/domains",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#domains"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_all_mapping_functions": {
      "provider_intent": "get_all_mapping_functions",
      "provider_alias_intent": "/v1_1/mapping_functions",
      "text": "Get all mapping functions",
      "category": "Media Optimizer / Mapping functions",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get all mapping functions",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/mapping_functions",
        "alias_endpoint": "/cloudinary/v1_1/mapping_functions",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#get_mapping_functions"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_details_of_a_mapping_function": {
      "provider_intent": "get_details_of_a_mapping_function",
      "provider_alias_intent": "/v1_1/mapping_functions/id",
      "text": "Get details of a mapping function",
      "category": "Media Optimizer / Mapping functions",
      "method": "GET",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the mapping function.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the mapping function.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get details of a mapping function",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/mapping_functions/:id",
        "alias_endpoint": "/cloudinary/v1_1/mapping_functions/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#get_mapping_function_details"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_mapping_function": {
      "provider_intent": "create_a_mapping_function",
      "provider_alias_intent": "/v1_1/mapping_functions",
      "text": "Create a mapping function",
      "category": "Media Optimizer / Mapping functions",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "display_name": {
          "type": "string",
          "text": "The display name of the mapping function.",
          "required": true
        },
        "code": {
          "type": "string",
          "text": "Custom code for the mapping function.",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a mapping function",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/mapping_functions",
        "alias_endpoint": "/cloudinary/v1_1/mapping_functions",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#create_a_mapping_function"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_a_mapping_function": {
      "provider_intent": "update_a_mapping_function",
      "provider_alias_intent": "/v1_1/mapping_functions/id",
      "text": "Update a mapping function",
      "category": "Media Optimizer / Mapping functions",
      "method": "PUT",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the mapping function.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "display_name": {
          "type": "string",
          "text": "The new display name of the mapping function."
        },
        "code": {
          "type": "string",
          "text": "The new custom code for the mapping function."
        }
      },
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the mapping function.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update a mapping function",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/mapping_functions/:id",
        "alias_endpoint": "/cloudinary/v1_1/mapping_functions/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#update_a_mapping_function"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_a_mapping_function": {
      "provider_intent": "delete_a_mapping_function",
      "provider_alias_intent": "/v1_1/mapping_functions/id",
      "text": "Delete a mapping function",
      "category": "Media Optimizer / Mapping functions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the mapping function to delete.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the mapping function to delete.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete a mapping function",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/mapping_functions/:id",
        "alias_endpoint": "/cloudinary/v1_1/mapping_functions/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#delete_a_mapping_function"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_all_media_sources": {
      "provider_intent": "get_all_media_sources",
      "provider_alias_intent": "/v1_1/media_sources",
      "text": "Get all media sources",
      "category": "Media Optimizer / Media sources",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get all media sources",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/media_sources",
        "alias_endpoint": "/cloudinary/v1_1/media_sources",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#get_media_sources"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_details_of_a_media_source": {
      "provider_intent": "get_details_of_a_media_source",
      "provider_alias_intent": "/v1_1/media_sources/id",
      "text": "Get details of a media source",
      "category": "Media Optimizer / Media sources",
      "method": "GET",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the media source.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the media source.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get details of a media source",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/media_sources/:id",
        "alias_endpoint": "/cloudinary/v1_1/media_sources/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#get_media_source_details"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_media_source": {
      "provider_intent": "create_a_media_source",
      "provider_alias_intent": "/v1_1/media_sources",
      "text": "Create a media source",
      "category": "Media Optimizer / Media sources",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "display_name": {
          "type": "string",
          "text": "The display name of the media source configuration.",
          "required": true
        },
        "uri_type": {
          "type": "string",
          "text": "The type of media source.\nPossible values- http; s3; gs; web; cloudinary",
          "required": true
        },
        "config": {
          "type": "object",
          "text": "Configuration parameters required for the type of media source.\nhttp- Not applicable.\ns3 - see AWS S3 settings for details of each parameter-\ns3_bucket_name\ns3_bucket_folder\ns3_access_key\ns3_secret_key\ns3_uri_template\ngs - see Google storage settings for details of each parameter-\ngs_bucket_name\ngs_bucket_folder\ngs_service_account_key\ngs_uri_template\nweb - see Web address settings for details of each parameter-\nweb_uri_base\nweb_headers\nweb_uri_template\ncloudinary - see Cloudinary settings for details of the parameter-\ncld_cloud_name",
          "required": true
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a media source",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/media_sources",
        "alias_endpoint": "/cloudinary/v1_1/media_sources",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#create_a_media_source"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update__a_media_source": {
      "provider_intent": "update__a_media_source",
      "provider_alias_intent": "/v1_1/media_sources/id",
      "text": "Update  a media source",
      "category": "Media Optimizer / Media sources",
      "method": "PUT",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the media source configuration.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "display_name": {
          "type": "string",
          "text": "The new display name of the media source."
        },
        "uri_type": {
          "type": "string",
          "text": "The type of media source.\nPossible values- http; s3; gs; web; cloudinary"
        },
        "config": {
          "type": "object",
          "text": "Configuration parameters required for the type of media source.\nhttp- Not applicable.\ns3 - see AWS S3 settings for details of each parameter-\ns3_bucket_name\ns3_bucket_folder\ns3_access_key\ns3_secret_key\ns3_uri_template\ngs - see Google storage settings for details of each parameter-\ngs_bucket_name\ngs_bucket_folder\ngs_service_account_key\ngs_uri_template\nweb - see Web address settings for details of each parameter-\nweb_uri_base\nweb_headers\nweb_uri_template\ncloudinary - see Cloudinary settings for details of the parameter-\ncld_cloud_name"
        }
      },
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the media source configuration.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update  a media source",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/media_sources/:id",
        "alias_endpoint": "/cloudinary/v1_1/media_sources/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#update_a_media_source"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_a_media_source": {
      "provider_intent": "delete_a_media_source",
      "provider_alias_intent": "/v1_1/media_sources/id",
      "text": "Delete a media source",
      "category": "Media Optimizer / Media sources",
      "method": "DELETE",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the media source to delete.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the media source to delete.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete a media source",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/media_sources/:id",
        "alias_endpoint": "/cloudinary/v1_1/media_sources/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#delete_a_media_source"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_optimization_profiles": {
      "provider_intent": "get_optimization_profiles",
      "provider_alias_intent": "/v1_1/delivery_profiles",
      "text": "Get optimization profiles",
      "category": "Media Optimizer / Optimization profiles",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get optimization profiles",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/delivery_profiles",
        "alias_endpoint": "/cloudinary/v1_1/delivery_profiles",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#get_optimization_profiles"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_optimization_profile_details": {
      "provider_intent": "get_optimization_profile_details",
      "provider_alias_intent": "/v1_1/delivery_profiles/id",
      "text": "Get optimization profile details",
      "category": "Media Optimizer / Optimization profiles",
      "method": "GET",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the optimization profile.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the optimization profile.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get optimization profile details",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/delivery_profiles/:id",
        "alias_endpoint": "/cloudinary/v1_1/delivery_profiles/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#get_optimization_profile_details"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_an_optimization_profile": {
      "provider_intent": "create_an_optimization_profile",
      "provider_alias_intent": "/v1_1/delivery_profiles",
      "text": "Create an optimization profile",
      "category": "Media Optimizer / Optimization profiles",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "display_name": {
          "type": "string",
          "text": "The display name of the optimization profile.",
          "required": true
        },
        "domain_id": {
          "type": "string",
          "text": "The ID of the domain name.",
          "required": true
        },
        "mapping_function_id": {
          "type": "string",
          "text": "The ID of the mapping function.",
          "required": true
        },
        "media_source_ids": {
          "type": "array",
          "text": "An array of media source IDs.",
          "required": true
        },
        "path_prefix": {
          "type": "string",
          "text": "Part of the base URL that identifies media belonging to the optimization profile."
        },
        "default_transformation": {
          "type": "string",
          "text": "The name of the transformation to apply to all media in the profile."
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create an optimization profile",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/delivery_profiles",
        "alias_endpoint": "/cloudinary/v1_1/delivery_profiles",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#create_an_optimization_profile"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_an_optimization_profile": {
      "provider_intent": "update_an_optimization_profile",
      "provider_alias_intent": "/v1_1/delivery_profiles/id",
      "text": "Update an optimization profile",
      "category": "Media Optimizer / Optimization profiles",
      "method": "PUT",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the optimization profile.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "display_name": {
          "type": "string",
          "text": "The new display name of the optimization profile."
        },
        "domain_id": {
          "type": "string",
          "text": "The ID of the domain name."
        },
        "mapping_function_id": {
          "type": "string",
          "text": "The ID of the mapping function."
        },
        "media_source_ids": {
          "type": "array",
          "text": "An array of media source IDs."
        },
        "path_prefix": {
          "type": "string",
          "text": "Part of the base URL that identifies media belonging to the optimization profile."
        },
        "default_transformation": {
          "type": "string",
          "text": "The name of the transformation to apply to all media in the profile."
        },
        "is_enabled": {
          "type": "boolean",
          "text": "The enabled status of the optimization profile.",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the optimization profile.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update an optimization profile",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/delivery_profiles/:id",
        "alias_endpoint": "/cloudinary/v1_1/delivery_profiles/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#update_an_optimization_profile"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_an_optimization_profile": {
      "provider_intent": "delete_an_optimization_profile",
      "provider_alias_intent": "/v1_1/delivery_profiles/id",
      "text": "Delete an optimization profile",
      "category": "Media Optimizer / Optimization profiles",
      "method": "DELETE",
      "type": "API",
      "params": {
        "id": {
          "type": "string",
          "text": "The ID of the optimization profile to delete.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "id": {
          "type": "string",
          "text": "The ID of the optimization profile to delete.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete an optimization profile",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/delivery_profiles/:id",
        "alias_endpoint": "/cloudinary/v1_1/delivery_profiles/id",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#delete_an_optimization_profile"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "ping_media_optimizer_servers": {
      "provider_intent": "ping_media_optimizer_servers",
      "provider_alias_intent": "/v1_1/ping",
      "text": "Ping Media Optimizer servers",
      "category": "Media Optimizer / Ping",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Ping Media Optimizer servers",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/ping",
        "alias_endpoint": "/cloudinary/v1_1/ping",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#ping"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_all_transformations": {
      "provider_intent": "get_all_transformations",
      "provider_alias_intent": "/v1_1/transformations",
      "text": "Get all transformations",
      "category": "Media Optimizer / Transformations",
      "method": "GET",
      "type": "API",
      "params": {
        "max_results": {
          "type": "number",
          "text": "Maximum number of transformations to return (up to 500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of a following request."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get all transformations",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/transformations",
        "alias_endpoint": "/cloudinary/v1_1/transformations",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#get_transformations"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_details_of_a_transformation": {
      "provider_intent": "get_details_of_a_transformation",
      "provider_alias_intent": "/v1_1/transformations/transformation_name",
      "text": "Get details of a transformation",
      "category": "Media Optimizer / Transformations",
      "method": "GET",
      "type": "API",
      "params": {
        "transformation_name": {
          "type": "string",
          "text": "The name of the transformation.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "transformation_name": {
          "type": "string",
          "text": "The name of the transformation.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get details of a transformation",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/transformations/:transformation_name",
        "alias_endpoint": "/cloudinary/v1_1/transformations/transformation_name",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#get_transformation_details"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_named_transformation": {
      "provider_intent": "create_a_named_transformation",
      "provider_alias_intent": "/v1_1/transformations/transformation_name",
      "text": "Create a named transformation",
      "category": "Media Optimizer / Transformations",
      "method": "POST",
      "type": "API",
      "params": {
        "transformation_name": {
          "type": "string",
          "text": "The name of the transformation.",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "The transformation parameters.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "transformation_name": {
          "type": "string",
          "text": "The name of the transformation.",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "The transformation parameters.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a named transformation",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/transformations/:transformation_name",
        "alias_endpoint": "/cloudinary/v1_1/transformations/transformation_name",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#create_a_named_transformation"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_a_transformation": {
      "provider_intent": "update_a_transformation",
      "provider_alias_intent": "/v1_1/transformations/transformation_name",
      "text": "Update a transformation",
      "category": "Media Optimizer / Transformations",
      "method": "PUT",
      "type": "API",
      "params": {
        "transformation_name": {
          "type": "string",
          "text": "The name of the transformation.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "transformation": {
          "type": "string",
          "text": "The new transformation parameters.",
          "required": true
        }
      },
      "path": {
        "transformation_name": {
          "type": "string",
          "text": "The name of the transformation.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update a transformation",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/transformations/:transformation_name",
        "alias_endpoint": "/cloudinary/v1_1/transformations/transformation_name",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#update_a_transformation"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_a_transformation": {
      "provider_intent": "delete_a_transformation",
      "provider_alias_intent": "/v1_1/transformations/transformation_name",
      "text": "Delete a transformation",
      "category": "Media Optimizer / Transformations",
      "method": "DELETE",
      "type": "API",
      "params": {
        "transformation_name": {
          "type": "string",
          "text": "The name of the transformation or the transformation parameters.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "transformation_name": {
          "type": "string",
          "text": "The name of the transformation or the transformation parameters.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete a transformation",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/transformations/:transformation_name",
        "alias_endpoint": "/cloudinary/v1_1/transformations/transformation_name",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#delete_a_transformation"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_account_usage_details": {
      "provider_intent": "get_account_usage_details",
      "provider_alias_intent": "/v1_1/usage",
      "text": "Get account usage details",
      "category": "Media Optimizer / Usages",
      "method": "GET",
      "type": "API",
      "params": {
        "date": {
          "type": "string",
          "text": "The date for the usage report. Must be within the last three months and given in the format- dd-mm-yyyy. Default- the current date."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get account usage details",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/usage",
        "alias_endpoint": "/cloudinary/v1_1/usage",
        "api_ref": "https://cloudinary.com/documentation/media_optimizer_api#usage"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_product_environments": {
      "provider_intent": "get_product_environments",
      "provider_alias_intent": "/v1_1/accounts/account_id/sub_accounts/sub_account_id",
      "text": "Get product environments",
      "category": "Provisioning / Product environments",
      "method": "GET",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "sub_account_id": {
          "type": "string",
          "text": "The ID of the product environment to get.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "sub_account_id": {
          "type": "string",
          "text": "The ID of the product environment to get.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get product environments",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/sub_accounts/:sub_account_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/sub_accounts/sub_account_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#get_product_environment"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_product_environment": {
      "provider_intent": "create_product_environment",
      "provider_alias_intent": "/v1_1/accounts/account_id/sub_accounts",
      "text": "Create product environment",
      "category": "Provisioning / Product environments",
      "method": "POST",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The display name as shown in the Cloudinary Console.",
          "required": true
        },
        "cloud_name": {
          "type": "string",
          "text": "A case-insensitive string comprised of between 2-128 alphanumeric and hyphen characters; starting with a letter. Note that cloud names must be unique across all Cloudinary accounts. An error is returned if the requested name already exists. Default- a unique string automatically generated by Cloudinary."
        },
        "base_sub_account_id": {
          "type": "string",
          "text": "The ID of another product environment; from which to copy all of the following settings- Size limits; Timed limits; and Flags. The parameter is called base_account in some SDKs."
        },
        "custom_attributes": {
          "type": "object",
          "text": "Any custom attributes you want to associate with the product environment; as a map/hash of key/value pairs."
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create product environment",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/sub_accounts",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/sub_accounts",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#create_product_environment"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_product_environment": {
      "provider_intent": "update_product_environment",
      "provider_alias_intent": "/v1_1/accounts/account_id/sub_accounts/sub_account_id",
      "text": "Update product environment",
      "category": "Provisioning / Product environments",
      "method": "PUT",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "sub_account_id": {
          "type": "string",
          "text": "The ID of the product environment to update.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The display name as shown in the Cloudinary Console."
        },
        "cloud_name": {
          "type": "string",
          "text": "A case-insensitive cloud name comprised of between 2-128 alphanumeric and hyphen characters; starting with a letter. Note that cloud names must be unique across all Cloudinary accounts. An error is returned if the requested name already exists. Note- Can only be changed for accounts with fewer than 1000 images."
        },
        "custom_attributes": {
          "type": "object",
          "text": "Any custom attributes you want to associate with the product environment; as a map/hash of key/value pairs."
        },
        "enabled": {
          "type": "boolean",
          "text": "Whether the product environment is enabled. Default- true",
          "enum": [
            true,
            false
          ]
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "sub_account_id": {
          "type": "string",
          "text": "The ID of the product environment to update.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update product environment",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/sub_accounts/:sub_account_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/sub_accounts/sub_account_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#update_product_environment"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_product_environment": {
      "provider_intent": "delete_product_environment",
      "provider_alias_intent": "/v1_1/accounts/account_id/sub_accounts/sub_account_id",
      "text": "Delete product environment",
      "category": "Provisioning / Product environments",
      "method": "DELETE",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "sub_account_id": {
          "type": "string",
          "text": "The ID of the product environment to delete.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "sub_account_id": {
          "type": "string",
          "text": "The ID of the product environment to delete.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete product environment",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/sub_accounts/:sub_account_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/sub_accounts/sub_account_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#delete_product_environment"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_groups": {
      "provider_intent": "get_user_groups",
      "provider_alias_intent": "/v1_1/accounts/account_id/user_groups",
      "text": "Get user groups",
      "category": "Provisioning / User group",
      "method": "GET",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get user groups",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/user_groups",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/user_groups",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#get_users"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_a_user_group": {
      "provider_intent": "get_a_user_group",
      "provider_alias_intent": "/v1_1/accounts/account_id/user_groups/group_id",
      "text": "Get a user group",
      "category": "Provisioning / User group",
      "method": "GET",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group to get.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group to get.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get a user group",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/user_groups/:group_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/user_groups/group_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#get_user"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_the_users_in_a_user_group": {
      "provider_intent": "get_the_users_in_a_user_group",
      "provider_alias_intent": "/v1_1/accounts/account_id/user_groups/group_id/users",
      "text": "Get the users in a user group",
      "category": "Provisioning / User group",
      "method": "GET",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get the users in a user group",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/user_groups/:group_id/users",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/user_groups/group_id/users",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#get_user_group_users"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_user_group": {
      "provider_intent": "create_a_user_group",
      "provider_alias_intent": "/v1_1/accounts/account_id/user_groups",
      "text": "Create a user group",
      "category": "Provisioning / User group",
      "method": "POST",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name for the user group.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a user group",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/user_groups",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/user_groups",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#create_user_group"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "add_a_user_to_a_group": {
      "provider_intent": "add_a_user_to_a_group",
      "provider_alias_intent": "/v1_1/accounts/account_id/user_groups/group_id/users/user_id",
      "text": "Add a user to a group",
      "category": "Provisioning / User group",
      "method": "POST",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Add a user to a group",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/user_groups/:group_id/users/:user_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/user_groups/group_id/users/user_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#add_user_to_group"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_a_user_group": {
      "provider_intent": "update_a_user_group",
      "provider_alias_intent": "/v1_1/accounts/account_id/user_groups/group_id",
      "text": "Update a user group",
      "category": "Provisioning / User group",
      "method": "PUT",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group to update.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name for the user group.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group to update.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update a user group",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/user_groups/:group_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/user_groups/group_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#update_user_group"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_a_user_group": {
      "provider_intent": "delete_a_user_group",
      "provider_alias_intent": "/v1_1/accounts/account_id/user_groups/group_id",
      "text": "Delete a user group",
      "category": "Provisioning / User group",
      "method": "DELETE",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group to delete.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group to delete.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete a user group",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/user_groups/:group_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/user_groups/group_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#delete_user_group"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "remove_a_user_group": {
      "provider_intent": "remove_a_user_group",
      "provider_alias_intent": "/v1_1/accounts/account_id/user_groups/group_id/users/user_id",
      "text": "Remove a user group",
      "category": "Provisioning / User group",
      "method": "DELETE",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "group_id": {
          "type": "string",
          "text": "The ID of the user group.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Remove a user group",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/user_groups/:group_id/users/:user_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/user_groups/group_id/users/user_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#remove_user_from_group"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users": {
      "provider_intent": "get_users",
      "provider_alias_intent": "/v1_1/accounts/account_id/users",
      "text": "Get users",
      "category": "Provisioning / Users",
      "method": "GET",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "pending": {
          "type": "boolean",
          "text": "Whether to only return pending users. Default- false (all users)",
          "enum": [
            true,
            false
          ]
        },
        "ids": {
          "type": "array",
          "text": "A list (SDKs wrap as an array) of up to 100 user IDs. When provided; other parameters are ignored."
        },
        "prefix": {
          "type": "string",
          "text": "Returns users where the name begins with the specified case-insensitive string."
        },
        "sub_account_id": {
          "type": "string",
          "text": "Only returns users who have access to the specified account."
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get users",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/users",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/users",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#get_users"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user": {
      "provider_intent": "get_user",
      "provider_alias_intent": "/v1_1/accounts/account_id/users/user_id",
      "text": "Get user",
      "category": "Provisioning / Users",
      "method": "GET",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to get.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to get.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get user",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/users/:user_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/users/user_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#get_user"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_user": {
      "provider_intent": "create_user",
      "provider_alias_intent": "/v1_1/accounts/account_id/users",
      "text": "Create user",
      "category": "Provisioning / Users",
      "method": "POST",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The user's name.",
          "required": true
        },
        "email": {
          "type": "string",
          "text": "A unique email address; which serves as the login name and notification address.",
          "required": true
        },
        "role": {
          "type": "string",
          "text": "The role to assign. Possible values- master_admin; admin; billing; technical_admin; reports; media_library_admin; media_library_user",
          "required": true
        },
        "sub_account_ids": {
          "type": "array",
          "text": "A comma-separated list (SDKs wrap as an array) of product environment IDs that this user can access. Note- This parameter is ignored if the role is specified as master_admin. Default- all product environments."
        },
        "enabled": {
          "type": "boolean",
          "text": "Whether the user is enabled. Default- true",
          "enum": [
            true,
            false
          ]
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create user",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/users",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/users",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#create_user"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_user": {
      "provider_intent": "update_user",
      "provider_alias_intent": "/v1_1/accounts/account_id/sub_accounts/user_id",
      "text": "Update user",
      "category": "Provisioning / Users",
      "method": "PUT",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to update.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The user's name."
        },
        "email": {
          "type": "string",
          "text": "A unique email address; which serves as the login name and notification address."
        },
        "role": {
          "type": "string",
          "text": "The role to assign. Possible values- master_admin; admin; billing; technical_admin; reports; media_library_admin; media_library_user"
        },
        "sub_account_ids": {
          "type": "string",
          "text": "A comma-separated list (SDKs wrap as an array) of product environment IDs that this user can access. Note- This parameter is ignored if the role is specified as master_admin."
        },
        "enabled": {
          "type": "boolean",
          "text": "Whether the user is enabled.",
          "enum": [
            true,
            false
          ]
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to update.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update user",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/sub_accounts/:user_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/sub_accounts/user_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#update_user"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user": {
      "provider_intent": "delete_user",
      "provider_alias_intent": "/v1_1/accounts/account_id/users/user_id",
      "text": "Delete user",
      "category": "Provisioning / Users",
      "method": "DELETE",
      "type": "API",
      "params": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to update.",
          "required": true
        },
        "options": {
          "type": "object",
          "text": "See Configuration parameters."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "string",
          "text": "The User account id.",
          "required": true
        },
        "user_id": {
          "type": "string",
          "text": "The ID of the user to update.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete user",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/accounts/:account_id/users/:user_id",
        "alias_endpoint": "/cloudinary/v1_1/accounts/account_id/users/user_id",
        "api_ref": "https://cloudinary.com/documentation/provisioning_api#delete_user"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "find_the_specific_assets_in_your_product_environment": {
      "provider_intent": "find_the_specific_assets_in_your_product_environment",
      "provider_alias_intent": "/v1_1/cloud_name/resources/search",
      "text": "Find the specific assets in your product environment",
      "category": "Search / Search method",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "expression": {
          "type": "string",
          "text": "The (Lucene-like) string expression specifying the search query. If this parameter is not provided then all resources are listed (up to max_results). For details; see the expressions documentation."
        },
        "sort_by": {
          "type": "array",
          "text": "An array of string values representing a key value pair; where the key is the field to sort by and the value is the direction. Valid sort directions are asc or desc. If this parameter is not provided then the results are sorted by descending creation date. You can specify more than one sort_by parameter; results will be sorted according to the order of the fields provided.\r\nNote- you can also sort the results by relevance if you set the key to score and give a sort direction as the value. Results are considered more relevant if the search term appears in multiple fields or in a more prominent field (e.g.; the public ID field)."
        },
        "max_results": {
          "type": "number",
          "text": "Maximum number of assets to return (maximum=500). Default- 10."
        },
        "next_cursor": {
          "type": "string",
          "text": "When a request has more results to return than max_results; the next_cursor value is returned as part of the response. You can then specify this value as the next_cursor parameter of the following request."
        },
        "with_field": {
          "type": "string",
          "text": "The name of an additional asset attribute to include for each asset in the response. You can specify more than one with_field parameter. Possible value- context; tags; and for Tier 2 also metadata; image_metadata; and image_analysis."
        },
        "aggregate": {
          "type": "string",
          "text": "(Tier 2 only) The name of a field (attribute) for which an aggregation count should be calculated and returned in the response. You can specify more than one aggregate parameter. Supported values- resource_type; type; pixels (only the image assets in the response are aggregated); duration (only the video assets in the response are aggregated); format; and bytes. For aggregation fields without discrete values; the results are divided into categories. For example-\r\n- bytes are divided into small (<500 kb); medium (500 kb - 5 mb); large (5 mb - 100 mb); and huge (>100 mb).\r\n- Video duration is divided into short (< 3 minutes); medium (3-12 min); and long (> 12 min)."
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Find the specific assets in your product environment",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/resources/search",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resources/search",
        "api_ref": "https://cloudinary.com/documentation/search_api#search_method"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_metadata_rules": {
      "provider_intent": "get_metadata_rules",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_rules",
      "text": "Get metadata rules",
      "category": "Structured metadata / Conditional metadata rules",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get metadata rules",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_rules",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_rules",
        "api_ref": "https://cloudinary.com/documentation/conditional_metadata_rules_api#get_metadata_rules"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_metadata_rule": {
      "provider_intent": "create_a_metadata_rule",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_rules",
      "text": "Create a metadata rule",
      "category": "Structured metadata / Conditional metadata rules",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "metadata_field_id": {
          "type": "string",
          "text": "The external_id of the metadata field that this rule applies to.",
          "required": true
        },
        "condition": {
          "type": "object",
          "text": "The condition to evaluate. For details see Condition structure.",
          "required": true
        },
        "result": {
          "type": "object",
          "text": "The result to apply in the case that the condition is met. For details see Result structure.",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the metadata rule.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a metadata rule",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_rules",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_rules",
        "api_ref": "https://cloudinary.com/documentation/conditional_metadata_rules_api#create_a_metadata_rule"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_a_metadata_rule_by_id": {
      "provider_intent": "update_a_metadata_rule_by_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_rules/external_id",
      "text": "Update a metadata rule by id",
      "category": "Structured metadata / Conditional metadata rules",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata rule (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "metadata_field_id": {
          "type": "string",
          "text": "The external_id of the metadata field that this rule applies to."
        },
        "condition": {
          "type": "object",
          "text": "The condition to evaluate. For details see Condition structure."
        },
        "result": {
          "type": "object",
          "text": "The result to apply in the case that the condition is met. For details see Result structure."
        },
        "name": {
          "type": "string",
          "text": "The name of the metadata rule."
        },
        "state": {
          "type": "string",
          "text": "The current status of the rule; useful for inactivating a rule without deleting it. Possible values- active or inactive"
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata rule (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update a metadata rule by id",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_rules/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_rules/external_id",
        "api_ref": "https://cloudinary.com/documentation/conditional_metadata_rules_api#update_a_metadata_rule_by_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_a_metadata_rule_by_id": {
      "provider_intent": "delete_a_metadata_rule_by_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_rules/external_id",
      "text": "Delete a metadata rule by id",
      "category": "Structured metadata / Conditional metadata rules",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata rule (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata rule (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete a metadata rule by id",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_rules/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_rules/external_id",
        "api_ref": "https://cloudinary.com/documentation/conditional_metadata_rules_api#delete_a_metadata_rule_by_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_metadata_field": {
      "provider_intent": "get_metadata_field",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields",
      "text": "Get metadata field",
      "category": "Structured metadata / Metadata",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get metadata field",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#get_metadata_fields"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_a_metadata_field_by_external_id": {
      "provider_intent": "get_a_metadata_field_by_external_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id",
      "text": "Get a metadata field by external ID",
      "category": "Structured metadata / Metadata",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Get a metadata field by external ID",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#get_a_metadata_field_by_external_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "create_a_metadata_field_": {
      "provider_intent": "create_a_metadata_field_",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields",
      "text": "Create a metadata field",
      "category": "Structured metadata / Metadata",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "field": {
          "type": "object",
          "text": "The metadata field to add. For details see Metadata field structure.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Create a metadata field",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#create_a_metadata_field"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_a_metadata_field_by_external_id": {
      "provider_intent": "update_a_metadata_field_by_external_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id",
      "text": "Update a metadata field by external ID",
      "category": "Structured metadata / Metadata",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "field": {
          "type": "object",
          "text": "The metadata field to update. For details see Metadata field structure.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update a metadata field by external ID",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#update_a_metadata_field_by_external_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "update_a_metadata_field_datasource": {
      "provider_intent": "update_a_metadata_field_datasource",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id/datasource",
      "text": "Update a metadata field datasource",
      "category": "Structured metadata / Metadata",
      "method": "PUT",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "entries": {
          "type": "object",
          "text": "The datasource enties to update. For details see Datasource values.",
          "required": true
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Update a metadata field datasource",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id/datasource",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id/datasource",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#update_a_metadata_field_datasource"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_a_metadata_field_by_external_id": {
      "provider_intent": "delete_a_metadata_field_by_external_id",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id",
      "text": "Delete a metadata field by external ID",
      "category": "Structured metadata / Metadata",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete a metadata field by external ID",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#delete_a_metadata_field_by_external_id"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_entries_in_a_metadata_field_datasource": {
      "provider_intent": "delete_entries_in_a_metadata_field_datasource",
      "provider_alias_intent": "/v1_1/cloud_name/metadata_fields/external_id/datasource",
      "text": "Delete entries in a metadata field datasource",
      "category": "Structured metadata / Metadata",
      "method": "DELETE",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        },
        "external_ids": {
          "type": "array",
          "text": "An array of IDs of datasource entries to delete.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "external_id": {
          "type": "string",
          "text": "The ID of the metadata field (included in the endpoint URL when using the REST API).",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Delete entries in a metadata field datasource",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/metadata_fields/:external_id/datasource",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/metadata_fields/external_id/datasource",
        "api_ref": "https://cloudinary.com/documentation/metadata_api#delete_entries_in_a_metadata_field_datasource"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "creates_a_collage_from_existing_assets": {
      "provider_intent": "creates_a_collage_from_existing_assets",
      "provider_alias_intent": "/v1_1/cloud_name/image/create_collage",
      "text": "Creates a collage from existing assets",
      "category": "Upload / Assets generation",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "manifest_json": {
          "type": "string",
          "text": "The collage specific manifest transformation as stringified JSON that specifies the assets to use as well as the dimensions and layout of the collage; color spacing and any image specific transformations. See the collage generation reference for full details on syntax.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "upload_preset": {
          "type": "string",
          "text": "(Required for unsigned uploading / optional for signed uploading) Name of an upload preset that you defined for your Cloudinary product environment. An upload preset consists of upload parameters centrally managed using the Admin API or from the Upload page of your Console Settings. An upload preset may be marked as unsigned; which allows unsigned uploading directly from the browser and restricts the optional parameters to- public_id; folder; tags; context; face_coordinates and custom_coordinates.",
          "required": true
        },
        "public_id": {
          "type": "string",
          "text": "The identifier that is used for accessing the image collage. The Public ID may contain a full path including folders separated by a slash (/).\r\nIf not specified; then the Public ID of the collage will be comprised of random characters.\r\nNote- The Public ID value for collages should not include a file extension."
        },
        "transformation": {
          "type": "string",
          "text": "A transformation to apply to the collage after it has been generated. This parameter is given as a comma-separated list of transformations; and separated with a slash for chained transformations."
        },
        "overwrite": {
          "type": "boolean",
          "text": "Whether to overwrite existing assets with the same Public ID. When set to false; a response is returned immediately if an asset with the same Public ID was found.\r\nWhen overwriting assets; if you include versions in your delivery URLs; you will need to update the URLs with the new version number to deliver the new asset. If you don't include versions; you will need to invalidate the old assets on the CDN server cache.\r\nDefault- true (when using unsigned upload; the default is false and cannot be changed to true).\r\nImportant- Depending on your product environment setup; overwriting an asset may clear the tags; contextual; and structured metadata values for that asset. If you have a Master admin role; you can change this behavior for your product environment in the Media Library Preferences pane; so that these field values are retained when new version assets overwrite older ones (unless you specify different values for the tags; context; or metadata parameters as part of your upload).",
          "enum": [
            true,
            false
          ]
        },
        "tags": {
          "type": "string",
          "text": "A comma-separated list of tag names to assign to the collage for later group reference. For example- animal;dog."
        },
        "notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to notify your application (a webhook) when the process has completed. If not specified; the response is sent to the global Notification URL (if defined) in the Upload settings of your Cloudinary Console."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Creates a collage from existing assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/image/create_collage",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/image/create_collage",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#create_collage"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "creates_a_slideshow_from_existing_assets": {
      "provider_intent": "creates_a_slideshow_from_existing_assets",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/create_slideshow",
      "text": "Creates a slideshow from existing assets",
      "category": "Upload / Assets generation",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Creates a slideshow from existing assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/create_slideshow",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/create_slideshow",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#create_slideshow"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "creates_a_video_from_existing_assets": {
      "provider_intent": "creates_a_video_from_existing_assets",
      "provider_alias_intent": "/v1_1/cloud_name/video/create_video",
      "text": "Creates a video from existing assets",
      "category": "Upload / Assets generation",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "manifest_json": {
          "type": "string",
          "text": "The video specific manifest transformation as stringified JSON that specifies the assets to use as well as tracks; clips; keyframes; durations; transitions and effects. See the video generation reference for full details on syntax.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "upload_preset": {
          "type": "string",
          "text": "(Required for unsigned uploading / optional for signed uploading) Name of an upload preset that you defined for your Cloudinary product environment. An upload preset consists of upload parameters centrally managed using the Admin API or from the Upload page of your Console Settings. An upload preset may be marked as unsigned; which allows unsigned uploading directly from the browser and restricts the optional parameters to- public_id; folder; tags; context; face_coordinates and custom_coordinates.",
          "required": true
        },
        "public_id": {
          "type": "string",
          "text": "The identifier that is used for accessing or delivering the video. The Public ID may contain a full path including folders separated by a slash (/).\r\nIf not specified; then the Public ID of the video will be comprised of random characters.\r\nNote- The Public ID value for videos should not include a file extension."
        },
        "transformation": {
          "type": "string",
          "text": "A transformation to apply to the video after it has been generated. This parameter is given as a comma-separated list of transformations; and separated with a slash for chained transformations.\r\noverwrite",
          "enum": [
            "boolean"
          ]
        },
        "is returned immediately if an asset with the same Public ID was found.\r\nWhen overwriting assets; if you include versions in your delivery URLs; you will need to update the URLs with the new version number to deliver the new asset. If you don't include versions; you will need to invalidate the old assets on the CDN server cache.\r\nDefault- true (when using unsigned upload; the default is false and cannot be changed to true).\r\nImportant- Depending on your product environment setup; overwriting an asset may clear the tags; contextual; and structured metadata values for that asset. If you have a Master admin role; you can change this behavior for your product environment in the Media Library Preferences pane; so that these field values are retained when new version assets overwrite older ones (unless you specify different values for the tags; context; or metadata parameters as part of your upload).": {
          "type": ""
        },
        "tags": {
          "type": "string",
          "text": "A comma-separated list of tag names to assign to the video for later group reference. For example- animal;dog."
        },
        "notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to notify your application (a webhook) when the process has completed. If not specified; the response is sent to the global Notification URL (if defined) in the Upload page of your Console Settings."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Creates a video from existing assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/video/create_video",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/video/create_video",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#create_video"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "derives_images_for_the_individual_pages_in_a_muli-page_file": {
      "provider_intent": "derives_images_for_the_individual_pages_in_a_muli-page_file",
      "provider_alias_intent": "/v1_1/cloud_name/image/explode",
      "text": "Derives images for the individual pages in a muli-page file",
      "category": "Upload / Assets generation",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "public_id": {
          "type": "string",
          "text": "The identifier of the uploaded multi-page file (PDF or animated GIF).\nNote- The public ID for images does not include a file extension.",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "A transformation to run on all the pages before storing them as derived images. This parameter is given as a comma-separated list of transformations; and separated with a slash for chained transformations.\nAt minimum; you must pass the page transformation with the value all. If you supply additional transformations; you must deliver the image using the same relative order of the page and the other transformations. If you use a different order when you deliver; then it is considered a different transformation; and will be generated on the fly as a new derived image.SDKs- Supports a hash of transformation parameters (or an array of hashes for chained transformations).\nNote- When using the SDK for a dynamically-typed language; the transformation parameters can be specified directly without using this transformation parameter; as seen in the examples for Ruby; PHP; Python; and Node.js below.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The specific file type of the asset. Valid values- upload; private and authenticated. Default- upload."
        },
        "format": {
          "type": "string",
          "text": "An optional format to convert the images before storing them in your Cloudinary product environment. Default- png."
        },
        "notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to notify your application (a webhook) when the process has completed."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Derives images for the individual pages in a muli-page file",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/image/explode",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/image/explode",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#explode"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "creates_a_archive_file_from_existing_assets": {
      "provider_intent": "creates_a_archive_file_from_existing_assets",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/generate_archive",
      "text": "Creates a archive file from existing assets",
      "category": "Upload / Assets generation",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of assets to include. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; video; all. Default- image.\nNotes-\nUse the video resource type to request video assets as well as for audio files; such as .mp3.\nWhen using the download_folders SDK method; the default is all."
        }
      },
      "custom_headers": {},
      "body": {
        "tags": {
          "type": "string",
          "text": "A comma-separated list of tag names. All assets with the specified tags are included in the archive. Up to 20 tags are supported. For example- animal;dogSDKs- Supports arrays. For example- ['animal'; 'dog']",
          "required": true
        },
        "public_ids": {
          "type": "string",
          "text": "A comma-separated list of public IDs for the specific assets to be included in the archive. Up to 1000 public IDs are supported. SDKs- Supports arrays.",
          "required": true
        },
        "prefixes": {
          "type": "string",
          "text": "A comma-separated list of prefixes of public IDs (e.g.; folders). Setting this parameter to a slash (/) is a shortcut for including all assets in the product environment for the given resource_type and type (up to the max files limit). Up to 20 prefixes are supported.SDKs- Supports arrays.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The specific file type of assets to include in the archive (upload/private/authenticated). If tags are specified as a filter then all types are included. Default- upload."
        },
        "transformations": {
          "type": "string",
          "text": "A transformation to run on all the derived assets before storing them in your Cloudinary product environment. This parameter is given as a comma-separated list of transformations; and separated with a slash for chained transformations. If this parameter is not specified then the original assets are included in the archive. If you are including multiple asset types in your archive; make sure the transformations you specify are supported for all assets that will be included in the archive.SDKs- Supports a hash of transformation parameters (or an array of hashes for chained transformations).\r\nNote- When using the SDK for a dynamically-typed language; the transformation parameters can be specified directly without using the transformation parameter."
        },
        "mode": {
          "type": "string",
          "text": "(Only relevant when using the REST API - not for use with SDKs) Determines how to generate and deliver the archive-\r\ndownload - generates and delivers the archive file without storing it in your product environment.\r\ncreate - creates and stores it as a raw asset in your Cloudinary product environment (does not deliver the archive file itself; but returns a JSON response with the URLs for accessing the archive file).\r\ncreate_and_download - creates; stores AND delivers the archive file.\r\nDefault- create."
        },
        "target_format": {
          "type": "string",
          "text": "(Only relevant when using the REST API or the 'archive' SDK methods - not for use with the 'zip' SDK methods)The format for the generated archive- zip or tgz. Default- zip."
        },
        "target_public_id": {
          "type": "string",
          "text": "The name to use for the generated file-\r\nWhen the mode parameter is set to create (or when using one of the create* SDK methods); this parameter defines the Public ID to assign to the generated archive.\r\nWhen the mode parameter is set to download (or when using one of the download* SDK methods); this parameter defines the filename of the downloaded archive file.\r\nIf not specified; a random Public ID (or download filename) is generated."
        },
        "flatten_folders": {
          "type": "boolean",
          "text": "Determines whether to flatten all files to be in the root of the archive file (no sub-folders). Any folder information included in the Public ID is stripped and a numeric counter is added to the file name in the case of a name conflict. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "flatten_transformations": {
          "type": "boolean",
          "text": "If multiple transformations are also applied; determines whether to flatten the folder structure of the derived assets and store the transformation details on the file name instead. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "skip_transformation_name": {
          "type": "boolean",
          "text": "Determines whether to strip all transformation details from file names and add a numeric counter to a file name in the case of a name conflict. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "allow_missing": {
          "type": "boolean",
          "text": "Allows generation of the archive if any of the supplied Public IDs are not found; instead of returning an error. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "expires_at": {
          "type": "number",
          "text": "(Only relevant when using the 'download' SDK methods and the 'download' mode in REST API calls) The date (UNIX time in seconds) for the URL expiration (e.g.; 1415060076). Default- 1 hour from the time that the URL is generated."
        },
        "use_original_filename": {
          "type": "boolean",
          "text": "Whether to use the original file name of the included assets (if available) instead of the public ID. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "async": {
          "type": "boolean",
          "text": "(Only relevant when using the 'create' SDK methods and the 'create' mode in REST API calls) Whether to perform the archive generation in the background (asynchronously). Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "notification_url": {
          "type": "string",
          "text": "(Only relevant when using the 'create' SDK methods and the 'create' mode in REST API calls) An HTTP or HTTPS URL to notify your application (a webhook) when the archive creation process has completed. If not specified for create operations; the response is sent to the global Notification URL (if defined) in the Upload page of your Console Settings."
        },
        "target_tags": {
          "type": "string",
          "text": "(Only relevant when using the 'create' SDK methods and the 'create' mode in REST API calls) A comma-separated list of tag names to assign to the generated archive. For example- animal;dogSDKs- Supports arrays. For example- ['animal'; 'dog']"
        },
        "keep_derived": {
          "type": "boolean",
          "text": "Whether to keep the derived assets used for generating the archive. Default- false.",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of assets to include. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; video; all. Default- image.\nNotes-\nUse the video resource type to request video assets as well as for audio files; such as .mp3.\nWhen using the download_folders SDK method; the default is all."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Creates a archive file from existing assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/generate_archive",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/generate_archive",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#generate_archive"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "generates_animated_images,_videos,_or_pdfs_from_existing_images": {
      "provider_intent": "generates_animated_images,_videos,_or_pdfs_from_existing_images",
      "provider_alias_intent": "/v1_1/cloud_name/image/multi",
      "text": "Generates animated images, videos, or PDFs from existing images",
      "category": "Upload / Assets generation",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "tag": {
          "type": "string",
          "text": "(Required if not using urls) The animated GIF or PDF is created from all images with this tag.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "urls": {
          "type": "array",
          "text": "(Required if not using tag) The animated GIF or PDF is created from all image URLs in the array."
        },
        "transformation": {
          "type": "string",
          "text": "A transformation to run on all the derived assets before creating the animated image or PDF. This parameter is given as a comma-separated list of transformations; and separated with a slash for chained transformations. SDKs- Supports a hash of transformation parameters (or an array of hashes for chained transformations).\nNote- When using the SDK for a dynamically-typed language; the transformation parameters can be specified directly without using the transformation parameter."
        },
        "async": {
          "type": "boolean",
          "text": "Tells Cloudinary whether to perform the animated image or PDF generation in the background (asynchronously). Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "format": {
          "type": "string",
          "text": "The file format of the result. Valid values- gif; png; webp; mp4; webm and pdf. Default- gif"
        },
        "delay": {
          "type": "number",
          "text": "The delay in milliseconds between frames. Valid for animated images and video formats."
        },
        "notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to notify your application (a webhook) when the process has completed. If not specified; the response is sent to the global Notification URL (if defined) in the Upload page of your Console Settings."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Generates animated images, videos, or PDFs from existing images",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/image/multi",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/image/multi",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#multi"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "creates_a_sprite_from_existing_assets": {
      "provider_intent": "creates_a_sprite_from_existing_assets",
      "provider_alias_intent": "/v1_1/cloud_name/image/sprite",
      "text": "Creates a sprite from existing assets",
      "category": "Upload / Assets generation",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "tag": {
          "type": "string",
          "text": "(Required if not using urls) The sprite is created from all images with this tag.",
          "required": true
        },
        "urls": {
          "type": "array",
          "text": "(Required if not using tag) The sprite is created from all image URLs in the array.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "transformation": {
          "type": "string",
          "text": "A transformation to run on all the derived assets before creating the sprite. This parameter is given as a comma-separated list of transformations; and separated with a slash for chained transformations. SDKs- Supports a hash of transformation parameters (or an array of hashes for chained transformations).\nNote- When using the SDK for a dynamically-typed language; the transformation parameters can be specified directly without using the transformation parameter."
        },
        "format": {
          "type": "string",
          "text": "An optional format to convert the sprite before saving it in your Cloudinary product environment. Default- png."
        },
        "async": {
          "type": "boolean",
          "text": "Tells Cloudinary whether to perform the sprite generation in the background (asynchronously). Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to notify your application (a webhook) when the process has completed. If not specified; the response is sent to the global Notification URL (if defined) in the Upload page of your Console Settings."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Creates a sprite from existing assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/image/sprite",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/image/sprite",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#sprite"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "dynamically_generates_an_image_from_a_given_textual_string": {
      "provider_intent": "dynamically_generates_an_image_from_a_given_textual_string",
      "provider_alias_intent": "/v1_1/cloud_name/image/text",
      "text": "Dynamically generates an image from a given textual string",
      "category": "Upload / Assets generation",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "text": {
          "type": "string",
          "text": "The text string to generate an image for.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "public_id": {
          "type": "string",
          "text": "The identifier that is used for accessing the generated image. If not specified; a unique identifier is generated by Cloudinary.\nNote- The public ID value for images and videos should not include a file extension. Include the file extension for raw files only."
        },
        "font_family": {
          "type": "string",
          "text": "The name of the font family."
        },
        "font_size": {
          "type": "number",
          "text": "Font size in points. Default- 12."
        },
        "font_color": {
          "type": "string",
          "text": "Name or RGB representation of the font's color. For example- red or #ff0000. Default- black."
        },
        "font_weight": {
          "type": "string",
          "text": "Whether to use a normal or a bold font. Default- normal."
        },
        "font_style": {
          "type": "string",
          "text": "Whether to use a normal or an italic font. Default- normal."
        },
        "background": {
          "type": "string",
          "text": "Name or RGB representation of the background color of the generated image. For example- red or #ff0000. Default- transparent."
        },
        "opacity": {
          "type": "number",
          "text": "Text opacity value between 0 (invisible) and 100. Default- 100."
        },
        "text_decoration": {
          "type": "string",
          "text": "Set to underline to define a line below the text. Default- none."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Dynamically generates an image from a given textual string",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/image/text",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/image/text",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#text"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "uploads_an_assets_to_a_cloudinary_product_enviroment": {
      "provider_intent": "uploads_an_assets_to_a_cloudinary_product_enviroment",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/upload",
      "text": "Uploads an assets to a Cloudinary product enviroment",
      "category": "Upload / Assets management",
      "method": "POST",
      "type": "Upload",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "Set the type of file you are uploading or use auto to automatically detect the file type."
        }
      },
      "custom_headers": {},
      "body": {
        "file": {
          "type": "file",
          "text": "The file to upload. It can be",
          "required": true,
          "enum": [
            "a local file path (supported in SDKs only); the remote HTTP or HTTPS URL address of an existing file; a private storage bucket  (S3 or Google Storage) URL of a whitelisted bucket; the actual data (byte array buffer).;\nFor example; in some SDKs; this could be an IO input stream of the data (e.g.; File.open(file; \"rb\")).; the Data URI (Base64 encoded) max ~60 MB (62;910;000 chars); the FTP address of an existing file; For details and examples see file source options"
          ]
        },
        "upload_preset": {
          "type": "string",
          "text": "(Required for unsigned uploading / optional for signed uploading) Name of an upload preset that you defined for your Cloudinary product environment. An upload preset consists of upload parameters centrally managed using the Admin API or from the Upload page of the Console Settings. An upload preset may be marked as unsigned; which allows unsigned uploading directly from the browser and restricts the optional parameters to",
          "required": true,
          "enum": [
            "public_id; folder; tags; context; face_coordinates and custom_coordinates."
          ]
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "public_id": {
          "type": "string",
          "text": "The identifier that's used for accessing and delivering the uploaded asset.\nIf not specified; then the Public ID of the asset will either be comprised of random characters or will use the original file's filename; depending whether use_filename was set to true.\nNotes-\nThe Public ID value for images and videos should not include a file extension. Include the file extension for raw files only.\nCan be up to 255 characters; including non-English characters; periods (.); forward slashes (/); underscores (_); hyphens (-).\nPublic ID values cannot begin or end with a space or forward slash (/). Additionally; they cannot include the following characters- ? & # \\ % < > +"
        },
        "public_id_prefix": {
          "type": "string",
          "text": "Relevant only for product environments using dynamic folder mode.\nA string or path that's automatically prepended to the public_id with a forward slash. The value can contain the same characters as the public_id including additional forward slashes. This prefix can be useful to provide context and improve the SEO of an asset's filename in the delivery URL; but the value does not impact the location where the asset is stored in the Media Library."
        },
        "display_name": {
          "type": "string",
          "text": "Relevant only for product environments using dynamic folder mode.\nA user-friendly name for the asset.\nDefault- Same value as the public_id (or the last segment of the public ID if the public ID includes slashes).\nDisplay names can have spaces and special characters; but can't include forward slashes (/). This name can be completely different than the asset's public id and its value doesn't impact the delivery URL in any way.\nThe display name is shown in user interface pages such as the Console Media Library; Cloudinary collections; and Cloudinary media portals.\nThough not a best practice; it's possible for the same display name to be used for different assets; even in the same asset folder."
        },
        "asset_folder": {
          "type": "string",
          "text": "Relevant only for product environments using dynamic folder mode.\nThe folder where the asset is placed within the Cloudinary repository. This value does not impact the asset’s public ID path (unless the use_asset_folder_as_public_id_prefix option is applied).\nDefault- If not specified; the uploaded asset will be located in the root of your product environment asset repository; even if the public ID value includes slashes."
        },
        "folder": {
          "type": "string",
          "text": "Defines both the full path of the folder where the uploaded asset will be placed and also a path value that's prepended to public_id value with a forward slash.\nDefault- root folder.\nNote- If Dynamic folders mode is enabled on your product environment; it's recommended to use the asset_folder parameter instead of folder to control where the asset will be placed. If you also want your public_id to include slashes and/or match the initial asset folder path; set the full path directly in the public_id value; set the path part of the public ID using the public_id_prefix parameter; or use an upload preset that has the use_asset_folder_as_public_id_prefix option applied."
        },
        "use_filename": {
          "type": "boolean",
          "text": "Whether to use the original file name of the uploaded file as the public_id. Relevant only if the public_id parameter isn't set.\nWhen false and the public_id parameter is also not defined; the Public ID will be comprised of random characters.\nWhen true and the public_id parameter is not defined; the uploaded file's original filename becomes the Public ID. Random characters are appended to the filename value to ensure Public ID uniqueness if unique_filename is true.\nIf the filename of the asset you upload contains a character that's not supported for public IDs; preceding/trailing occurrences are trimmed off; while illegal characters anywhere else in the filename are replaced with underscores.\nDefault- false.",
          "enum": [
            true,
            false
          ]
        },
        "use_filename_as_display_name": {
          "type": "boolean",
          "text": "Relevant only for product environments using dynamic folder mode.\nWhether to automatically assign the original filename of the uploaded asset as the asset's display name. Relevant only if the display_name parameter isn't set.\nNote- If you set use_filename_as_display_name to true (in the upload call or upload preset) and the original filename of the asset includes forward slashes; the upload will fail with an error that the display name can't include slashes.\nDefault- false.",
          "enum": [
            true,
            false
          ]
        },
        "unique_filename": {
          "type": "boolean",
          "text": "When set to false; does not add random characters at the end of the filename that guarantee its uniqueness. Note that if the overwrite parameter is also false; the public ID will be comprised of random characters. This parameter is relevant only if use_filename is also set to true. Default- true.",
          "enum": [
            true,
            false
          ]
        },
        "filename_override": {
          "type": "string",
          "text": "Sets the 'original-filename' metadata header stored on the asset (instead of using the actual filename of the uploaded file). Useful together with the use_filename parameter and for advanced search by filename; and relevant when delivering assets as attachments (setting the flag transformation parameter to attachment)."
        },
        "type": {
          "type": "string",
          "text": "The delivery type. Allows uploading assets as private or authenticated instead of the default upload mode. Only relevant as a parameter when using the SDKs (the delivery type value is part of the endpoint URL when using the REST API). Valid values- upload; private and authenticated. Default- upload."
        },
        "access_control": {
          "type": "object",
          "text": "An array of access types for the asset. The asset is accessible as long as one of the access types is valid.\nPossible values for each access type;\n- token requires either Token-based authentication or Cookie-based authentication for accessing the asset.\nFor example; access_type; \"token\"\n- anonymous allows public access to the asset. The anonymous access type can optionally include start and/or end dates (in ISO 8601 format) that define when the asset is publicly available. Note that you can only include a single 'anonymous' access type. For example;\naccess_type; \"anonymous\"; start; \"2017-12-15T12;00Z\"; end; \"2018-01-20T12;00Z\""
        },
        "access_mode": {
          "type": "string",
          "text": "Allows the asset to behave as if it's of the authenticated 'type' (see above) while still using the default 'upload' type in delivery URLs. The asset can later be made public by changing its access_mode via the Admin API; without having to update any delivery URLs. Valid values; public; and authenticated. Default; public."
        },
        "discard_original_filename": {
          "type": "boolean",
          "text": "Whether to discard the name of the original uploaded file. Relevant when delivering assets as attachments (setting the flag transformation parameter to attachment). Default; false.",
          "enum": [
            true,
            false
          ]
        },
        "overwrite": {
          "type": "boolean",
          "text": "Whether to overwrite existing assets with the same Public ID. When set to false; a response is returned immediately if an asset with the same Public ID was found.\nWhen overwriting assets; if you include versions in your delivery URLs; you will need to update the URLs with the new version number to deliver the new asset. If you don't include versions; you will need to invalidate the old assets on the CDN server cache.\nDefault; true (when using unsigned upload; the default is false and cannot be changed to true).\nImportant; Depending on your product environment setup; overwriting an asset may clear the tags; contextual; and structured metadata values for that asset. If you have a Master admin role; you can change this behavior for your product environment in the Media Library Preferences pane; so that these field values are retained when new version assets overwrite older ones (unless you specify different values for the tags; context; or metadata parameters as part of your upload).",
          "enum": [
            true,
            false
          ]
        },
        "tags": {
          "type": "string",
          "text": "A comma-separated list of tag names to assign to the uploaded asset for later group reference. For example- animal;dogSDKs- Supports arrays. For example- ['animal'; 'dog']"
        },
        "context": {
          "type": "string",
          "text": "A pipe-separated list of the key-value pairs of contextual metadata to attach to an uploaded asset. The context values of uploaded files can be retrieved using the Admin API. For example- alt=My image❘caption=Profile imageNotes-\nThe = and ❘ characters can be supported as values when escaped with a prepended backslash (\\).\nKey values are limited to 1024 characters and an asset can have a maximum of 1000 context key-value pairs.\nSDKs- Supports maps. For example- ['alt'- 'My image'; 'caption'- 'Profile image']"
        },
        "metadata": {
          "type": "string",
          "text": "A pipe-separated list of custom metadata fields (by external_id) and the values to assign to each of them. For example- in_stock_id=50❘color_id=[\\\"green\\\";\\\"red\\\"].\nSDKs- Supports maps.\nNotes-\nThe =; \" and ❘ characters can be supported as values when escaped with a prepended backslash (\\).\nFor a multi-select field; you can set a maximum of 3000 different metadata values on an asset."
        },
        "colors": {
          "type": "boolean",
          "text": "Whether to retrieve predominant colors & color histogram of the uploaded image.\nNote-If all returned colors are opaque; then 6-digit RGB hex values are returned. If one or more colors contain an alpha channel; then 8-digit RGBA hex quadruplet values are returned.\nDefault- false. Relevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "faces": {
          "type": "boolean",
          "text": "Whether to return the coordinates of faces contained in an uploaded image (automatically detected or manually defined). Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face. The coordinates for each face are returned as an array (using the SDKs) or a comma-separated list (for REST API calls); and individual faces are separated with a pipe (❘). For example- 10;20;150;130❘213;345;82;61.\nDefault- false. Relevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "quality_analysis": {
          "type": "boolean",
          "text": "Whether to return a quality analysis value for the image between 0 and 1; where 0 means the image is blurry and out of focus and 1 means the image is sharp and in focus. Default- false. Relevant for images only.\nPaid customers can request to take part in the extended quality analysis Beta trial. When activated; this parameter returns quality scores for various other factors in addition to focus; such as jpeg_quality; noise; exposure; lighting and resolution; together with an overall weighted quality_score. The quality_score; quality_analysis.color_score and quality_analysis.pixel_score fields can be used in the Search API.",
          "enum": [
            true,
            false
          ]
        },
        "accessibility_analysis": {
          "type": "boolean",
          "text": "Currently available only to paid customers requesting to take part in the accessibility analysis Beta trial. Set to true to return accessibility analysis values for the image and to enable the accessibility_analysis.colorblind_accessibility_score field to be used in the Search API.\nDefault- false. Relevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "cinemagraph_analysis": {
          "type": "boolean",
          "text": "Whether to return a cinemagraph analysis value for the media asset between 0 and 1; where 0 means the asset is not a cinemagraph and 1 means the asset is a cinemagraph. Default- false. Relevant for animated images and video only. A static image will return 0.",
          "enum": [
            true,
            false
          ]
        },
        "image_metadata": {
          "type": "boolean",
          "text": "Deprecated. Use media_metadata instead. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "media_metadata": {
          "type": "boolean",
          "text": "Whether to return IPTC; XMP; and detailed Exif metadata of the uploaded asset in the response.\nDefault- false. Supported for images; video; and audio.\nReturned metadata for images includes- PixelsPerUnitX; PixelsPerUnitY; PixelUnits; Colorspace; and DPI.\nReturned metadata for audio and video includes- audio_codec; audio_bit_rate; audio_frequency; channels; channel_layout.\nAdditional metadata for video includes- pix_format; codec; level; profile; video_bit_rate; dar.\n(In .NET SDK; parameter name is Metadata.)",
          "enum": [
            true,
            false
          ]
        },
        "phash": {
          "type": "boolean",
          "text": "Whether to return the perceptual hash (pHash) on the uploaded image. The pHash acts as a fingerprint that allows checking image similarity.\nDefault- false. Relevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "responsive_breakpoints": {
          "type": "array",
          "text": "Requests that Cloudinary automatically find the best breakpoints. The parameter value is an array of breakpoint request settings; where each request setting can include the following parameters-\ncreate_derived(Boolean - Required) If true; create and keep the derived images of the selected breakpoints during the API call. If false; images generated during the analysis process are thrown away.\nformat (String - Optional) Sets the file extension of the derived assets to the format indicated (as opposed to changing the format as part of a transformation - which would be included as part of the transformation component (e.g.; f_jpg)).\ntransformation (String - Optional) The base transformation to first apply to the image before finding the best breakpoints. The API accepts a string representation of a chained transformation (same as the regular transformation parameter of the upload API).\nmax_width (Integer - Optional) The maximum width needed for this image. If specifying a width bigger than the original image; the width of the original image is used instead. Default- 1000.\nmin_width (Integer - Optional) The minimum width needed for this image. Default- 50.\nbytes_step (Integer - Optional) The minimum number of bytes between two consecutive breakpoints (images). Default- 20000.\nmax_images (Integer - Optional) The maximum number of breakpoints to find; between 3 and 200. This means that there might be size differences bigger than the given bytes_step value between consecutive images. Default- 20.\nThe return response will include an array of the selected breakpoints for each breakpoint request; where the following information is given for each breakpoint transformation; width; height; bytes; url and secure_url.\nRelevant for images only."
        },
        "auto_tagging": {
          "type": "number",
          "text": "Automatically assigns tags to an asset according to detected objects or categories with a confidence score higher than the specified value.\nUse together with the detection parameter for-\nCloudinary AI Content Analysis\nAmazon Rekognition Celebrity Detection\nUse together with the categorization parameter for-\nGoogle Automatic Video Tagging\nGoogle Auto Tagging\nImagga Auto Tagging\nAmazon Rekognition Auto Tagging\nRange- 0.0 to 1.0"
        },
        "categorization": {
          "type": "string",
          "text": "A comma-separated list of the categorization add-ons to run on the asset. Set to google_tagging; google_video_tagging; imagga_tagging and/or aws_rek_tagging to automatically classify the scenes of the uploaded asset. Can be used together with the auto_tagging parameter to apply tags automatically. See the Google Automatic Video Tagging; Google Auto Tagging; Imagga Auto Tagging and Amazon Rekognition Auto Tagging add-ons for more details."
        },
        "detection": {
          "type": "string",
          "text": "Invokes the relevant add-on to return a list of detected content.\nSet to-\n<content-aware model>_[<version>] (e.g. coco_v1) to return a list of detected content using the Cloudinary AI Content Analysis add-on. Can be used together with the auto_tagging parameter to apply tags automatically.\nadv_face to return a list of facial attributes using the Advanced Facial Attribute Detection add-on.\naws_rek_face to return a list of detected celebrities and facial attributes using the Amazon Rekognition Celebrity Detection add-on. Can be used together with the auto_tagging parameter to apply tags automatically.\nRelevant for images only."
        },
        "ocr": {
          "type": "string",
          "text": "Set to adv_ocr to extract all text elements in an image as well as the bounding box coordinates of each detected element using the OCR text detection and extraction add-on.\nRelevant for images only."
        },
        "visual_search": {
          "type": "boolean",
          "text": "Whether to index the image for the visual search feature. Default- false.\nRelevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "exif": {
          "type": "boolean",
          "text": "Whether to retrieve the Exif metadata of the uploaded photo. Default- false. Deprecated - use media_metadata instead",
          "enum": [
            true,
            false
          ]
        },
        "eager": {
          "type": "string",
          "text": "A list of transformations to create for the uploaded asset; instead of lazily creating them when first accessed by your site's visitors (see the Transformation URL API Reference for more details on possible values). This option accepts either a single transformation or a pipe-separated list of transformations to create for the uploaded asset.\nSDKs- Supports arrays. (In .NET SDK; parameter name is EagerTransforms.)"
        },
        "eager_async": {
          "type": "boolean",
          "text": "Whether to generate the eager transformations asynchronously in the background after the upload request is completed rather than online as part of the upload call. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "eager_notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to send a notification to (a webhook) when the generation of eager transformations is completed."
        },
        "transformation": {
          "type": "string",
          "text": "An incoming transformation to run on the uploaded asset before saving it in the cloud. This parameter is given as a string of comma-separated single characters (separated with a slash for chained transformations).SDKs- Supports a hash of transformation parameters (or an array of hashes for chained transformations).\nNote- When using the SDK for a dynamically-typed language such as Ruby; the transformation parameters can be specified directly without using this transformation parameter."
        },
        "format": {
          "type": "string",
          "text": "An optional format to convert the uploaded asset to before saving in the cloud. For example- jpg."
        },
        "custom_coordinates": {
          "type": "string",
          "text": "Sets the coordinates of a single region contained in an uploaded image that is subsequently used for cropping uploaded images using the custom gravity mode. The region is specified by the X & Y coordinates of the top left corner and the width & height of the region; as a comma-separated list. For example- 85;120;220;310.\nRelevant for images only.\nSDKs- Supports arrays. For example- [85; 120; 220; 310]"
        },
        "face_coordinates": {
          "type": "string",
          "text": "Sets the coordinates of faces contained in an uploaded image and overrides the automatically detected faces. Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face. The coordinates for each face are given as a comma-separated list; with individual faces separated with a pipe (❘). For example- 10;20;150;130❘213;345;82;61.\nRelevant for images only.\nSDKs- Supports arrays. For example- [[10; 20; 150; 130];[213; 345; 82; 61]]"
        },
        "background_removal": {
          "type": "string",
          "text": "Automatically remove the background of an image using an add-on.\nSet to cloudinary_ai to use the deep-learning based Cloudinary AI Background Removal add-on.\nNote- this feature has been superseded by background removal on the fly.\nSet to pixelz to use the human-powered Pixelz Remove-The-Background Editing add-on service.\nRelevant for images only."
        },
        "raw_convert": {
          "type": "string",
          "text": "Asynchronously generates a related file based on the uploaded file.\nSet to aspose to automatically create a PDF or other image format from a raw Office document using the Aspose Document Conversion add-on.\nSet to google_speech to instruct the Google AI Video Transcription add-on to generate an automatic transcript raw file from an uploaded video.\nSet to extract_text to extract all the text from a PDF file and store it in a raw file. The public ID of the generated raw file will be in the format- [pdf_public_id].extract_text.json.\nSee also- Converting raw files."
        },
        "allowed_formats": {
          "type": "string",
          "text": "A comma-separated list of file formats that are allowed for uploading. Files of other types will be rejected. The formats can be any combination of image types; video formats or raw file extensions. For example- mp4;ogv;jpg;png;pdf. Default- any supported format for images and videos; and any kind of raw file (i.e. no restrictions by default).\nSDKs- Supports arrays. For example- [mp4; ogv; jpg; png; pdf]\nNote- You can also add the format parameter to convert other file types instead of rejecting them. In this case; only files that would normally be rejected are converted; any file format allowed for upload wont be converted."
        },
        "async": {
          "type": "boolean",
          "text": "Tells Cloudinary whether to perform the upload request in the background (asynchronously). Default- false.\nNote- In the Python SDK; this parameter is passed as a dictionary- **{\"async\"- True}\nbackup",
          "enum": [
            "boolean"
          ]
        },
        "callback": {
          "type": "string",
          "text": "A URL to redirect to after the upload is completed instead of returning the upload response. Signed upload result parameters are added to the callback URL. This parameter is ignored for XHR (Ajax XMLHttpRequest) upload requests.\nNote- This parameter is relevant for direct uploads from a form in the browser. It is automatically set if you perform direct upload from the browser using Cloudinary's SDKs and the jQuery plugin."
        },
        "eval": {
          "type": "string",
          "text": "Allows you to modify upload parameters by specifying custom logic with JavaScript. This can be useful for conditionally adding tags; contextual metadata; structured metadata or eager transformations depending on specific criteria of the uploaded file. For more details see Evaluating and modifying upload parameters."
        },
        "headers": {
          "type": "string",
          "text": "An HTTP header or a list of headers lines for adding as response HTTP headers when delivering the asset to your users. Supported headers- Link; Authorization; X-Robots-Tag. For example- X-Robots-Tag- noindex."
        },
        "invalidate": {
          "type": "boolean",
          "text": "Whether to invalidate CDN cached copies of a previously uploaded asset (and all transformed versions that share the same Public ID). Default- false.\nIt usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. There are also a number of other important considerations when using the invalidate functionality.",
          "enum": [
            true,
            false
          ]
        },
        "moderation": {
          "type": "string",
          "text": "For all asset types; set to-\nmanual to add the uploaded asset to a list of pending assets that can be moderated using the Admin API or the Cloudinary Console.\nperception_point to automatically moderate the uploaded asset using the Perception Point Malware Detection add-on.\nFor images only; set to-\nwebpurify to automatically moderate the uploaded image using the WebPurify Image Moderation add-on.\naws_rek to automatically moderate the uploaded image using the Amazon Rekognition AI Moderation add-on.\nduplicate-<threshold> to detect if the same or a similar image already exists using the Cloudinary Duplicate Image Detection add-on. Set threshold to a float greater than 0 and less than or equal to 1.0 to specify how similar an image needs to be in order to be considered a duplicate. Set threshold to 0 to add an image to the index of images that are searched when duplicate detection is invoked for another image.\nFor videos only; set to-\naws_rek_video to automatically moderate the uploaded video using the Amazon Rekognition Video Moderation add-on.\ngoogle_video_moderation automatically moderate the uploaded video using the Google AI Video Moderation add-on.\nTo request multiple moderations in a single API call-\nSend the desired list of moderations as a pipe-separated string with manual moderation; if relevant; being last.\nFor example- aws_rek❘duplicate-0❘perception_point❘manual\nNote- Rejected assets are automatically invalidated on the CDN within approximately ten minutes."
        },
        "notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to receive the upload response (a webhook) when the upload or any requested asynchronous action is completed. If not specified; the response is sent to the global Notification URL (if defined) in the Upload settings of your Cloudinary Console."
        },
        "proxy": {
          "type": "string",
          "text": "Tells Cloudinary to upload assets from remote URLs through the given proxy. Format- https-//hostname-port."
        },
        "return_delete_token": {
          "type": "boolean",
          "text": "Whether to return a deletion token in the upload response. The token can be used to delete the uploaded asset within 10 minutes using an unauthenticated API request. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "timeout": {
          "type": "number",
          "text": "(SDKs only) Add this parameter to override the maximum amount of time to wait for a response from Cloudinary before the connection is terminated."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "Set the type of file you are uploading or use auto to automatically detect the file type."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Uploads an assets to a Cloudinary product enviroment",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/upload",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/upload",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#signed_upload_syntax"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "applies_actions_to_alerady_uploaded_assets": {
      "provider_intent": "applies_actions_to_alerady_uploaded_assets",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/explicit",
      "text": "Applies actions to alerady uploaded assets",
      "category": "Upload / Assets management",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "custom_headers": {},
      "body": {
        "public_id": {
          "type": "string",
          "text": "The identifier of the uploaded asset or the URL of the remote asset.\nNote- The public ID value for images and videos should not include a file extension. Include the file extension for raw files only.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type of the asset. For a list of all possible delivery types; see Delivery types.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "display_name": {
          "type": "string",
          "text": "Relevant only for product environments using dynamic folder mode.\nA user-friendly name for the asset.\nDisplay names can have spaces and special characters; but can't include forward slashes (/). This name can be completely different than the asset's public id and its value doesn't impact the delivery URL in any way.\nThe display name is shown in user interface pages such as the Console Media Library; Cloudinary collections; and Cloudinary media portals.\nThough not a best practice; it's possible for the same display name to be used for different assets; even in the same asset folder."
        },
        "asset_folder": {
          "type": "string",
          "text": "Relevant only for product environments using dynamic folder mode.\nThe folder where the asset is placed within the Cloudinary repository.\nSetting this value in an explicit method moves the asset to the specified asset folder; but does not impact the asset’s public ID path."
        },
        "eager": {
          "type": "string",
          "text": "A list of transformations to create for the uploaded asset; instead of lazily creating them when first accessed by your site's visitors (see the Transformation URL API Reference for more details on possible values). This option accepts either a single transformation or a pipe-separated list of transformations to create for the uploaded asset.\nSDKs- Supports arrays. (In .NET SDK; parameter name is EagerTransforms.)\nasync",
          "enum": [
            "boolean"
          ]
        },
        "eager_notification_url": {
          "type": "string",
          "text": "An HTTP or HTTPS URL to notify your application (a webhook) when the generation of eager transformations is completed."
        },
        "overwrite": {
          "type": "boolean",
          "text": "When applying eager for already existing video transformations; this setting indicates whether to force the existing derived video resources to be regenerated. Default for videos- false.\nNote- When specifying existing eager transformations for images; corresponding derived images are always regenerated.",
          "enum": [
            true,
            false
          ]
        },
        "tags": {
          "type": "string",
          "text": "A comma-separated list of tag names to assign to an asset that replaces any current tags assigned to the asset (if any). For example- animal;dogSDKs- Supports arrays. For example- ['animal'; 'dog']"
        },
        "invalidate": {
          "type": "boolean",
          "text": "Whether to invalidate the asset (and all its derived assets) on the CDN. Default- false.\nIt usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. There are also a number of other important considerations when using the invalidate functionality.",
          "enum": [
            true,
            false
          ]
        },
        "context": {
          "type": "string",
          "text": "A pipe-separated list of the key-value pairs of contextual metadata to attach to an uploaded asset. The context values of uploaded files can be retrieved using the Admin API. For example- alt=My image❘caption=Profile imageNotes-\nThe = and ❘ characters can be supported as values when escaped with a prepended backslash (\\).\nKey values are limited to 1024 characters and an asset can have a maximum of 1000 context key-value pairs.\nSDKs- Supports maps. For example- ['alt'- 'My image'; 'caption'- 'Profile image']"
        },
        "metadata": {
          "type": "string",
          "text": "A pipe-separated list of custom metadata fields (by external_id) and the values to assign to each of them. For example- in_stock_id=50❘color_id=[\\\"green\\\";\\\"red\\\"].\nSDKs- Supports maps.\nNotes-\nThe =; \" and ❘ characters can be supported as values when escaped with a prepended backslash (\\).\nFor a multi-select field; you can set a maximum of 3000 different metadata values on an asset.\nheaders",
          "enum": [
            "string"
          ]
        },
        "face_coordinates": {
          "type": "string",
          "text": "Sets the coordinates of faces contained in an uploaded image and overrides the automatically detected faces. Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face. The coordinates for each face are given as a comma-separated list; with individual faces separated with a pipe (❘). For example- 10;20;150;130❘213;345;82;61.\nRelevant for images only.\nSDKs- Supports arrays. For example- [[10; 20; 150; 130];[213; 345; 82; 61]]\ncustom_coordinates",
          "enum": [
            "string"
          ]
        },
        "notification_url": {
          "type": "string",
          "text": "An HTTP URL to send notification to (a webhook) when the operation or any additional requested asynchronous action is completed. If not specified; the response is sent to the global Notification URL (if defined) in the Upload page of your Console Settings."
        },
        "image_metadata": {
          "type": "boolean",
          "text": "Deprecated. Use media_metadata instead. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "media_metadata": {
          "type": "boolean",
          "text": "Whether to return IPTC; XMP; and detailed Exif metadata of the uploaded asset in the response.\nDefault- false. Supported for images; video; and audio.\nReturned metadata for images includes- PixelsPerUnitX; PixelsPerUnitY; PixelUnits; Colorspace; and DPI.\nReturned metadata for audio and video includes- audio_codec; audio_bit_rate; audio_frequency; channels; channel_layout.\nAdditional metadata for video includes- pix_format; codec; level; profile; video_bit_rate; dar.\n(In .NET SDK; parameter name is Metadata.)",
          "enum": [
            true,
            false
          ]
        },
        "colors": {
          "type": "boolean",
          "text": "Whether to retrieve predominant colors & color histogram of the uploaded image. If one or more colors contain an alpha channel; then 8-digit RGBA hex quadruplet values are returned.\nDefault- false. Relevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "phash": {
          "type": "boolean",
          "text": "Whether to return the perceptual hash (pHash) on the uploaded image. The pHash acts as a fingerprint that allows checking image similarity. Default- false. Relevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "faces": {
          "type": "boolean",
          "text": "Whether to return the coordinates of faces contained in an uploaded image (automatically detected or manually defined). Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face. The coordinates for each face are returned as an array (using the SDKs) or a comma-separated list (for REST API calls); and individual faces are separated with a pipe (❘). For example- 10;20;150;130❘213;345;82;61. Default- false. Relevant for images only.",
          "enum": [
            true,
            false
          ]
        },
        "quality_analysis": {
          "type": "boolean",
          "text": "Whether to return a quality analysis value for the image between 0 and 1; where 0 means the image is blurry and out of focus and 1 means the image is sharp and in focus. Default- false. Relevant for images only.\nPaid customers can request to take part in the extended quality analysis Beta trial. When activated; this parameter returns quality scores for various other factors in addition to focus; such as jpeg_quality; noise; exposure; blockiness and resolution; together with an overall weighted quality_score.\nNote- Unlike when used with the upload method; the returned quality_score; quality_analysis.color_score and quality_analysis.pixel_score fields are not indexed for search.",
          "enum": [
            true,
            false
          ]
        },
        "accessibility_analysis": {
          "type": "boolean",
          "text": "Currently available only to paid customers requesting to take part in the accessibility analysis Beta trial. Set to true to return accessibility analysis values for the image.\nDefault- false. Relevant for images only.\nNote- Unlike when used with the upload method; the accessibility_analysis.colorblind_accessibility_score field is not indexed for search.",
          "enum": [
            true,
            false
          ]
        },
        "quality_override": {
          "type": "string",
          "text": "Sets a quality value to override the value used when the image is encoded with Cloudinary's automatic content-aware quality algorithm."
        },
        "cinemagraph_analysis": {
          "type": "boolean",
          "text": "Whether to return a cinemagraph analysis value for the media asset between 0 and 1; where 0 means the asset is not a cinemagraph and 1 means the asset is a cinemagraph. Default- false. Relevant for animated images and video only. A static image will return 0.",
          "enum": [
            true,
            false
          ]
        },
        "moderation": {
          "type": "string",
          "text": "For all asset types; set to-\nmanual to add the asset to a list of pending assets that can be moderated using the Admin API or the Cloudinary Console.\nperception_point to automatically moderate the uploaded asset using the Perception Point Malware Detection add-on.\nFor images only; set to-\nwebpurify to automatically moderate the image using the WebPurify Image Moderation add-on.\naws_rek to automatically moderate the image using the Amazon Rekognition AI Moderation add-on.\nduplicate-<threshold> to detect if the same or a similar image already exists using the Cloudinary Duplicate Image Detection add-on. Set threshold to a float greater than 0 and less than or equal to 1.0 to specify how similar an image needs to be in order to be considered a duplicate. Set threshold to 0 to add an image to the index of images that are searched when duplicate detection is invoked for another image.\nFor videos only; set to-\naws_rek_video to automatically moderate the uploaded video using the Amazon Rekognition Video Moderation add-on.\ngoogle_video_moderation automatically moderate the uploaded video using the Google AI Video Moderation add-on.\nTo request multiple moderations in a single API call-\nSend the desired list of moderations as a pipe-separated string with manual moderation; if relevant; being last.\nFor example- aws_rek❘duplicate-0❘perception_point❘manual\nNote- Rejected assets are automatically invalidated on the CDN within approximately ten minutes."
        },
        "responsive_breakpoints": {
          "type": "array",
          "text": "Requests that Cloudinary automatically find the best breakpoints. The parameter value is an array of breakpoint request settings; where each request setting can include the following parameters-\ncreate_derived(Boolean - Required) If true; create and keep the derived images of the selected breakpoints during the API call. If false; images generated during the analysis process are thrown away.\nformat (String - Optional) Sets the file extension of the derived assets to the format indicated (as opposed to changing the format as part of a transformation - which would be included as part of the transformation component (e.g.; f_jpg)).\ntransformation (String - Optional) The base transformation to first apply to the image before finding the best breakpoints. The API accepts a string representation of a chained transformation (same as the regular transformation parameter of the upload API).\nmax_width (Integer - Optional) The maximum width needed for this image. If specifying a width bigger than the original image; the width of the original image is used instead. Default- 1000.\nmin_width (Integer - Optional) The minimum width needed for this image. Default- 50.\nbytes_step (Integer - Optional) The minimum number of bytes between two consecutive breakpoints (images). Default- 20000.\nmax_images (Integer - Optional) The maximum number of breakpoints to find; between 3 and 200. This means that there might be size differences bigger than the given bytes_step value between consecutive images. Default- 20.\nThe return response will include an array of the selected breakpoints for each breakpoint request; where the following information is given for each breakpoint- transformation; width; height; bytes; url and secure_url.\nRelevant for images only."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Applies actions to alerady uploaded assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/explicit",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/explicit",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#explicit"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "rename_an_assets": {
      "provider_intent": "rename_an_assets",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/rename",
      "text": "Rename an assets",
      "category": "Upload / Assets management",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset to rename. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "custom_headers": {},
      "body": {
        "from_public_id": {
          "type": "string",
          "text": "The current identifier of the uploaded asset.",
          "required": true
        },
        "to_public_id": {
          "type": "string",
          "text": "The new identifier to assign to the uploaded asset.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type of the asset. Only relevant as a parameter when using the SDKs (the delivery type is included in the endpoint URL when using the REST API). Valid values- upload; private; authenticated. Default- upload."
        },
        "to_type": {
          "type": "string",
          "text": "The new delivery type for the asset. Valid values- upload; private; authenticated. Default- the asset's current type is unchanged."
        },
        "overwrite": {
          "type": "boolean",
          "text": "Whether to overwrite an existing asset with the target public ID. Default- false.\r\nImportant- Depending on your product environment setup; overwriting an asset may clear the tags; contextual; and structured metadata values for that asset. If you have a Master admin role; you can change this behavior for your product environment in the Media Library Preferences pane; so that these field values are retained when new version assets overwrite older ones (unless you specify different values for the tags; context; or metadata parameters as part of your upload).",
          "enum": [
            true,
            false
          ]
        },
        "invalidate": {
          "type": "boolean",
          "text": "Whether to invalidate CDN cached copies of the asset (and all its transformed versions). Default- false.\r\nIt usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. There are also a number of other important considerations when using the invalidate functionality",
          "enum": [
            true,
            false
          ]
        },
        "context": {
          "type": "boolean",
          "text": "Whether to include contextual metadata for the asset in the response. Default- false.",
          "enum": [
            true,
            false
          ]
        },
        "metadata": {
          "type": "boolean",
          "text": "Whether to include structured metadata for the asset in the response. Default- false.",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset to rename. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Rename an assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/rename",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/rename",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#rename"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "destroy_an_assets": {
      "provider_intent": "destroy_an_assets",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/destroy",
      "text": "Destroy an assets",
      "category": "Upload / Assets management",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset to destroy. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "custom_headers": {},
      "body": {
        "public_id": {
          "type": "string",
          "text": "The identifier of the uploaded asset.\r\nNote- The public ID value for images and videos should not include a file extension. Include the file extension for raw files only.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type of the asset. Only relevant as a parameter when using the SDKs (the type is included in the endpoint URL when using the REST API). Default- upload. For a list of all possible delivery types; see Delivery types."
        },
        "invalidate": {
          "type": "boolean",
          "text": "If true; invalidates CDN cached copies of the asset (and all its transformed versions). Default- false.\r\nIt usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. There are also a number of other important considerations when using the invalidate functionality.",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset to destroy. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Destroy an assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/destroy",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/destroy",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#destroy"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "gets_a_specific_version_of_a_backed-up_assets": {
      "provider_intent": "gets_a_specific_version_of_a_backed-up_assets",
      "provider_alias_intent": "/v1_1/cloud_name/download_backup",
      "text": "Gets a specific version of a backed-up assets",
      "category": "Upload / Assets management",
      "method": "GET",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name.",
          "required": true
        },
        "asset_id": {
          "type": "string",
          "text": "The identifier of the uploaded asset.\nNote- This is returned in the response to various Admin API methods.",
          "required": true
        },
        "version_id": {
          "type": "string",
          "text": "The identifier of a backed up version of the asset.\nNote- To see details of backed up versions; including version_id; for a specific asset; use the resource method of the Admin API; setting the versions parameter to true.",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name.",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Gets a specific version of a backed-up assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/download_backup",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/download_backup",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#download_backup"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "add_context": {
      "provider_intent": "add_context",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/context",
      "text": "Add Context",
      "category": "Upload / Metadata management",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "custom_headers": {},
      "body": {
        "context": {
          "type": "string",
          "text": "(Only relevant when adding contextual metadata) A pipe-separated list of the key-value pairs of contextual metadata to attach to an uploaded asset. The contextual metadata values of uploaded files can be retrieved using the Admin API. For example- alt=My image❘caption=Profile imageNotes-\r\nThe = and ❘ characters can be supported as values when escaped with a prepended backslash (\\).\r\nKey values are limited to 1024 characters and an asset can have a maximum of 1000 contextual metadata key-value pairs.\r\nSDKs- Supports maps. For example- ['alt'- 'My image'; 'caption'- 'Profile image']",
          "required": true
        },
        "public_ids": {
          "type": "array",
          "text": "An array of Public IDs of assets uploaded to Cloudinary.",
          "required": true
        },
        "command": {
          "type": "string",
          "text": "(Only relevant when using the REST API - not for use with SDKs) The action to perform on assets- either add the specified contextual metadata; or remove_all the contextual metadata key-value pairs assigned.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type of the asset. Only relevant as a parameter when using the SDKs (the delivery type is included in the endpoint URL when using the REST API). Default- upload. For a list of possible delivery types; see Delivery types."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Add Context",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/context",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/context",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#adding_context_syntax"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "remove_context": {
      "provider_intent": "remove_context",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/context",
      "text": "Remove Context",
      "category": "Upload / Metadata management",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "custom_headers": {},
      "body": {
        "context": {
          "type": "string",
          "text": "(Only relevant when adding contextual metadata) A pipe-separated list of the key-value pairs of contextual metadata to attach to an uploaded asset. The contextual metadata values of uploaded files can be retrieved using the Admin API. For example- alt=My image❘caption=Profile imageNotes-\r\nThe = and ❘ characters can be supported as values when escaped with a prepended backslash (\\).\r\nKey values are limited to 1024 characters and an asset can have a maximum of 1000 contextual metadata key-value pairs.\r\nSDKs- Supports maps. For example- ['alt'- 'My image'; 'caption'- 'Profile image']",
          "required": true
        },
        "public_ids": {
          "type": "array",
          "text": "An array of Public IDs of assets uploaded to Cloudinary.",
          "required": true
        },
        "command": {
          "type": "string",
          "text": "(Only relevant when using the REST API - not for use with SDKs) The action to perform on assets- either add the specified contextual metadata; or remove_all the contextual metadata key-value pairs assigned.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type of the asset. Only relevant as a parameter when using the SDKs (the delivery type is included in the endpoint URL when using the REST API). Default- upload. For a list of possible delivery types; see Delivery types."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Remove Context",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/context",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/context",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#removing_all_context_syntax"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "adds_values_to_metadata_fields": {
      "provider_intent": "adds_values_to_metadata_fields",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/metadata",
      "text": "Adds values to metadata fields",
      "category": "Upload / Metadata management",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "custom_headers": {},
      "body": {
        "metadata": {
          "type": "string",
          "text": "A pipe-separated list of custom metadata fields (by external_id) and the values to assign to each of them. For example- in_stock_id=50❘color_id=[\\\"green\\\";\\\"red\\\"].\r\nSDKs- Supports maps.\r\nNotes-\r\nThe =; \" and ❘ characters can be supported as values when escaped with a prepended backslash (\\).\r\nFor a multi-select field; you can set a maximum of 3000 different metadata values on an asset.",
          "required": true
        },
        "public_ids": {
          "type": "array",
          "text": "An array of Public IDs of assets uploaded to Cloudinary.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type. Valid values- upload; private and authenticated. Default- upload"
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Adds values to metadata fields",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/metadata",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/metadata",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#metadata"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "manages_the_tags_applied_to_your_assets": {
      "provider_intent": "manages_the_tags_applied_to_your_assets",
      "provider_alias_intent": "/v1_1/cloud_name/resource_type/tags",
      "text": "Manages the tags applied to your assets",
      "category": "Upload / Metadata management",
      "method": "POST",
      "type": "API",
      "params": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "custom_headers": {},
      "body": {
        "tag": {
          "type": "string",
          "text": "The tag(s) to assign; remove; or replace. Not relevant when removing all tags. You can pass multiple tags as a single comma-separated list of tag names to assign. For example- animal;dog\r\nSDKs- Supports arrays. For example- ['animal'; 'dog']",
          "required": true
        },
        "public_ids": {
          "type": "string",
          "text": "A list of public IDs for the assets you want to update.",
          "required": true
        },
        "command": {
          "type": "string",
          "text": "(Only relevant when using the REST API or the .NET SDK - not for use with other SDKs) The action to perform on the assets- either add the given tag; remove the given tag; remove_all the tags assigned; or replace the given tag; which adds the given tag while removing all other tags assigned.",
          "required": true
        },
        "signature": {
          "type": "string",
          "text": "(Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests; the signature is automatically generated and added to the request. If you manually generate your own signed POST request; you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters. For more details; see manually generating signatures.\r\nNote This method supports a maximum of 1000 total operations (public_ids * tags <= 1000).",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "The delivery type of the asset. Only relevant as a parameter when using the SDKs (the delivery type is included in the endpoint URL when using the REST API). Default- upload. For a list of possible delivery types; see Delivery types."
        }
      },
      "path": {
        "cloud_name": {
          "type": "string",
          "text": "Cloud Name",
          "required": true
        },
        "resource_type": {
          "type": "string",
          "text": "The type of asset. Only relevant as a parameter when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Valid values- image; raw; and video. Default- image.\nNote- Use the video resource type for all video assets as well as for audio files; such as .mp3."
        }
      },
      "domain_params": {},
      "meta": {
        "version": "v1_1",
        "auth": [],
        "description": "Manages the tags applied to your assets",
        "rate_limit": [],
        "api_endpoint": "https://api.cloudinary.com/v1_1/:cloud_name/:resource_type/tags",
        "alias_endpoint": "/cloudinary/v1_1/cloud_name/resource_type/tags",
        "api_ref": "https://cloudinary.com/documentation/image_upload_api_reference#tags"
      },
      "auth": {
        "basicauth": {
          "username": "api_key",
          "password": "api_secret"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    }
  }
}