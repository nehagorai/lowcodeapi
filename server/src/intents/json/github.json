{
  "config": {
    "id": "github",
    "name": "Github",
    "description": "",
    "logo_url": "github.svg",
    "auth_type": "OAUTH2.0",
    "auth": {},
    "auth_config": {},
    "headers": {},
    "api_endpoint": "",
    "released": 1,
    "updated_at": "2025-03-12T03:28:59.000Z",
    "website": "https://github.com",
    "api_link_ref": "",
    "total_api": 889,
    "credential_link": ""
  },
  "app": {
    "title": "GitHub API",
    "description": "",
    "api_base": "/github",
    "copyright": "",
    "copyright_year": "",
    "contact_email": ""
  },
  "category": {
    "All": ""
  },
  "routes": {
    "get_orgs_org_actions_cache_usage": {
      "provider_intent": "get_orgs_org_actions_cache_usage",
      "provider_alias_intent": "/orgs/org/actions/cache/usage",
      "text": "Get GitHub Actions cache usage for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the total GitHub Actions cache usage for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/cache/usage",
        "alias_endpoint": "/github/orgs/org/actions/cache/usage",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_cache_usage-by-repository": {
      "provider_intent": "get_orgs_org_actions_cache_usage-by-repository",
      "provider_alias_intent": "/orgs/org/actions/cache/usage-by-repository",
      "text": "List repositories with GitHub Actions cache usage for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists repositories and their GitHub Actions cache usage for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/cache/usage-by-repository",
        "alias_endpoint": "/github/orgs/org/actions/cache/usage-by-repository",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_permissions": {
      "provider_intent": "get_orgs_org_actions_permissions",
      "provider_alias_intent": "/orgs/org/actions/permissions",
      "text": "Get GitHub Actions permissions for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions",
        "alias_endpoint": "/github/orgs/org/actions/permissions",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_permissions": {
      "provider_intent": "put_orgs_org_actions_permissions",
      "provider_alias_intent": "/orgs/org/actions/permissions",
      "text": "Set GitHub Actions permissions for an organization",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "enabled_repositories": {
          "type": "string",
          "text": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions"
        },
        "allowed_actions": {
          "type": "string",
          "text": "The permissions policy that controls the actions and reusable workflows that are allowed to run"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions",
        "alias_endpoint": "/github/orgs/org/actions/permissions",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_permissions_repositories": {
      "provider_intent": "get_orgs_org_actions_permissions_repositories",
      "provider_alias_intent": "/orgs/org/actions/permissions/repositories",
      "text": "List selected repositories enabled for GitHub Actions in an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the selected repositories that are enabled for GitHub Actions in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions/repositories",
        "alias_endpoint": "/github/orgs/org/actions/permissions/repositories",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_permissions_repositories": {
      "provider_intent": "put_orgs_org_actions_permissions_repositories",
      "provider_alias_intent": "/orgs/org/actions/permissions/repositories",
      "text": "Set selected repositories enabled for GitHub Actions in an organization",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_repository_ids": {
          "type": "array",
          "text": "List of repository IDs to enable for GitHub Actions"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Replaces the list of selected repositories that are enabled for GitHub Actions in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions/repositories",
        "alias_endpoint": "/github/orgs/org/actions/permissions/repositories",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_permissions_repositories_repository_id": {
      "provider_intent": "put_orgs_org_actions_permissions_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/actions/permissions/repositories/repository_id",
      "text": "Enable a selected repository for GitHub Actions in an organization",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/actions/permissions/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_permissions_repositories_repository_id": {
      "provider_intent": "delete_orgs_org_actions_permissions_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/actions/permissions/repositories/repository_id",
      "text": "Disable a selected repository for GitHub Actions in an organization",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/actions/permissions/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_permissions_selected-actions": {
      "provider_intent": "get_orgs_org_actions_permissions_selected-actions",
      "provider_alias_intent": "/orgs/org/actions/permissions/selected-actions",
      "text": "Get allowed actions and reusable workflows for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the selected actions and reusable workflows that are allowed in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions/selected-actions",
        "alias_endpoint": "/github/orgs/org/actions/permissions/selected-actions",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_permissions_selected-actions": {
      "provider_intent": "put_orgs_org_actions_permissions_selected-actions",
      "provider_alias_intent": "/orgs/org/actions/permissions/selected-actions",
      "text": "Set allowed actions and reusable workflows for an organization",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "github_owned_allowed": {
          "type": "boolean",
          "text": "Whether GitHub-owned actions are allowed",
          "enum": [
            true,
            false
          ]
        },
        "verified_allowed": {
          "type": "boolean",
          "text": "Whether actions from GitHub Marketplace verified creators are allowed",
          "enum": [
            true,
            false
          ]
        },
        "patterns_allowed": {
          "type": "array",
          "text": "Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s)"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the actions and reusable workflows that are allowed in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions/selected-actions",
        "alias_endpoint": "/github/orgs/org/actions/permissions/selected-actions",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_permissions_workflow": {
      "provider_intent": "get_orgs_org_actions_permissions_workflow",
      "provider_alias_intent": "/orgs/org/actions/permissions/workflow",
      "text": "Get default workflow permissions for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization\nas well as whether GitHub Actions can submit approving pull request reviews.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions/workflow",
        "alias_endpoint": "/github/orgs/org/actions/permissions/workflow",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-default-workflow-permissions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_permissions_workflow": {
      "provider_intent": "put_orgs_org_actions_permissions_workflow",
      "provider_alias_intent": "/orgs/org/actions/permissions/workflow",
      "text": "Set default workflow permissions for an organization",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "default_workflow_permissions": {
          "type": "string",
          "text": "The default workflow permissions granted to the GITHUB_TOKEN when running workflows"
        },
        "can_approve_pull_request_reviews": {
          "type": "boolean",
          "text": "Whether GitHub Actions can approve pull requests",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization and sets if GitHub Actions\ncan submit approving pull request reviews.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/permissions/workflow",
        "alias_endpoint": "/github/orgs/org/actions/permissions/workflow",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-default-workflow-permissions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_required_workflows": {
      "provider_intent": "get_orgs_org_actions_required_workflows",
      "provider_alias_intent": "/orgs/org/actions/required_workflows",
      "text": "List required workflows",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all required workflows in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-required-workflows"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_actions_required_workflows": {
      "provider_intent": "post_orgs_org_actions_required_workflows",
      "provider_alias_intent": "/orgs/org/actions/required_workflows",
      "text": "Create a required workflow",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "workflow_file_path": {
          "type": "string",
          "text": "Path of the workflow file to be configured as a required workflow"
        },
        "repository_id": {
          "type": "string",
          "text": "The ID of the repository that contains the workflow file"
        },
        "scope": {
          "type": "string",
          "text": "Enable the required workflow for all repositories or selected repositories in the organization"
        },
        "selected_repository_ids": {
          "type": "array",
          "text": "A list of repository IDs where you want to enable the required workflow"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a required workflow in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-a-required-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_required_workflows_required_workflow_id": {
      "provider_intent": "get_orgs_org_actions_required_workflows_required_workflow_id",
      "provider_alias_intent": "/orgs/org/actions/required_workflows/required_workflow_id",
      "text": "Get a required workflow",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a required workflow configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows/{required_workflow_id}",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows/required_workflow_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-required-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_orgs_org_actions_required_workflows_required_workflow_id": {
      "provider_intent": "patch_orgs_org_actions_required_workflows_required_workflow_id",
      "provider_alias_intent": "/orgs/org/actions/required_workflows/required_workflow_id",
      "text": "Update a required workflow",
      "category": "Actions",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "workflow_file_path": {
          "type": "string",
          "text": "Path of the workflow file to be configured as a required workflow"
        },
        "repository_id": {
          "type": "string",
          "text": "The ID of the repository that contains the workflow file"
        },
        "scope": {
          "type": "string",
          "text": "Enable the required workflow for all repositories or selected repositories in the organization"
        },
        "selected_repository_ids": {
          "type": "array",
          "text": "A list of repository IDs where you want to enable the required workflow"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update a required workflow in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows/{required_workflow_id}",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows/required_workflow_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#update-a-required-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_required_workflows_required_workflow_id": {
      "provider_intent": "delete_orgs_org_actions_required_workflows_required_workflow_id",
      "provider_alias_intent": "/orgs/org/actions/required_workflows/required_workflow_id",
      "text": "Delete a required workflow",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a required workflow configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows/{required_workflow_id}",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows/required_workflow_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-a-required-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_required_workflows_required_workflow_id_repositories": {
      "provider_intent": "get_orgs_org_actions_required_workflows_required_workflow_id_repositories",
      "provider_alias_intent": "/orgs/org/actions/required_workflows/required_workflow_id/repositories",
      "text": "List selected repositories for a required workflow",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the selected repositories that are configured for a required workflow in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows/required_workflow_id/repositories",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_required_workflows_required_workflow_id_repositories": {
      "provider_intent": "put_orgs_org_actions_required_workflows_required_workflow_id_repositories",
      "provider_alias_intent": "/orgs/org/actions/required_workflows/required_workflow_id/repositories",
      "text": "Sets repositories for a required workflow",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_repository_ids": {
          "type": "array",
          "text": "The IDs of the repositories for which the workflow should be required"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the repositories for a required workflow that is required for selected repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows/required_workflow_id/repositories",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-selected-repositories-for-a-required-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_required_workflows_required_workflow_id_repositories_repository_id": {
      "provider_intent": "put_orgs_org_actions_required_workflows_required_workflow_id_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/actions/required_workflows/required_workflow_id/repositories/repository_id",
      "text": "Add a repository to a required workflow",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a repository to a required workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows/required_workflow_id/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#add-a-repository-to-selected-repositories-list-for-a-required-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_required_workflows_required_workflow_id_repositories_repository_id": {
      "provider_intent": "delete_orgs_org_actions_required_workflows_required_workflow_id_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/actions/required_workflows/required_workflow_id/repositories/repository_id",
      "text": "Remove a selected repository from required workflow",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "required_workflow_id": {
          "type": "integer",
          "text": "The unique identifier of the required workflow",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a repository from a required workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/actions/required_workflows/required_workflow_id/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#remove-a-repository-from-selected-repositories-list-for-a-required-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_runners": {
      "provider_intent": "get_orgs_org_actions_runners",
      "provider_alias_intent": "/orgs/org/actions/runners",
      "text": "List self-hosted runners for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all self-hosted runners configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners",
        "alias_endpoint": "/github/orgs/org/actions/runners",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_runners_downloads": {
      "provider_intent": "get_orgs_org_actions_runners_downloads",
      "provider_alias_intent": "/orgs/org/actions/runners/downloads",
      "text": "List runner applications for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists binaries for the runner application that you can download and run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/downloads",
        "alias_endpoint": "/github/orgs/org/actions/runners/downloads",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_actions_runners_registration-token": {
      "provider_intent": "post_orgs_org_actions_runners_registration-token",
      "provider_alias_intent": "/orgs/org/actions/runners/registration-token",
      "text": "Create a registration token for an organization",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a token that you can pass to the `config` script.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/registration-token",
        "alias_endpoint": "/github/orgs/org/actions/runners/registration-token",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_actions_runners_remove-token": {
      "provider_intent": "post_orgs_org_actions_runners_remove-token",
      "provider_alias_intent": "/orgs/org/actions/runners/remove-token",
      "text": "Create a remove token for an organization",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/remove-token",
        "alias_endpoint": "/github/orgs/org/actions/runners/remove-token",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_runners_runner_id": {
      "provider_intent": "get_orgs_org_actions_runners_runner_id",
      "provider_alias_intent": "/orgs/org/actions/runners/runner_id",
      "text": "Get a self-hosted runner for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific self-hosted runner configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/{runner_id}",
        "alias_endpoint": "/github/orgs/org/actions/runners/runner_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_runners_runner_id": {
      "provider_intent": "delete_orgs_org_actions_runners_runner_id",
      "provider_alias_intent": "/orgs/org/actions/runners/runner_id",
      "text": "Delete a self-hosted runner from an organization",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Forces the removal of a self-hosted runner from an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/{runner_id}",
        "alias_endpoint": "/github/orgs/org/actions/runners/runner_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_runners_runner_id_labels": {
      "provider_intent": "get_orgs_org_actions_runners_runner_id_labels",
      "provider_alias_intent": "/orgs/org/actions/runners/runner_id/labels",
      "text": "List labels for a self-hosted runner for an organization",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all labels for a self-hosted runner configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels",
        "alias_endpoint": "/github/orgs/org/actions/runners/runner_id/labels",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_actions_runners_runner_id_labels": {
      "provider_intent": "post_orgs_org_actions_runners_runner_id_labels",
      "provider_alias_intent": "/orgs/org/actions/runners/runner_id/labels",
      "text": "Add custom labels to a self-hosted runner for an organization",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "labels": {
          "type": "array",
          "text": "The names of the custom labels to add to the runner"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add custom labels to a self-hosted runner configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels",
        "alias_endpoint": "/github/orgs/org/actions/runners/runner_id/labels",
        "api_ref": "https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_runners_runner_id_labels": {
      "provider_intent": "put_orgs_org_actions_runners_runner_id_labels",
      "provider_alias_intent": "/orgs/org/actions/runners/runner_id/labels",
      "text": "Set custom labels for a self-hosted runner for an organization",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "labels": {
          "type": "array",
          "text": "The names of the custom labels to set for the runner"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels",
        "alias_endpoint": "/github/orgs/org/actions/runners/runner_id/labels",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_runners_runner_id_labels": {
      "provider_intent": "delete_orgs_org_actions_runners_runner_id_labels",
      "provider_alias_intent": "/orgs/org/actions/runners/runner_id/labels",
      "text": "Remove all custom labels from a self-hosted runner for an organization",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove all custom labels from a self-hosted runner configured in an\norganization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels",
        "alias_endpoint": "/github/orgs/org/actions/runners/runner_id/labels",
        "api_ref": "https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_runners_runner_id_labels_name": {
      "provider_intent": "delete_orgs_org_actions_runners_runner_id_labels_name",
      "provider_alias_intent": "/orgs/org/actions/runners/runner_id/labels/name",
      "text": "Remove a custom label from a self-hosted runner for an organization",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of a self-hosted runner's custom label",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of a self-hosted runner's custom label",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove a custom label from a self-hosted runner configured\nin an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels/{name}",
        "alias_endpoint": "/github/orgs/org/actions/runners/runner_id/labels/name",
        "api_ref": "https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_secrets": {
      "provider_intent": "get_orgs_org_actions_secrets",
      "provider_alias_intent": "/orgs/org/actions/secrets",
      "text": "List organization secrets",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all secrets available in an organization without revealing their encrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets",
        "alias_endpoint": "/github/orgs/org/actions/secrets",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-organization-secrets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_secrets_public-key": {
      "provider_intent": "get_orgs_org_actions_secrets_public-key",
      "provider_alias_intent": "/orgs/org/actions/secrets/public-key",
      "text": "Get an organization public key",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets your public key which you need to encrypt secrets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets/public-key",
        "alias_endpoint": "/github/orgs/org/actions/secrets/public-key",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-an-organization-public-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_secrets_secret_name": {
      "provider_intent": "get_orgs_org_actions_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/actions/secrets/secret_name",
      "text": "Get an organization secret",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a single organization secret without revealing its encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/actions/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_secrets_secret_name": {
      "provider_intent": "put_orgs_org_actions_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/actions/secrets/secret_name",
      "text": "Create or update an organization secret",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "encrypted_value": {
          "type": "string",
          "text": "Value for your secret encrypted with [LibSodium](https",
          "enum": [
            "",
            "",
            "libsodium"
          ]
        },
        "key_id": {
          "type": "string",
          "text": "ID of the key you used to encrypt the secret"
        },
        "visibility": {
          "type": "string",
          "text": "Which type of organization repositories have access to the organization secret"
        },
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids that can access the organization secret"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates an organization secret with an encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/actions/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_secrets_secret_name": {
      "provider_intent": "delete_orgs_org_actions_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/actions/secrets/secret_name",
      "text": "Delete an organization secret",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a secret in an organization using the secret name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/actions/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_secrets_secret_name_repositories": {
      "provider_intent": "get_orgs_org_actions_secrets_secret_name_repositories",
      "provider_alias_intent": "/orgs/org/actions/secrets/secret_name/repositories",
      "text": "List selected repositories for an organization secret",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories",
        "alias_endpoint": "/github/orgs/org/actions/secrets/secret_name/repositories",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_secrets_secret_name_repositories": {
      "provider_intent": "put_orgs_org_actions_secrets_secret_name_repositories",
      "provider_alias_intent": "/orgs/org/actions/secrets/secret_name/repositories",
      "text": "Set selected repositories for an organization secret",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids that can access the organization secret"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories",
        "alias_endpoint": "/github/orgs/org/actions/secrets/secret_name/repositories",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_secrets_secret_name_repositories_repository_id": {
      "provider_intent": "put_orgs_org_actions_secrets_secret_name_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/actions/secrets/secret_name/repositories/repository_id",
      "text": "Add selected repository to an organization secret",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/actions/secrets/secret_name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_secrets_secret_name_repositories_repository_id": {
      "provider_intent": "delete_orgs_org_actions_secrets_secret_name_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/actions/secrets/secret_name/repositories/repository_id",
      "text": "Remove selected repository from an organization secret",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/actions/secrets/secret_name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_variables": {
      "provider_intent": "get_orgs_org_actions_variables",
      "provider_alias_intent": "/orgs/org/actions/variables",
      "text": "List organization variables",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 30)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all organization variables.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables",
        "alias_endpoint": "/github/orgs/org/actions/variables",
        "api_ref": "https://docs.github.com/rest/actions/variables#list-organization-variables"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_actions_variables": {
      "provider_intent": "post_orgs_org_actions_variables",
      "provider_alias_intent": "/orgs/org/actions/variables",
      "text": "Create an organization variable",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the variable"
        },
        "value": {
          "type": "string",
          "text": "The value of the variable"
        },
        "visibility": {
          "type": "string",
          "text": "The type of repositories in the organization that can access the variable"
        },
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids that can access the organization variable"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates an organization variable that you can reference in a GitHub Actions workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables",
        "alias_endpoint": "/github/orgs/org/actions/variables",
        "api_ref": "https://docs.github.com/rest/actions/variables#create-an-organization-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_variables_name": {
      "provider_intent": "get_orgs_org_actions_variables_name",
      "provider_alias_intent": "/orgs/org/actions/variables/name",
      "text": "Get an organization variable",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific variable in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables/{name}",
        "alias_endpoint": "/github/orgs/org/actions/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#get-an-organization-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_orgs_org_actions_variables_name": {
      "provider_intent": "patch_orgs_org_actions_variables_name",
      "provider_alias_intent": "/orgs/org/actions/variables/name",
      "text": "Update an organization variable",
      "category": "Actions",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the variable"
        },
        "value": {
          "type": "string",
          "text": "The value of the variable"
        },
        "visibility": {
          "type": "string",
          "text": "The type of repositories in the organization that can access the variable"
        },
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids that can access the organization variable"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates an organization variable that you can reference in a GitHub Actions workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables/{name}",
        "alias_endpoint": "/github/orgs/org/actions/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#update-an-organization-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_variables_name": {
      "provider_intent": "delete_orgs_org_actions_variables_name",
      "provider_alias_intent": "/orgs/org/actions/variables/name",
      "text": "Delete an organization variable",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an organization variable using the variable name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables/{name}",
        "alias_endpoint": "/github/orgs/org/actions/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#delete-an-organization-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_variables_name_repositories": {
      "provider_intent": "get_orgs_org_actions_variables_name_repositories",
      "provider_alias_intent": "/orgs/org/actions/variables/name/repositories",
      "text": "List selected repositories for an organization variable",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all repositories that can access an organization variable that is available to selected repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories",
        "alias_endpoint": "/github/orgs/org/actions/variables/name/repositories",
        "api_ref": "https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_variables_name_repositories": {
      "provider_intent": "put_orgs_org_actions_variables_name_repositories",
      "provider_alias_intent": "/orgs/org/actions/variables/name/repositories",
      "text": "Set selected repositories for an organization variable",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_repository_ids": {
          "type": "array",
          "text": "The IDs of the repositories that can access the organization variable"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Replaces all repositories for an organization variable that is available to selected repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories",
        "alias_endpoint": "/github/orgs/org/actions/variables/name/repositories",
        "api_ref": "https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_variables_name_repositories_repository_id": {
      "provider_intent": "put_orgs_org_actions_variables_name_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/actions/variables/name/repositories/repository_id",
      "text": "Add selected repository to an organization variable",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a repository to an organization variable that is available to selected repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/actions/variables/name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_actions_variables_name_repositories_repository_id": {
      "provider_intent": "delete_orgs_org_actions_variables_name_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/actions/variables/name/repositories/repository_id",
      "text": "Remove selected repository from an organization variable",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a repository from an organization variable that is available to selected repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/actions/variables/name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_org_repo_actions_required_workflows": {
      "provider_intent": "get_repos_org_repo_actions_required_workflows",
      "provider_alias_intent": "/repos/org/repo/actions/required_workflows",
      "text": "List repository required workflows",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the required workflows in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{org}/{repo}/actions/required_workflows",
        "alias_endpoint": "/github/repos/org/repo/actions/required_workflows",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-repository-required-workflows"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_org_repo_actions_required_workflows_required_workflow_id_for_repo": {
      "provider_intent": "get_repos_org_repo_actions_required_workflows_required_workflow_id_for_repo",
      "provider_alias_intent": "/repos/org/repo/actions/required_workflows/required_workflow_id_for_repo",
      "text": "Get a required workflow entity for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "required_workflow_id_for_repo": {
          "type": "integer",
          "text": "The ID of the required workflow that has run at least once in a repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "required_workflow_id_for_repo": {
          "type": "integer",
          "text": "The ID of the required workflow that has run at least once in a repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific required workflow present in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}",
        "alias_endpoint": "/github/repos/org/repo/actions/required_workflows/required_workflow_id_for_repo",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-repository-required-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_org_repo_actions_required_workflows_required_workflow_id_for_repo_timing": {
      "provider_intent": "get_repos_org_repo_actions_required_workflows_required_workflow_id_for_repo_timing",
      "provider_alias_intent": "/repos/org/repo/actions/required_workflows/required_workflow_id_for_repo/timing",
      "text": "Get required workflow usage",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "required_workflow_id_for_repo": {
          "type": "integer",
          "text": "The ID of the required workflow that has run at least once in a repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "required_workflow_id_for_repo": {
          "type": "integer",
          "text": "The ID of the required workflow that has run at least once in a repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the number of billable minutes used by a specific required workflow during the current billing cycle.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing",
        "alias_endpoint": "/github/repos/org/repo/actions/required_workflows/required_workflow_id_for_repo/timing",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-repository-required-workflow-usage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_artifacts": {
      "provider_intent": "get_repos_owner_repo_actions_artifacts",
      "provider_alias_intent": "/repos/owner/repo/actions/artifacts",
      "text": "List artifacts for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "name": {
          "type": "string",
          "text": "Filters artifacts by exact match on their name field"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all artifacts for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/artifacts",
        "alias_endpoint": "/github/repos/owner/repo/actions/artifacts",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_artifacts_artifact_id": {
      "provider_intent": "get_repos_owner_repo_actions_artifacts_artifact_id",
      "provider_alias_intent": "/repos/owner/repo/actions/artifacts/artifact_id",
      "text": "Get an artifact",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "artifact_id": {
          "type": "integer",
          "text": "The unique identifier of the artifact",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "artifact_id": {
          "type": "integer",
          "text": "The unique identifier of the artifact",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific artifact for a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/artifacts/artifact_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-an-artifact"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_artifacts_artifact_id": {
      "provider_intent": "delete_repos_owner_repo_actions_artifacts_artifact_id",
      "provider_alias_intent": "/repos/owner/repo/actions/artifacts/artifact_id",
      "text": "Delete an artifact",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "artifact_id": {
          "type": "integer",
          "text": "The unique identifier of the artifact",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "artifact_id": {
          "type": "integer",
          "text": "The unique identifier of the artifact",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an artifact for a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/artifacts/artifact_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-an-artifact"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_artifacts_artifact_id_archive_format": {
      "provider_intent": "get_repos_owner_repo_actions_artifacts_artifact_id_archive_format",
      "provider_alias_intent": "/repos/owner/repo/actions/artifacts/artifact_id/archive_format",
      "text": "Download an artifact",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "artifact_id": {
          "type": "integer",
          "text": "The unique identifier of the artifact",
          "required": true
        },
        "archive_format": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "artifact_id": {
          "type": "integer",
          "text": "The unique identifier of the artifact",
          "required": true
        },
        "archive_format": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a redirect URL to download an archive for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
        "alias_endpoint": "/github/repos/owner/repo/actions/artifacts/artifact_id/archive_format",
        "api_ref": "https://docs.github.com/rest/reference/actions#download-an-artifact"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_cache_usage": {
      "provider_intent": "get_repos_owner_repo_actions_cache_usage",
      "provider_alias_intent": "/repos/owner/repo/actions/cache/usage",
      "text": "Get GitHub Actions cache usage for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets GitHub Actions cache usage for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/cache/usage",
        "alias_endpoint": "/github/repos/owner/repo/actions/cache/usage",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_caches": {
      "provider_intent": "get_repos_owner_repo_actions_caches",
      "provider_alias_intent": "/repos/owner/repo/actions/caches",
      "text": "List GitHub Actions caches for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "ref": {
          "type": "string",
          "text": "The full Git reference for narrowing down the cache"
        },
        "key": {
          "type": "string",
          "text": "An explicit key or prefix for identifying the cache"
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the GitHub Actions caches for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/caches",
        "alias_endpoint": "/github/repos/owner/repo/actions/caches",
        "api_ref": "https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_caches": {
      "provider_intent": "delete_repos_owner_repo_actions_caches",
      "provider_alias_intent": "/repos/owner/repo/actions/caches",
      "text": "Delete GitHub Actions caches for a repository (using a cache key)",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "key": {
          "type": "string",
          "text": "A key for identifying the cache",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "The full Git reference for narrowing down the cache"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes one or more GitHub Actions caches for a repository using a complete cache key.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/caches",
        "alias_endpoint": "/github/repos/owner/repo/actions/caches",
        "api_ref": "https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_caches_cache_id": {
      "provider_intent": "delete_repos_owner_repo_actions_caches_cache_id",
      "provider_alias_intent": "/repos/owner/repo/actions/caches/cache_id",
      "text": "Delete a GitHub Actions cache for a repository (using a cache ID)",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "cache_id": {
          "type": "integer",
          "text": "The unique identifier of the GitHub Actions cache",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "cache_id": {
          "type": "integer",
          "text": "The unique identifier of the GitHub Actions cache",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a GitHub Actions cache for a repository using a cache ID.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/caches/{cache_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/caches/cache_id",
        "api_ref": "https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_jobs_job_id": {
      "provider_intent": "get_repos_owner_repo_actions_jobs_job_id",
      "provider_alias_intent": "/repos/owner/repo/actions/jobs/job_id",
      "text": "Get a job for a workflow run",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "job_id": {
          "type": "integer",
          "text": "The unique identifier of the job",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "job_id": {
          "type": "integer",
          "text": "The unique identifier of the job",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific job in a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/jobs/job_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_jobs_job_id_logs": {
      "provider_intent": "get_repos_owner_repo_actions_jobs_job_id_logs",
      "provider_alias_intent": "/repos/owner/repo/actions/jobs/job_id/logs",
      "text": "Download job logs for a workflow run",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "job_id": {
          "type": "integer",
          "text": "The unique identifier of the job",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "job_id": {
          "type": "integer",
          "text": "The unique identifier of the job",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a redirect URL to download a plain text file of logs for a workflow job.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
        "alias_endpoint": "/github/repos/owner/repo/actions/jobs/job_id/logs",
        "api_ref": "https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_jobs_job_id_rerun": {
      "provider_intent": "post_repos_owner_repo_actions_jobs_job_id_rerun",
      "provider_alias_intent": "/repos/owner/repo/actions/jobs/job_id/rerun",
      "text": "Re-run a job from a workflow run",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "job_id": {
          "type": "integer",
          "text": "The unique identifier of the job",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "enable_debug_logging": {
          "type": "boolean",
          "text": "Whether to enable debug logging for the re-run",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "job_id": {
          "type": "integer",
          "text": "The unique identifier of the job",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Re-run a job and its dependent jobs in a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun",
        "alias_endpoint": "/github/repos/owner/repo/actions/jobs/job_id/rerun",
        "api_ref": "https://docs.github.com/rest/reference/actions#re-run-job-for-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_oidc_customization_sub": {
      "provider_intent": "get_repos_owner_repo_actions_oidc_customization_sub",
      "provider_alias_intent": "/repos/owner/repo/actions/oidc/customization/sub",
      "text": "Get the customization template for an OIDC subject claim for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the customization template for an OpenID Connect (OIDC) subject claim.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/oidc/customization/sub",
        "alias_endpoint": "/github/repos/owner/repo/actions/oidc/customization/sub",
        "api_ref": "https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_oidc_customization_sub": {
      "provider_intent": "put_repos_owner_repo_actions_oidc_customization_sub",
      "provider_alias_intent": "/repos/owner/repo/actions/oidc/customization/sub",
      "text": "Set the customization template for an OIDC subject claim for a repository",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "use_default": {
          "type": "boolean",
          "text": "Whether to use the default template or not",
          "enum": [
            true,
            false
          ]
        },
        "include_claim_keys": {
          "type": "array",
          "text": "Array of unique strings"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/oidc/customization/sub",
        "alias_endpoint": "/github/repos/owner/repo/actions/oidc/customization/sub",
        "api_ref": "https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_organization-secrets": {
      "provider_intent": "get_repos_owner_repo_actions_organization-secrets",
      "provider_alias_intent": "/repos/owner/repo/actions/organization-secrets",
      "text": "List repository organization secrets",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all organization secrets shared with a repository without revealing their encrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets",
        "alias_endpoint": "/github/repos/owner/repo/actions/organization-secrets",
        "api_ref": "https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_organization-variables": {
      "provider_intent": "get_repos_owner_repo_actions_organization-variables",
      "provider_alias_intent": "/repos/owner/repo/actions/organization-variables",
      "text": "List repository organization variables",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 30)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all organiation variables shared with a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/organization-variables",
        "alias_endpoint": "/github/repos/owner/repo/actions/organization-variables",
        "api_ref": "https://docs.github.com/rest/actions/variables#list-repository-organization-variables"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_permissions": {
      "provider_intent": "get_repos_owner_repo_actions_permissions",
      "provider_alias_intent": "/repos/owner/repo/actions/permissions",
      "text": "Get GitHub Actions permissions for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the GitHub Actions permissions policy for a repository including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/permissions",
        "alias_endpoint": "/github/repos/owner/repo/actions/permissions",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_permissions": {
      "provider_intent": "put_repos_owner_repo_actions_permissions",
      "provider_alias_intent": "/repos/owner/repo/actions/permissions",
      "text": "Set GitHub Actions permissions for a repository",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "enabled": {
          "type": "boolean",
          "text": "Whether GitHub Actions is enabled on the repository",
          "enum": [
            true,
            false
          ]
        },
        "allowed_actions": {
          "type": "string",
          "text": "The permissions policy that controls the actions and reusable workflows that are allowed to run"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/permissions",
        "alias_endpoint": "/github/repos/owner/repo/actions/permissions",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_permissions_access": {
      "provider_intent": "get_repos_owner_repo_actions_permissions_access",
      "provider_alias_intent": "/repos/owner/repo/actions/permissions/access",
      "text": "Get the level of access for workflows outside of the repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/permissions/access",
        "alias_endpoint": "/github/repos/owner/repo/actions/permissions/access",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-workflow-access-level-to-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_permissions_access": {
      "provider_intent": "put_repos_owner_repo_actions_permissions_access",
      "provider_alias_intent": "/repos/owner/repo/actions/permissions/access",
      "text": "Set the level of access for workflows outside of the repository",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "access_level": {
          "type": "string",
          "text": "Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the\nrepository"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/permissions/access",
        "alias_endpoint": "/github/repos/owner/repo/actions/permissions/access",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-workflow-access-to-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_permissions_selected-actions": {
      "provider_intent": "get_repos_owner_repo_actions_permissions_selected-actions",
      "provider_alias_intent": "/repos/owner/repo/actions/permissions/selected-actions",
      "text": "Get allowed actions and reusable workflows for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the settings for selected actions and reusable workflows that are allowed in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/permissions/selected-actions",
        "alias_endpoint": "/github/repos/owner/repo/actions/permissions/selected-actions",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_permissions_selected-actions": {
      "provider_intent": "put_repos_owner_repo_actions_permissions_selected-actions",
      "provider_alias_intent": "/repos/owner/repo/actions/permissions/selected-actions",
      "text": "Set allowed actions and reusable workflows for a repository",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "github_owned_allowed": {
          "type": "boolean",
          "text": "Whether GitHub-owned actions are allowed",
          "enum": [
            true,
            false
          ]
        },
        "verified_allowed": {
          "type": "boolean",
          "text": "Whether actions from GitHub Marketplace verified creators are allowed",
          "enum": [
            true,
            false
          ]
        },
        "patterns_allowed": {
          "type": "array",
          "text": "Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s)"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the actions and reusable workflows that are allowed in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/permissions/selected-actions",
        "alias_endpoint": "/github/repos/owner/repo/actions/permissions/selected-actions",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_permissions_workflow": {
      "provider_intent": "get_repos_owner_repo_actions_permissions_workflow",
      "provider_alias_intent": "/repos/owner/repo/actions/permissions/workflow",
      "text": "Get default workflow permissions for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository\nas well as if GitHub Actions can submit approving pull request reviews.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/permissions/workflow",
        "alias_endpoint": "/github/repos/owner/repo/actions/permissions/workflow",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-default-workflow-permissions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_permissions_workflow": {
      "provider_intent": "put_repos_owner_repo_actions_permissions_workflow",
      "provider_alias_intent": "/repos/owner/repo/actions/permissions/workflow",
      "text": "Set default workflow permissions for a repository",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "default_workflow_permissions": {
          "type": "string",
          "text": "The default workflow permissions granted to the GITHUB_TOKEN when running workflows"
        },
        "can_approve_pull_request_reviews": {
          "type": "boolean",
          "text": "Whether GitHub Actions can approve pull requests",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository and sets if GitHub Actions\ncan submit approving pull request reviews.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/permissions/workflow",
        "alias_endpoint": "/github/repos/owner/repo/actions/permissions/workflow",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-default-workflow-permissions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_required_workflows_required_workflow_id_for_repo_runs": {
      "provider_intent": "get_repos_owner_repo_actions_required_workflows_required_workflow_id_for_repo_runs",
      "provider_alias_intent": "/repos/owner/repo/actions/required_workflows/required_workflow_id_for_repo/runs",
      "text": "List workflow runs for a required workflow",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "required_workflow_id_for_repo": {
          "type": "integer",
          "text": "The ID of the required workflow that has run at least once in a repository",
          "required": true
        },
        "actor": {
          "type": "string",
          "text": "Returns someone's workflow runs"
        },
        "branch": {
          "type": "string",
          "text": "Returns workflow runs associated with a branch"
        },
        "event": {
          "type": "string",
          "text": "Returns workflow run triggered by the event you specify"
        },
        "status": {
          "type": "string",
          "text": "Returns workflow runs with the check run `status` or `conclusion` that you specify"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "created": {
          "type": "string",
          "text": "Returns workflow runs created within the given date-time range"
        },
        "exclude_pull_requests": {
          "type": "boolean",
          "text": "If `true` pull requests are omitted from the response (empty array)",
          "enum": [
            true,
            false
          ]
        },
        "check_suite_id": {
          "type": "integer",
          "text": "Returns workflow runs with the `check_suite_id` that you specify"
        },
        "head_sha": {
          "type": "string",
          "text": "Only returns workflow runs that are associated with the specified `head_sha`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "required_workflow_id_for_repo": {
          "type": "integer",
          "text": "The ID of the required workflow that has run at least once in a repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all workflow runs for a required workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs",
        "alias_endpoint": "/github/repos/owner/repo/actions/required_workflows/required_workflow_id_for_repo/runs",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-required-workflow-runs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runners": {
      "provider_intent": "get_repos_owner_repo_actions_runners",
      "provider_alias_intent": "/repos/owner/repo/actions/runners",
      "text": "List self-hosted runners for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all self-hosted runners configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runners_downloads": {
      "provider_intent": "get_repos_owner_repo_actions_runners_downloads",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/downloads",
      "text": "List runner applications for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists binaries for the runner application that you can download and run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/downloads",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/downloads",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runners_registration-token": {
      "provider_intent": "post_repos_owner_repo_actions_runners_registration-token",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/registration-token",
      "text": "Create a registration token for a repository",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a token that you can pass to the `config` script.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/registration-token",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/registration-token",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runners_remove-token": {
      "provider_intent": "post_repos_owner_repo_actions_runners_remove-token",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/remove-token",
      "text": "Create a remove token for a repository",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a token that you can pass to remove a self-hosted runner from a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/remove-token",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/remove-token",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runners_runner_id": {
      "provider_intent": "get_repos_owner_repo_actions_runners_runner_id",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/runner_id",
      "text": "Get a self-hosted runner for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific self-hosted runner configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/runner_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_runners_runner_id": {
      "provider_intent": "delete_repos_owner_repo_actions_runners_runner_id",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/runner_id",
      "text": "Delete a self-hosted runner from a repository",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Forces the removal of a self-hosted runner from a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/runner_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runners_runner_id_labels": {
      "provider_intent": "get_repos_owner_repo_actions_runners_runner_id_labels",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/runner_id/labels",
      "text": "List labels for a self-hosted runner for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all labels for a self-hosted runner configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/runner_id/labels",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runners_runner_id_labels": {
      "provider_intent": "post_repos_owner_repo_actions_runners_runner_id_labels",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/runner_id/labels",
      "text": "Add custom labels to a self-hosted runner for a repository",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "labels": {
          "type": "array",
          "text": "The names of the custom labels to add to the runner"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add custom labels to a self-hosted runner configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/runner_id/labels",
        "api_ref": "https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_runners_runner_id_labels": {
      "provider_intent": "put_repos_owner_repo_actions_runners_runner_id_labels",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/runner_id/labels",
      "text": "Set custom labels for a self-hosted runner for a repository",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "labels": {
          "type": "array",
          "text": "The names of the custom labels to set for the runner"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/runner_id/labels",
        "api_ref": "https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_runners_runner_id_labels": {
      "provider_intent": "delete_repos_owner_repo_actions_runners_runner_id_labels",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/runner_id/labels",
      "text": "Remove all custom labels from a self-hosted runner for a repository",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove all custom labels from a self-hosted runner configured in a\nrepository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/runner_id/labels",
        "api_ref": "https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_runners_runner_id_labels_name": {
      "provider_intent": "delete_repos_owner_repo_actions_runners_runner_id_labels_name",
      "provider_alias_intent": "/repos/owner/repo/actions/runners/runner_id/labels/name",
      "text": "Remove a custom label from a self-hosted runner for a repository",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of a self-hosted runner's custom label",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "runner_id": {
          "type": "integer",
          "text": "Unique identifier of the self-hosted runner",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of a self-hosted runner's custom label",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove a custom label from a self-hosted runner configured\nin a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}",
        "alias_endpoint": "/github/repos/owner/repo/actions/runners/runner_id/labels/name",
        "api_ref": "https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs": {
      "provider_intent": "get_repos_owner_repo_actions_runs",
      "provider_alias_intent": "/repos/owner/repo/actions/runs",
      "text": "List workflow runs for a repository",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "actor": {
          "type": "string",
          "text": "Returns someone's workflow runs"
        },
        "branch": {
          "type": "string",
          "text": "Returns workflow runs associated with a branch"
        },
        "event": {
          "type": "string",
          "text": "Returns workflow run triggered by the event you specify"
        },
        "status": {
          "type": "string",
          "text": "Returns workflow runs with the check run `status` or `conclusion` that you specify"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "created": {
          "type": "string",
          "text": "Returns workflow runs created within the given date-time range"
        },
        "exclude_pull_requests": {
          "type": "boolean",
          "text": "If `true` pull requests are omitted from the response (empty array)",
          "enum": [
            true,
            false
          ]
        },
        "check_suite_id": {
          "type": "integer",
          "text": "Returns workflow runs with the `check_suite_id` that you specify"
        },
        "head_sha": {
          "type": "string",
          "text": "Only returns workflow runs that are associated with the specified `head_sha`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all workflow runs for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id",
      "text": "Get a workflow run",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "exclude_pull_requests": {
          "type": "boolean",
          "text": "If `true` pull requests are omitted from the response (empty array)",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_runs_run_id": {
      "provider_intent": "delete_repos_owner_repo_actions_runs_run_id",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id",
      "text": "Delete a workflow run",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Delete a specific workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_approvals": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_approvals",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/approvals",
      "text": "Get the review history for a workflow run",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Anyone with read access to the repository can use this endpoint.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/approvals",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/approvals",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runs_run_id_approve": {
      "provider_intent": "post_repos_owner_repo_actions_runs_run_id_approve",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/approve",
      "text": "Approve a workflow run for a fork pull request",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Approves a workflow run for a pull request from a public fork of a first time contributor.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/approve",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/approve",
        "api_ref": "https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_artifacts": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_artifacts",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/artifacts",
      "text": "List workflow run artifacts",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists artifacts for a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/artifacts",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_attempts_attempt_number": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_attempts_attempt_number",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/attempts/attempt_number",
      "text": "Get a workflow run attempt",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "attempt_number": {
          "type": "integer",
          "text": "The attempt number of the workflow run",
          "required": true
        },
        "exclude_pull_requests": {
          "type": "boolean",
          "text": "If `true` pull requests are omitted from the response (empty array)",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "attempt_number": {
          "type": "integer",
          "text": "The attempt number of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific workflow run attempt.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/attempts/attempt_number",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_attempts_attempt_number_jobs": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_attempts_attempt_number_jobs",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/attempts/attempt_number/jobs",
      "text": "List jobs for a workflow run attempt",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "attempt_number": {
          "type": "integer",
          "text": "The attempt number of the workflow run",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "attempt_number": {
          "type": "integer",
          "text": "The attempt number of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists jobs for a specific workflow run attempt.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/attempts/attempt_number/jobs",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_attempts_attempt_number_logs": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_attempts_attempt_number_logs",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/attempts/attempt_number/logs",
      "text": "Download workflow run attempt logs",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "attempt_number": {
          "type": "integer",
          "text": "The attempt number of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "attempt_number": {
          "type": "integer",
          "text": "The attempt number of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a redirect URL to download an archive of log files for a specific workflow run attempt.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/attempts/attempt_number/logs",
        "api_ref": "https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runs_run_id_cancel": {
      "provider_intent": "post_repos_owner_repo_actions_runs_run_id_cancel",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/cancel",
      "text": "Cancel a workflow run",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Cancels a workflow run using its `id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/cancel",
        "api_ref": "https://docs.github.com/rest/reference/actions#cancel-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runs_run_id_deployment_protection_rule": {
      "provider_intent": "post_repos_owner_repo_actions_runs_run_id_deployment_protection_rule",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/deployment_protection_rule",
      "text": "Review custom deployment protection rules for a workflow run",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/deployment_protection_rule",
        "api_ref": "https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_jobs": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_jobs",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/jobs",
      "text": "List jobs for a workflow run",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        },
        "filter": {
          "type": "string",
          "text": "Filters jobs by their `completed_at` timestamp"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists jobs for a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/jobs",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_logs": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_logs",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/logs",
      "text": "Download workflow run logs",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a redirect URL to download an archive of log files for a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/logs",
        "api_ref": "https://docs.github.com/rest/reference/actions#download-workflow-run-logs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_runs_run_id_logs": {
      "provider_intent": "delete_repos_owner_repo_actions_runs_run_id_logs",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/logs",
      "text": "Delete workflow run logs",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes all logs for a workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/logs",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-workflow-run-logs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_pending_deployments": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_pending_deployments",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/pending_deployments",
      "text": "Get pending deployments for a workflow run",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get all deployment environments for a workflow run that are waiting for protection rules to pass.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/pending_deployments",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runs_run_id_pending_deployments": {
      "provider_intent": "post_repos_owner_repo_actions_runs_run_id_pending_deployments",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/pending_deployments",
      "text": "Review pending deployments for a workflow run",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "environment_ids": {
          "type": "array",
          "text": "The list of environment ids to approve or reject"
        },
        "state": {
          "type": "string",
          "text": "Whether to approve or reject deployment to the specified environments"
        },
        "comment": {
          "type": "string",
          "text": "A comment to accompany the deployment review"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Approve or reject pending deployments that are waiting on approval by a required reviewer.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/pending_deployments",
        "api_ref": "https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runs_run_id_rerun": {
      "provider_intent": "post_repos_owner_repo_actions_runs_run_id_rerun",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/rerun",
      "text": "Re-run a workflow",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "enable_debug_logging": {
          "type": "boolean",
          "text": "Whether to enable debug logging for the re-run",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Re-runs your workflow run using its `id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/rerun",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/rerun",
        "api_ref": "https://docs.github.com/rest/reference/actions#re-run-a-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_runs_run_id_rerun-failed-jobs": {
      "provider_intent": "post_repos_owner_repo_actions_runs_run_id_rerun-failed-jobs",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/rerun-failed-jobs",
      "text": "Re-run failed jobs from a workflow run",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "enable_debug_logging": {
          "type": "boolean",
          "text": "Whether to enable debug logging for the re-run",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/rerun-failed-jobs",
        "api_ref": "https://docs.github.com/rest/reference/actions#re-run-workflow-failed-jobs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_runs_run_id_timing": {
      "provider_intent": "get_repos_owner_repo_actions_runs_run_id_timing",
      "provider_alias_intent": "/repos/owner/repo/actions/runs/run_id/timing",
      "text": "Get workflow run usage",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "run_id": {
          "type": "integer",
          "text": "The unique identifier of the workflow run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the number of billable minutes and total run time for a specific workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/timing",
        "alias_endpoint": "/github/repos/owner/repo/actions/runs/run_id/timing",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-workflow-run-usage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_secrets": {
      "provider_intent": "get_repos_owner_repo_actions_secrets",
      "provider_alias_intent": "/repos/owner/repo/actions/secrets",
      "text": "List repository secrets",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all secrets available in a repository without revealing their encrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/secrets",
        "alias_endpoint": "/github/repos/owner/repo/actions/secrets",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-repository-secrets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_secrets_public-key": {
      "provider_intent": "get_repos_owner_repo_actions_secrets_public-key",
      "provider_alias_intent": "/repos/owner/repo/actions/secrets/public-key",
      "text": "Get a repository public key",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets your public key which you need to encrypt secrets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key",
        "alias_endpoint": "/github/repos/owner/repo/actions/secrets/public-key",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-repository-public-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_secrets_secret_name": {
      "provider_intent": "get_repos_owner_repo_actions_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/actions/secrets/secret_name",
      "text": "Get a repository secret",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a single repository secret without revealing its encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/actions/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_secrets_secret_name": {
      "provider_intent": "put_repos_owner_repo_actions_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/actions/secrets/secret_name",
      "text": "Create or update a repository secret",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "encrypted_value": {
          "type": "string",
          "text": "Value for your secret encrypted with [LibSodium](https",
          "enum": [
            "",
            "",
            "libsodium"
          ]
        },
        "key_id": {
          "type": "string",
          "text": "ID of the key you used to encrypt the secret"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates a repository secret with an encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/actions/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_secrets_secret_name": {
      "provider_intent": "delete_repos_owner_repo_actions_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/actions/secrets/secret_name",
      "text": "Delete a repository secret",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a secret in a repository using the secret name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/actions/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_variables": {
      "provider_intent": "get_repos_owner_repo_actions_variables",
      "provider_alias_intent": "/repos/owner/repo/actions/variables",
      "text": "List repository variables",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 30)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all repository variables.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/variables",
        "alias_endpoint": "/github/repos/owner/repo/actions/variables",
        "api_ref": "https://docs.github.com/rest/actions/variables#list-repository-variables"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_variables": {
      "provider_intent": "post_repos_owner_repo_actions_variables",
      "provider_alias_intent": "/repos/owner/repo/actions/variables",
      "text": "Create a repository variable",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the variable"
        },
        "value": {
          "type": "string",
          "text": "The value of the variable"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a repository variable that you can reference in a GitHub Actions workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/variables",
        "alias_endpoint": "/github/repos/owner/repo/actions/variables",
        "api_ref": "https://docs.github.com/rest/actions/variables#create-a-repository-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_variables_name": {
      "provider_intent": "get_repos_owner_repo_actions_variables_name",
      "provider_alias_intent": "/repos/owner/repo/actions/variables/name",
      "text": "Get a repository variable",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific variable in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}",
        "alias_endpoint": "/github/repos/owner/repo/actions/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#get-a-repository-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_actions_variables_name": {
      "provider_intent": "patch_repos_owner_repo_actions_variables_name",
      "provider_alias_intent": "/repos/owner/repo/actions/variables/name",
      "text": "Update a repository variable",
      "category": "Actions",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the variable"
        },
        "value": {
          "type": "string",
          "text": "The value of the variable"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates a repository variable that you can reference in a GitHub Actions workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}",
        "alias_endpoint": "/github/repos/owner/repo/actions/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#update-a-repository-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_actions_variables_name": {
      "provider_intent": "delete_repos_owner_repo_actions_variables_name",
      "provider_alias_intent": "/repos/owner/repo/actions/variables/name",
      "text": "Delete a repository variable",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a repository variable using the variable name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}",
        "alias_endpoint": "/github/repos/owner/repo/actions/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#delete-a-repository-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_workflows": {
      "provider_intent": "get_repos_owner_repo_actions_workflows",
      "provider_alias_intent": "/repos/owner/repo/actions/workflows",
      "text": "List repository workflows",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the workflows in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/workflows",
        "alias_endpoint": "/github/repos/owner/repo/actions/workflows",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-repository-workflows"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_workflows_workflow_id": {
      "provider_intent": "get_repos_owner_repo_actions_workflows_workflow_id",
      "provider_alias_intent": "/repos/owner/repo/actions/workflows/workflow_id",
      "text": "Get a workflow",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
        "alias_endpoint": "/github/repos/owner/repo/actions/workflows/workflow_id",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-a-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_workflows_workflow_id_disable": {
      "provider_intent": "put_repos_owner_repo_actions_workflows_workflow_id_disable",
      "provider_alias_intent": "/repos/owner/repo/actions/workflows/workflow_id/disable",
      "text": "Disable a workflow",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Disables a workflow and sets the `state` of the workflow to `disabled_manually`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable",
        "alias_endpoint": "/github/repos/owner/repo/actions/workflows/workflow_id/disable",
        "api_ref": "https://docs.github.com/rest/reference/actions#disable-a-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_actions_workflows_workflow_id_dispatches": {
      "provider_intent": "post_repos_owner_repo_actions_workflows_workflow_id_dispatches",
      "provider_alias_intent": "/repos/owner/repo/actions/workflows/workflow_id/dispatches",
      "text": "Create a workflow dispatch event",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "ref": {
          "type": "string",
          "text": "The git reference for the workflow"
        },
        "inputs": {
          "type": "object",
          "text": "Input keys and values configured in the workflow file"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can use this endpoint to manually trigger a GitHub Actions workflow run.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
        "alias_endpoint": "/github/repos/owner/repo/actions/workflows/workflow_id/dispatches",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_actions_workflows_workflow_id_enable": {
      "provider_intent": "put_repos_owner_repo_actions_workflows_workflow_id_enable",
      "provider_alias_intent": "/repos/owner/repo/actions/workflows/workflow_id/enable",
      "text": "Enable a workflow",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables a workflow and sets the `state` of the workflow to `active`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable",
        "alias_endpoint": "/github/repos/owner/repo/actions/workflows/workflow_id/enable",
        "api_ref": "https://docs.github.com/rest/reference/actions#enable-a-workflow"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_workflows_workflow_id_runs": {
      "provider_intent": "get_repos_owner_repo_actions_workflows_workflow_id_runs",
      "provider_alias_intent": "/repos/owner/repo/actions/workflows/workflow_id/runs",
      "text": "List workflow runs for a workflow",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        },
        "actor": {
          "type": "string",
          "text": "Returns someone's workflow runs"
        },
        "branch": {
          "type": "string",
          "text": "Returns workflow runs associated with a branch"
        },
        "event": {
          "type": "string",
          "text": "Returns workflow run triggered by the event you specify"
        },
        "status": {
          "type": "string",
          "text": "Returns workflow runs with the check run `status` or `conclusion` that you specify"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "created": {
          "type": "string",
          "text": "Returns workflow runs created within the given date-time range"
        },
        "exclude_pull_requests": {
          "type": "boolean",
          "text": "If `true` pull requests are omitted from the response (empty array)",
          "enum": [
            true,
            false
          ]
        },
        "check_suite_id": {
          "type": "integer",
          "text": "Returns workflow runs with the `check_suite_id` that you specify"
        },
        "head_sha": {
          "type": "string",
          "text": "Only returns workflow runs that are associated with the specified `head_sha`"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all workflow runs for a workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
        "alias_endpoint": "/github/repos/owner/repo/actions/workflows/workflow_id/runs",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-workflow-runs"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_actions_workflows_workflow_id_timing": {
      "provider_intent": "get_repos_owner_repo_actions_workflows_workflow_id_timing",
      "provider_alias_intent": "/repos/owner/repo/actions/workflows/workflow_id/timing",
      "text": "Get workflow usage",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "workflow_id": {
          "type": "undefined",
          "text": "The ID of the workflow",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the number of billable minutes used by a specific workflow during the current billing cycle.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
        "alias_endpoint": "/github/repos/owner/repo/actions/workflows/workflow_id/timing",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-workflow-usage"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repositories_repository_id_environments_environment_name_secrets": {
      "provider_intent": "get_repositories_repository_id_environments_environment_name_secrets",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/secrets",
      "text": "List environment secrets",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all secrets available in an environment without revealing their encrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/secrets",
        "api_ref": "https://docs.github.com/rest/reference/actions#list-environment-secrets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repositories_repository_id_environments_environment_name_secrets_public-key": {
      "provider_intent": "get_repositories_repository_id_environments_environment_name_secrets_public-key",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/secrets/public-key",
      "text": "Get an environment public key",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get the public key for an environment which you need to encrypt environment secrets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/public-key",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/secrets/public-key",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-an-environment-public-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repositories_repository_id_environments_environment_name_secrets_secret_name": {
      "provider_intent": "get_repositories_repository_id_environments_environment_name_secrets_secret_name",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/secrets/secret_name",
      "text": "Get an environment secret",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a single environment secret without revealing its encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#get-an-environment-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repositories_repository_id_environments_environment_name_secrets_secret_name": {
      "provider_intent": "put_repositories_repository_id_environments_environment_name_secrets_secret_name",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/secrets/secret_name",
      "text": "Create or update an environment secret",
      "category": "Actions",
      "method": "PUT",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "encrypted_value": {
          "type": "string",
          "text": "Value for your secret encrypted with [LibSodium](https",
          "enum": [
            "",
            "",
            "libsodium"
          ]
        },
        "key_id": {
          "type": "string",
          "text": "ID of the key you used to encrypt the secret"
        }
      },
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates an environment secret with an encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repositories_repository_id_environments_environment_name_secrets_secret_name": {
      "provider_intent": "delete_repositories_repository_id_environments_environment_name_secrets_secret_name",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/secrets/secret_name",
      "text": "Delete an environment secret",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a secret in an environment using the secret name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/actions#delete-an-environment-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repositories_repository_id_environments_environment_name_variables": {
      "provider_intent": "get_repositories_repository_id_environments_environment_name_variables",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/variables",
      "text": "List environment variables",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 30)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all environment variables.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/variables",
        "api_ref": "https://docs.github.com/rest/actions/variables#list-environment-variables"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repositories_repository_id_environments_environment_name_variables": {
      "provider_intent": "post_repositories_repository_id_environments_environment_name_variables",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/variables",
      "text": "Create an environment variable",
      "category": "Actions",
      "method": "POST",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the variable"
        },
        "value": {
          "type": "string",
          "text": "The value of the variable"
        }
      },
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create an environment variable that you can reference in a GitHub Actions workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/variables",
        "api_ref": "https://docs.github.com/rest/actions/variables#create-an-environment-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repositories_repository_id_environments_environment_name_variables_name": {
      "provider_intent": "get_repositories_repository_id_environments_environment_name_variables_name",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/variables/name",
      "text": "Get an environment variable",
      "category": "Actions",
      "method": "GET",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific variable in an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables/{name}",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#get-an-environment-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repositories_repository_id_environments_environment_name_variables_name": {
      "provider_intent": "patch_repositories_repository_id_environments_environment_name_variables_name",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/variables/name",
      "text": "Update an environment variable",
      "category": "Actions",
      "method": "PATCH",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the variable"
        },
        "value": {
          "type": "string",
          "text": "The value of the variable"
        }
      },
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates an environment variable that you can reference in a GitHub Actions workflow.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables/{name}",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#update-an-environment-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repositories_repository_id_environments_environment_name_variables_name": {
      "provider_intent": "delete_repositories_repository_id_environments_environment_name_variables_name",
      "provider_alias_intent": "/repositories/repository_id/environments/environment_name/variables/name",
      "text": "Delete an environment variable",
      "category": "Actions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The name of the variable",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an environment variable using the variable name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables/{name}",
        "alias_endpoint": "/github/repositories/repository_id/environments/environment_name/variables/name",
        "api_ref": "https://docs.github.com/rest/actions/variables#delete-an-environment-variable"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_events": {
      "provider_intent": "get_events",
      "provider_alias_intent": "/events",
      "text": "List public events",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "We delay the public events feed by five minutes which means the most recent event returned by the public events API actually occurred at least five minutes ago.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/events",
        "alias_endpoint": "/github/events",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-public-events"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_feeds": {
      "provider_intent": "get_feeds",
      "provider_alias_intent": "/feeds",
      "text": "Get feeds",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "GitHub provides several timeline resources in [Atom](http://en.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/feeds",
        "alias_endpoint": "/github/feeds",
        "api_ref": "https://docs.github.com/rest/reference/activity#get-feeds"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_networks_owner_repo_events": {
      "provider_intent": "get_networks_owner_repo_events",
      "provider_alias_intent": "/networks/owner/repo/events",
      "text": "List public events for a network of repositories",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/networks/{owner}/{repo}/events",
        "alias_endpoint": "/github/networks/owner/repo/events",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_notifications": {
      "provider_intent": "get_notifications",
      "provider_alias_intent": "/notifications",
      "text": "List notifications for the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "all": {
          "type": "boolean",
          "text": "If `true` show notifications marked as read",
          "enum": [
            true,
            false
          ]
        },
        "participating": {
          "type": "boolean",
          "text": "If `true` only shows notifications in which the user is directly participating or mentioned",
          "enum": [
            true,
            false
          ]
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "before": {
          "type": "string",
          "text": "Only show notifications updated before the given time"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 50)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all notifications for the current user sorted by most recently updated.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/notifications",
        "alias_endpoint": "/github/notifications",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_notifications": {
      "provider_intent": "put_notifications",
      "provider_alias_intent": "/notifications",
      "text": "Mark notifications as read",
      "category": "Activity",
      "method": "PUT",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "last_read_at": {
          "type": "string",
          "text": "Describes the last point that notifications were checked"
        },
        "read": {
          "type": "boolean",
          "text": "Whether the notification has been read",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Marks all notifications as \"read\" for the current user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/notifications",
        "alias_endpoint": "/github/notifications",
        "api_ref": "https://docs.github.com/rest/reference/activity#mark-notifications-as-read"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_notifications_threads_thread_id": {
      "provider_intent": "get_notifications_threads_thread_id",
      "provider_alias_intent": "/notifications/threads/thread_id",
      "text": "Get a thread",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a notification thread.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/notifications/threads/{thread_id}",
        "alias_endpoint": "/github/notifications/threads/thread_id",
        "api_ref": "https://docs.github.com/rest/reference/activity#get-a-thread"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_notifications_threads_thread_id": {
      "provider_intent": "patch_notifications_threads_thread_id",
      "provider_alias_intent": "/notifications/threads/thread_id",
      "text": "Mark a thread as read",
      "category": "Activity",
      "method": "PATCH",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Marks a thread as \"read.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/notifications/threads/{thread_id}",
        "alias_endpoint": "/github/notifications/threads/thread_id",
        "api_ref": "https://docs.github.com/rest/reference/activity#mark-a-thread-as-read"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_notifications_threads_thread_id_subscription": {
      "provider_intent": "get_notifications_threads_thread_id_subscription",
      "provider_alias_intent": "/notifications/threads/thread_id/subscription",
      "text": "Get a thread subscription for the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This checks to see if the current user is subscribed to a thread.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/notifications/threads/{thread_id}/subscription",
        "alias_endpoint": "/github/notifications/threads/thread_id/subscription",
        "api_ref": "https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_notifications_threads_thread_id_subscription": {
      "provider_intent": "put_notifications_threads_thread_id_subscription",
      "provider_alias_intent": "/notifications/threads/thread_id/subscription",
      "text": "Set a thread subscription",
      "category": "Activity",
      "method": "PUT",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "ignored": {
          "type": "boolean",
          "text": "Whether to block all notifications from a thread",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "If you are watching a repository you receive notifications for all threads by default.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/notifications/threads/{thread_id}/subscription",
        "alias_endpoint": "/github/notifications/threads/thread_id/subscription",
        "api_ref": "https://docs.github.com/rest/reference/activity#set-a-thread-subscription"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_notifications_threads_thread_id_subscription": {
      "provider_intent": "delete_notifications_threads_thread_id_subscription",
      "provider_alias_intent": "/notifications/threads/thread_id/subscription",
      "text": "Delete a thread subscription",
      "category": "Activity",
      "method": "DELETE",
      "type": "API",
      "params": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "thread_id": {
          "type": "integer",
          "text": "The unique identifier of the notification thread",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/notifications/threads/{thread_id}/subscription",
        "alias_endpoint": "/github/notifications/threads/thread_id/subscription",
        "api_ref": "https://docs.github.com/rest/reference/activity#delete-a-thread-subscription"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_events": {
      "provider_intent": "get_orgs_org_events",
      "provider_alias_intent": "/orgs/org/events",
      "text": "List public organization events",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/events",
        "alias_endpoint": "/github/orgs/org/events",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-public-organization-events"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_events": {
      "provider_intent": "get_repos_owner_repo_events",
      "provider_alias_intent": "/repos/owner/repo/events",
      "text": "List repository events",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note**: This API is not built to serve real-time use cases.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/events",
        "alias_endpoint": "/github/repos/owner/repo/events",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-repository-events"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_notifications": {
      "provider_intent": "get_repos_owner_repo_notifications",
      "provider_alias_intent": "/repos/owner/repo/notifications",
      "text": "List repository notifications for the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "all": {
          "type": "boolean",
          "text": "If `true` show notifications marked as read",
          "enum": [
            true,
            false
          ]
        },
        "participating": {
          "type": "boolean",
          "text": "If `true` only shows notifications in which the user is directly participating or mentioned",
          "enum": [
            true,
            false
          ]
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "before": {
          "type": "string",
          "text": "Only show notifications updated before the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all notifications for the current user in the specified repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/notifications",
        "alias_endpoint": "/github/repos/owner/repo/notifications",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_notifications": {
      "provider_intent": "put_repos_owner_repo_notifications",
      "provider_alias_intent": "/repos/owner/repo/notifications",
      "text": "Mark repository notifications as read",
      "category": "Activity",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "last_read_at": {
          "type": "string",
          "text": "Describes the last point that notifications were checked"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Marks all notifications in a repository as \"read\" for the current user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/notifications",
        "alias_endpoint": "/github/repos/owner/repo/notifications",
        "api_ref": "https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_stargazers": {
      "provider_intent": "get_repos_owner_repo_stargazers",
      "provider_alias_intent": "/repos/owner/repo/stargazers",
      "text": "List stargazers",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the people that have starred the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/stargazers",
        "alias_endpoint": "/github/repos/owner/repo/stargazers",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-stargazers"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_subscribers": {
      "provider_intent": "get_repos_owner_repo_subscribers",
      "provider_alias_intent": "/repos/owner/repo/subscribers",
      "text": "List watchers",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the people watching the specified repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/subscribers",
        "alias_endpoint": "/github/repos/owner/repo/subscribers",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-watchers"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_subscription": {
      "provider_intent": "get_repos_owner_repo_subscription",
      "provider_alias_intent": "/repos/owner/repo/subscription",
      "text": "Get a repository subscription",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/subscription",
        "alias_endpoint": "/github/repos/owner/repo/subscription",
        "api_ref": "https://docs.github.com/rest/reference/activity#get-a-repository-subscription"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_subscription": {
      "provider_intent": "put_repos_owner_repo_subscription",
      "provider_alias_intent": "/repos/owner/repo/subscription",
      "text": "Set a repository subscription",
      "category": "Activity",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "subscribed": {
          "type": "boolean",
          "text": "Determines if notifications should be received from this repository",
          "enum": [
            true,
            false
          ]
        },
        "ignored": {
          "type": "boolean",
          "text": "Determines if all notifications should be blocked from this repository",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "If you would like to watch a repository set `subscribed` to `true`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/subscription",
        "alias_endpoint": "/github/repos/owner/repo/subscription",
        "api_ref": "https://docs.github.com/rest/reference/activity#set-a-repository-subscription"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_subscription": {
      "provider_intent": "delete_repos_owner_repo_subscription",
      "provider_alias_intent": "/repos/owner/repo/subscription",
      "text": "Delete a repository subscription",
      "category": "Activity",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This endpoint should only be used to stop watching a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/subscription",
        "alias_endpoint": "/github/repos/owner/repo/subscription",
        "api_ref": "https://docs.github.com/rest/reference/activity#delete-a-repository-subscription"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_starred": {
      "provider_intent": "get_user_starred",
      "provider_alias_intent": "/user/starred",
      "text": "List repositories starred by the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists repositories the authenticated user has starred.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/starred",
        "alias_endpoint": "/github/user/starred",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_starred_owner_repo": {
      "provider_intent": "get_user_starred_owner_repo",
      "provider_alias_intent": "/user/starred/owner/repo",
      "text": "Check if a repository is starred by the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/starred/{owner}/{repo}",
        "alias_endpoint": "/github/user/starred/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_user_starred_owner_repo": {
      "provider_intent": "put_user_starred_owner_repo",
      "provider_alias_intent": "/user/starred/owner/repo",
      "text": "Star a repository for the authenticated user",
      "category": "Activity",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/starred/{owner}/{repo}",
        "alias_endpoint": "/github/user/starred/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/activity#star-a-repository-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_starred_owner_repo": {
      "provider_intent": "delete_user_starred_owner_repo",
      "provider_alias_intent": "/user/starred/owner/repo",
      "text": "Unstar a repository for the authenticated user",
      "category": "Activity",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/starred/{owner}/{repo}",
        "alias_endpoint": "/github/user/starred/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_subscriptions": {
      "provider_intent": "get_user_subscriptions",
      "provider_alias_intent": "/user/subscriptions",
      "text": "List repositories watched by the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists repositories the authenticated user is watching.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/subscriptions",
        "alias_endpoint": "/github/user/subscriptions",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_events": {
      "provider_intent": "get_users_username_events",
      "provider_alias_intent": "/users/username/events",
      "text": "List events for the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "If you are authenticated as the given user you will see your private events.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/events",
        "alias_endpoint": "/github/users/username/events",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_events_orgs_org": {
      "provider_intent": "get_users_username_events_orgs_org",
      "provider_alias_intent": "/users/username/events/orgs/org",
      "text": "List organization events for the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This is the user's organization dashboard.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/events/orgs/{org}",
        "alias_endpoint": "/github/users/username/events/orgs/org",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_events_public": {
      "provider_intent": "get_users_username_events_public",
      "provider_alias_intent": "/users/username/events/public",
      "text": "List public events for a user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/events/public",
        "alias_endpoint": "/github/users/username/events/public",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-public-events-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_received_events": {
      "provider_intent": "get_users_username_received_events",
      "provider_alias_intent": "/users/username/received_events",
      "text": "List events received by the authenticated user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "These are events that you've received by watching repos and following users.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/received_events",
        "alias_endpoint": "/github/users/username/received_events",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_received_events_public": {
      "provider_intent": "get_users_username_received_events_public",
      "provider_alias_intent": "/users/username/received_events/public",
      "text": "List public events received by a user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/received_events/public",
        "alias_endpoint": "/github/users/username/received_events/public",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_starred": {
      "provider_intent": "get_users_username_starred",
      "provider_alias_intent": "/users/username/starred",
      "text": "List repositories starred by a user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists repositories a user has starred.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/starred",
        "alias_endpoint": "/github/users/username/starred",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_subscriptions": {
      "provider_intent": "get_users_username_subscriptions",
      "provider_alias_intent": "/users/username/subscriptions",
      "text": "List repositories watched by a user",
      "category": "Activity",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists repositories a user is watching.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/subscriptions",
        "alias_endpoint": "/github/users/username/subscriptions",
        "api_ref": "https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_app": {
      "provider_intent": "get_app",
      "provider_alias_intent": "/app",
      "text": "Get the authenticated app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns the GitHub App associated with the authentication credentials used.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app",
        "alias_endpoint": "/github/app",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-the-authenticated-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_app-manifests_code_conversions": {
      "provider_intent": "post_app-manifests_code_conversions",
      "provider_alias_intent": "/app-manifests/code/conversions",
      "text": "Create a GitHub App from a manifest",
      "category": "Apps",
      "method": "POST",
      "type": "API",
      "params": {
        "code": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "code": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app-manifests/{code}/conversions",
        "alias_endpoint": "/github/app-manifests/code/conversions",
        "api_ref": "https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_app_hook_config": {
      "provider_intent": "get_app_hook_config",
      "provider_alias_intent": "/app/hook/config",
      "text": "Get a webhook configuration for an app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns the webhook configuration for a GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/hook/config",
        "alias_endpoint": "/github/app/hook/config",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-a-webhook-configuration-for-an-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_app_hook_config": {
      "provider_intent": "patch_app_hook_config",
      "provider_alias_intent": "/app/hook/config",
      "text": "Update a webhook configuration for an app",
      "category": "Apps",
      "method": "PATCH",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "url": {
          "type": "string",
          "text": "The URL to which the payloads will be delivered"
        },
        "content_type": {
          "type": "string",
          "text": "The media type used to serialize the payloads"
        },
        "secret": {
          "type": "string",
          "text": "If provided the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "insecure_ssl": {
          "type": "undefined"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates the webhook configuration for a GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/hook/config",
        "alias_endpoint": "/github/app/hook/config",
        "api_ref": "https://docs.github.com/rest/reference/apps#update-a-webhook-configuration-for-an-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_app_hook_deliveries": {
      "provider_intent": "get_app_hook_deliveries",
      "provider_alias_intent": "/app/hook/deliveries",
      "text": "List deliveries for an app webhook",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "cursor": {
          "type": "string",
          "text": "Used for pagination",
          "enum": [
            "the starting delivery from which the page of deliveries is fetched"
          ]
        },
        "redelivery": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a list of webhook deliveries for the webhook configured for a GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/hook/deliveries",
        "alias_endpoint": "/github/app/hook/deliveries",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-deliveries-for-an-app-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_app_hook_deliveries_delivery_id": {
      "provider_intent": "get_app_hook_deliveries_delivery_id",
      "provider_alias_intent": "/app/hook/deliveries/delivery_id",
      "text": "Get a delivery for an app webhook",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a delivery for the webhook configured for a GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/hook/deliveries/{delivery_id}",
        "alias_endpoint": "/github/app/hook/deliveries/delivery_id",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-a-delivery-for-an-app-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_app_hook_deliveries_delivery_id_attempts": {
      "provider_intent": "post_app_hook_deliveries_delivery_id_attempts",
      "provider_alias_intent": "/app/hook/deliveries/delivery_id/attempts",
      "text": "Redeliver a delivery for an app webhook",
      "category": "Apps",
      "method": "POST",
      "type": "API",
      "params": {
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Redeliver a delivery for the webhook configured for a GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/hook/deliveries/{delivery_id}/attempts",
        "alias_endpoint": "/github/app/hook/deliveries/delivery_id/attempts",
        "api_ref": "https://docs.github.com/rest/reference/apps#redeliver-a-delivery-for-an-app-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_app_installation-requests": {
      "provider_intent": "get_app_installation-requests",
      "provider_alias_intent": "/app/installation-requests",
      "text": "List installation requests for the authenticated app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all the pending installation requests for the authenticated GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/installation-requests",
        "alias_endpoint": "/github/app/installation-requests",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-installation-requests-for-the-authenticated-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_app_installations": {
      "provider_intent": "get_app_installations",
      "provider_alias_intent": "/app/installations",
      "text": "List installations for the authenticated app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "outdated": {
          "type": "string"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You must use a [JWT](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/installations",
        "alias_endpoint": "/github/app/installations",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_app_installations_installation_id": {
      "provider_intent": "get_app_installations_installation_id",
      "provider_alias_intent": "/app/installations/installation_id",
      "text": "Get an installation for the authenticated app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables an authenticated GitHub App to find an installation's information using the installation id.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/installations/{installation_id}",
        "alias_endpoint": "/github/app/installations/installation_id",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-an-installation-for-the-authenticated-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_app_installations_installation_id": {
      "provider_intent": "delete_app_installations_installation_id",
      "provider_alias_intent": "/app/installations/installation_id",
      "text": "Delete an installation for the authenticated app",
      "category": "Apps",
      "method": "DELETE",
      "type": "API",
      "params": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Uninstalls a GitHub App on a user organization or business account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/installations/{installation_id}",
        "alias_endpoint": "/github/app/installations/installation_id",
        "api_ref": "https://docs.github.com/rest/reference/apps#delete-an-installation-for-the-authenticated-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_app_installations_installation_id_access_tokens": {
      "provider_intent": "post_app_installations_installation_id_access_tokens",
      "provider_alias_intent": "/app/installations/installation_id/access_tokens",
      "text": "Create an installation access token for an app",
      "category": "Apps",
      "method": "POST",
      "type": "API",
      "params": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "repositories": {
          "type": "array",
          "text": "List of repository names that the token should have access to"
        },
        "repository_ids": {
          "type": "array",
          "text": "List of repository IDs that the token should have access to"
        },
        "permissions": {
          "type": "object",
          "text": "The permissions granted to the user-to-server access token"
        }
      },
      "path": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/installations/{installation_id}/access_tokens",
        "alias_endpoint": "/github/app/installations/installation_id/access_tokens",
        "api_ref": "https://docs.github.com/rest/reference/apps/#create-an-installation-access-token-for-an-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_app_installations_installation_id_suspended": {
      "provider_intent": "put_app_installations_installation_id_suspended",
      "provider_alias_intent": "/app/installations/installation_id/suspended",
      "text": "Suspend an app installation",
      "category": "Apps",
      "method": "PUT",
      "type": "API",
      "params": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Suspends a GitHub App on a user organization or business account which blocks the app from accessing the account's resources.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/installations/{installation_id}/suspended",
        "alias_endpoint": "/github/app/installations/installation_id/suspended",
        "api_ref": "https://docs.github.com/rest/reference/apps#suspend-an-app-installation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_app_installations_installation_id_suspended": {
      "provider_intent": "delete_app_installations_installation_id_suspended",
      "provider_alias_intent": "/app/installations/installation_id/suspended",
      "text": "Unsuspend an app installation",
      "category": "Apps",
      "method": "DELETE",
      "type": "API",
      "params": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a GitHub App installation suspension.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/app/installations/{installation_id}/suspended",
        "alias_endpoint": "/github/app/installations/installation_id/suspended",
        "api_ref": "https://docs.github.com/rest/reference/apps#unsuspend-an-app-installation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_applications_client_id_grant": {
      "provider_intent": "delete_applications_client_id_grant",
      "provider_alias_intent": "/applications/client_id/grant",
      "text": "Delete an app authorization",
      "category": "Apps",
      "method": "DELETE",
      "type": "API",
      "params": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "access_token": {
          "type": "string",
          "text": "The OAuth access token used to authenticate to the GitHub API"
        }
      },
      "path": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "OAuth and GitHub application owners can revoke a grant for their application and a specific user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/applications/{client_id}/grant",
        "alias_endpoint": "/github/applications/client_id/grant",
        "api_ref": "https://docs.github.com/rest/reference/apps#delete-an-app-authorization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_applications_client_id_token": {
      "provider_intent": "post_applications_client_id_token",
      "provider_alias_intent": "/applications/client_id/token",
      "text": "Check a token",
      "category": "Apps",
      "method": "POST",
      "type": "API",
      "params": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "access_token": {
          "type": "string",
          "text": "The access_token of the OAuth or GitHub application"
        }
      },
      "path": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/applications/{client_id}/token",
        "alias_endpoint": "/github/applications/client_id/token",
        "api_ref": "https://docs.github.com/rest/reference/apps#check-a-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_applications_client_id_token": {
      "provider_intent": "patch_applications_client_id_token",
      "provider_alias_intent": "/applications/client_id/token",
      "text": "Reset a token",
      "category": "Apps",
      "method": "PATCH",
      "type": "API",
      "params": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "access_token": {
          "type": "string",
          "text": "The access_token of the OAuth or GitHub application"
        }
      },
      "path": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/applications/{client_id}/token",
        "alias_endpoint": "/github/applications/client_id/token",
        "api_ref": "https://docs.github.com/rest/reference/apps#reset-a-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_applications_client_id_token": {
      "provider_intent": "delete_applications_client_id_token",
      "provider_alias_intent": "/applications/client_id/token",
      "text": "Delete an app token",
      "category": "Apps",
      "method": "DELETE",
      "type": "API",
      "params": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "access_token": {
          "type": "string",
          "text": "The OAuth access token used to authenticate to the GitHub API"
        }
      },
      "path": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/applications/{client_id}/token",
        "alias_endpoint": "/github/applications/client_id/token",
        "api_ref": "https://docs.github.com/rest/reference/apps#delete-an-app-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_applications_client_id_token_scoped": {
      "provider_intent": "post_applications_client_id_token_scoped",
      "provider_alias_intent": "/applications/client_id/token/scoped",
      "text": "Create a scoped access token",
      "category": "Apps",
      "method": "POST",
      "type": "API",
      "params": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "access_token": {
          "type": "string",
          "text": "The access token used to authenticate to the GitHub API"
        },
        "target": {
          "type": "string",
          "text": "The name of the user or organization to scope the user-to-server access token to"
        },
        "target_id": {
          "type": "integer",
          "text": "The ID of the user or organization to scope the user-to-server access token to"
        },
        "repositories": {
          "type": "array",
          "text": "The list of repository names to scope the user-to-server access token to"
        },
        "repository_ids": {
          "type": "array",
          "text": "The list of repository IDs to scope the user-to-server access token to"
        },
        "permissions": {
          "type": "object",
          "text": "The permissions granted to the user-to-server access token"
        }
      },
      "path": {
        "client_id": {
          "type": "string",
          "text": "The client ID of the GitHub app",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Use a non-scoped user-to-server access token to create a repository scoped and/or permission scoped user-to-server access token.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/applications/{client_id}/token/scoped",
        "alias_endpoint": "/github/applications/client_id/token/scoped",
        "api_ref": "https://docs.github.com/rest/apps/apps#create-a-scoped-access-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_apps_app_slug": {
      "provider_intent": "get_apps_app_slug",
      "provider_alias_intent": "/apps/app_slug",
      "text": "Get an app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "app_slug": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "app_slug": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/apps/{app_slug}",
        "alias_endpoint": "/github/apps/app_slug",
        "api_ref": "https://docs.github.com/rest/reference/apps/#get-an-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_installation_repositories": {
      "provider_intent": "get_installation_repositories",
      "provider_alias_intent": "/installation/repositories",
      "text": "List repositories accessible to the app installation",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List repositories that an app installation can access.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/installation/repositories",
        "alias_endpoint": "/github/installation/repositories",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_installation_token": {
      "provider_intent": "delete_installation_token",
      "provider_alias_intent": "/installation/token",
      "text": "Revoke an installation access token",
      "category": "Apps",
      "method": "DELETE",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Revokes the installation token you're using to authenticate as an installation and access this endpoint.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/installation/token",
        "alias_endpoint": "/github/installation/token",
        "api_ref": "https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_marketplace_listing_accounts_account_id": {
      "provider_intent": "get_marketplace_listing_accounts_account_id",
      "provider_alias_intent": "/marketplace_listing/accounts/account_id",
      "text": "Get a subscription plan for an account",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "account_id": {
          "type": "integer",
          "text": "account_id parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "integer",
          "text": "account_id parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/marketplace_listing/accounts/{account_id}",
        "alias_endpoint": "/github/marketplace_listing/accounts/account_id",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_marketplace_listing_plans": {
      "provider_intent": "get_marketplace_listing_plans",
      "provider_alias_intent": "/marketplace_listing/plans",
      "text": "List plans",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all plans that are part of your GitHub Marketplace listing.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/marketplace_listing/plans",
        "alias_endpoint": "/github/marketplace_listing/plans",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-plans"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_marketplace_listing_plans_plan_id_accounts": {
      "provider_intent": "get_marketplace_listing_plans_plan_id_accounts",
      "provider_alias_intent": "/marketplace_listing/plans/plan_id/accounts",
      "text": "List accounts for a plan",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "plan_id": {
          "type": "integer",
          "text": "The unique identifier of the plan",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "To return the oldest accounts first set to `asc`"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "plan_id": {
          "type": "integer",
          "text": "The unique identifier of the plan",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns user and organization accounts associated with the specified plan including free plans.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/marketplace_listing/plans/{plan_id}/accounts",
        "alias_endpoint": "/github/marketplace_listing/plans/plan_id/accounts",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_marketplace_listing_stubbed_accounts_account_id": {
      "provider_intent": "get_marketplace_listing_stubbed_accounts_account_id",
      "provider_alias_intent": "/marketplace_listing/stubbed/accounts/account_id",
      "text": "Get a subscription plan for an account (stubbed)",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "account_id": {
          "type": "integer",
          "text": "account_id parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "account_id": {
          "type": "integer",
          "text": "account_id parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/marketplace_listing/stubbed/accounts/{account_id}",
        "alias_endpoint": "/github/marketplace_listing/stubbed/accounts/account_id",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account-stubbed"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_marketplace_listing_stubbed_plans": {
      "provider_intent": "get_marketplace_listing_stubbed_plans",
      "provider_alias_intent": "/marketplace_listing/stubbed/plans",
      "text": "List plans (stubbed)",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all plans that are part of your GitHub Marketplace listing.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/marketplace_listing/stubbed/plans",
        "alias_endpoint": "/github/marketplace_listing/stubbed/plans",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-plans-stubbed"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_marketplace_listing_stubbed_plans_plan_id_accounts": {
      "provider_intent": "get_marketplace_listing_stubbed_plans_plan_id_accounts",
      "provider_alias_intent": "/marketplace_listing/stubbed/plans/plan_id/accounts",
      "text": "List accounts for a plan (stubbed)",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "plan_id": {
          "type": "integer",
          "text": "The unique identifier of the plan",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "To return the oldest accounts first set to `asc`"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "plan_id": {
          "type": "integer",
          "text": "The unique identifier of the plan",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns repository and organization accounts associated with the specified plan including free plans.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/marketplace_listing/stubbed/plans/{plan_id}/accounts",
        "alias_endpoint": "/github/marketplace_listing/stubbed/plans/plan_id/accounts",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_installation": {
      "provider_intent": "get_orgs_org_installation",
      "provider_alias_intent": "/orgs/org/installation",
      "text": "Get an organization installation for the authenticated app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables an authenticated GitHub App to find the organization's installation information.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/installation",
        "alias_endpoint": "/github/orgs/org/installation",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_installation": {
      "provider_intent": "get_repos_owner_repo_installation",
      "provider_alias_intent": "/repos/owner/repo/installation",
      "text": "Get a repository installation for the authenticated app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables an authenticated GitHub App to find the repository's installation information.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/installation",
        "alias_endpoint": "/github/repos/owner/repo/installation",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_installations": {
      "provider_intent": "get_user_installations",
      "provider_alias_intent": "/user/installations",
      "text": "List app installations accessible to the user access token",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read` `:write` or `:admin`) to access.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/installations",
        "alias_endpoint": "/github/user/installations",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_installations_installation_id_repositories": {
      "provider_intent": "get_user_installations_installation_id_repositories",
      "provider_alias_intent": "/user/installations/installation_id/repositories",
      "text": "List repositories accessible to the user access token",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List repositories that the authenticated user has explicit permission (`:read` `:write` or `:admin`) to access for an installation.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/installations/{installation_id}/repositories",
        "alias_endpoint": "/github/user/installations/installation_id/repositories",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_user_installations_installation_id_repositories_repository_id": {
      "provider_intent": "put_user_installations_installation_id_repositories_repository_id",
      "provider_alias_intent": "/user/installations/installation_id/repositories/repository_id",
      "text": "Add a repository to an app installation",
      "category": "Apps",
      "method": "PUT",
      "type": "API",
      "params": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add a single repository to an installation.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/installations/{installation_id}/repositories/{repository_id}",
        "alias_endpoint": "/github/user/installations/installation_id/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_installations_installation_id_repositories_repository_id": {
      "provider_intent": "delete_user_installations_installation_id_repositories_repository_id",
      "provider_alias_intent": "/user/installations/installation_id/repositories/repository_id",
      "text": "Remove a repository from an app installation",
      "category": "Apps",
      "method": "DELETE",
      "type": "API",
      "params": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "installation_id": {
          "type": "integer",
          "text": "The unique identifier of the installation",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "text": "The unique identifier of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Remove a single repository from an installation.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/installations/{installation_id}/repositories/{repository_id}",
        "alias_endpoint": "/github/user/installations/installation_id/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_marketplace_purchases": {
      "provider_intent": "get_user_marketplace_purchases",
      "provider_alias_intent": "/user/marketplace_purchases",
      "text": "List subscriptions for the authenticated user",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the active subscriptions for the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/marketplace_purchases",
        "alias_endpoint": "/github/user/marketplace_purchases",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_marketplace_purchases_stubbed": {
      "provider_intent": "get_user_marketplace_purchases_stubbed",
      "provider_alias_intent": "/user/marketplace_purchases/stubbed",
      "text": "List subscriptions for the authenticated user (stubbed)",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the active subscriptions for the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/marketplace_purchases/stubbed",
        "alias_endpoint": "/github/user/marketplace_purchases/stubbed",
        "api_ref": "https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_installation": {
      "provider_intent": "get_users_username_installation",
      "provider_alias_intent": "/users/username/installation",
      "text": "Get a user installation for the authenticated app",
      "category": "Apps",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables an authenticated GitHub App to find the user’s installation information.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/installation",
        "alias_endpoint": "/github/users/username/installation",
        "api_ref": "https://docs.github.com/rest/reference/apps#get-a-user-installation-for-the-authenticated-app"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_settings_billing_actions": {
      "provider_intent": "get_orgs_org_settings_billing_actions",
      "provider_alias_intent": "/orgs/org/settings/billing/actions",
      "text": "Get GitHub Actions billing for an organization",
      "category": "Billing",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the summary of the free and paid GitHub Actions minutes used.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/settings/billing/actions",
        "alias_endpoint": "/github/orgs/org/settings/billing/actions",
        "api_ref": "https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_settings_billing_packages": {
      "provider_intent": "get_orgs_org_settings_billing_packages",
      "provider_alias_intent": "/orgs/org/settings/billing/packages",
      "text": "Get GitHub Packages billing for an organization",
      "category": "Billing",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the free and paid storage used for GitHub Packages in gigabytes.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/settings/billing/packages",
        "alias_endpoint": "/github/orgs/org/settings/billing/packages",
        "api_ref": "https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_settings_billing_shared-storage": {
      "provider_intent": "get_orgs_org_settings_billing_shared-storage",
      "provider_alias_intent": "/orgs/org/settings/billing/shared-storage",
      "text": "Get shared storage billing for an organization",
      "category": "Billing",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/settings/billing/shared-storage",
        "alias_endpoint": "/github/orgs/org/settings/billing/shared-storage",
        "api_ref": "https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_settings_billing_actions": {
      "provider_intent": "get_users_username_settings_billing_actions",
      "provider_alias_intent": "/users/username/settings/billing/actions",
      "text": "Get GitHub Actions billing for a user",
      "category": "Billing",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the summary of the free and paid GitHub Actions minutes used.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/settings/billing/actions",
        "alias_endpoint": "/github/users/username/settings/billing/actions",
        "api_ref": "https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_settings_billing_packages": {
      "provider_intent": "get_users_username_settings_billing_packages",
      "provider_alias_intent": "/users/username/settings/billing/packages",
      "text": "Get GitHub Packages billing for a user",
      "category": "Billing",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the free and paid storage used for GitHub Packages in gigabytes.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/settings/billing/packages",
        "alias_endpoint": "/github/users/username/settings/billing/packages",
        "api_ref": "https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_settings_billing_shared-storage": {
      "provider_intent": "get_users_username_settings_billing_shared-storage",
      "provider_alias_intent": "/users/username/settings/billing/shared-storage",
      "text": "Get shared storage billing for a user",
      "category": "Billing",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/settings/billing/shared-storage",
        "alias_endpoint": "/github/users/username/settings/billing/shared-storage",
        "api_ref": "https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_check-runs": {
      "provider_intent": "post_repos_owner_repo_check-runs",
      "provider_alias_intent": "/repos/owner/repo/check-runs",
      "text": "Create a check run",
      "category": "Checks",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the check"
        },
        "head_sha": {
          "type": "string",
          "text": "The SHA of the commit"
        },
        "details_url": {
          "type": "string",
          "text": "The URL of the integrator's site that has the full details of the check"
        },
        "external_id": {
          "type": "string",
          "text": "A reference for the run on the integrator's system"
        },
        "status": {
          "type": "string",
          "text": "The current status"
        },
        "started_at": {
          "type": "string",
          "text": "The time that the check run began"
        },
        "conclusion": {
          "type": "string",
          "text": "**Required if you provide `completed_at` or a `status` of `completed`**"
        },
        "completed_at": {
          "type": "string",
          "text": "The time the check completed"
        },
        "output": {
          "type": "object",
          "text": "Check runs can accept a variety of data in the `output` object including a `title` and `summary` and can optionally provide descriptive details about the run"
        },
        "actions": {
          "type": "array",
          "text": "Displays a button on GitHub that can be clicked to alert your app to do additional tasks"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-runs",
        "alias_endpoint": "/github/repos/owner/repo/check-runs",
        "api_ref": "https://docs.github.com/rest/reference/checks#create-a-check-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_check-runs_check_run_id": {
      "provider_intent": "get_repos_owner_repo_check-runs_check_run_id",
      "provider_alias_intent": "/repos/owner/repo/check-runs/check_run_id",
      "text": "Get a check run",
      "category": "Checks",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_run_id": {
          "type": "integer",
          "text": "The unique identifier of the check run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_run_id": {
          "type": "integer",
          "text": "The unique identifier of the check run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}",
        "alias_endpoint": "/github/repos/owner/repo/check-runs/check_run_id",
        "api_ref": "https://docs.github.com/rest/reference/checks#get-a-check-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_check-runs_check_run_id": {
      "provider_intent": "patch_repos_owner_repo_check-runs_check_run_id",
      "provider_alias_intent": "/repos/owner/repo/check-runs/check_run_id",
      "text": "Update a check run",
      "category": "Checks",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_run_id": {
          "type": "integer",
          "text": "The unique identifier of the check run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the check"
        },
        "details_url": {
          "type": "string",
          "text": "The URL of the integrator's site that has the full details of the check"
        },
        "external_id": {
          "type": "string",
          "text": "A reference for the run on the integrator's system"
        },
        "started_at": {
          "type": "string",
          "text": "This is a timestamp in [ISO 8601](https",
          "enum": [
            "",
            "",
            "en"
          ]
        },
        "status": {
          "type": "string",
          "text": "The current status"
        },
        "conclusion": {
          "type": "string",
          "text": "**Required if you provide `completed_at` or a `status` of `completed`**"
        },
        "completed_at": {
          "type": "string",
          "text": "The time the check completed"
        },
        "output": {
          "type": "object",
          "text": "Check runs can accept a variety of data in the `output` object including a `title` and `summary` and can optionally provide descriptive details about the run"
        },
        "actions": {
          "type": "array",
          "text": "Possible further actions the integrator can perform which a user may trigger"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_run_id": {
          "type": "integer",
          "text": "The unique identifier of the check run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}",
        "alias_endpoint": "/github/repos/owner/repo/check-runs/check_run_id",
        "api_ref": "https://docs.github.com/rest/reference/checks#update-a-check-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_check-runs_check_run_id_annotations": {
      "provider_intent": "get_repos_owner_repo_check-runs_check_run_id_annotations",
      "provider_alias_intent": "/repos/owner/repo/check-runs/check_run_id/annotations",
      "text": "List check run annotations",
      "category": "Checks",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_run_id": {
          "type": "integer",
          "text": "The unique identifier of the check run",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_run_id": {
          "type": "integer",
          "text": "The unique identifier of the check run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists annotations for a check run using the annotation `id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
        "alias_endpoint": "/github/repos/owner/repo/check-runs/check_run_id/annotations",
        "api_ref": "https://docs.github.com/rest/reference/checks#list-check-run-annotations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_check-runs_check_run_id_rerequest": {
      "provider_intent": "post_repos_owner_repo_check-runs_check_run_id_rerequest",
      "provider_alias_intent": "/repos/owner/repo/check-runs/check_run_id/rerequest",
      "text": "Rerequest a check run",
      "category": "Checks",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_run_id": {
          "type": "integer",
          "text": "The unique identifier of the check run",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_run_id": {
          "type": "integer",
          "text": "The unique identifier of the check run",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Triggers GitHub to rerequest an existing check run without pushing new code to a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest",
        "alias_endpoint": "/github/repos/owner/repo/check-runs/check_run_id/rerequest",
        "api_ref": "https://docs.github.com/rest/reference/checks#rerequest-a-check-run"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_check-suites": {
      "provider_intent": "post_repos_owner_repo_check-suites",
      "provider_alias_intent": "/repos/owner/repo/check-suites",
      "text": "Create a check suite",
      "category": "Checks",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "head_sha": {
          "type": "string",
          "text": "The sha of the head commit"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-suites",
        "alias_endpoint": "/github/repos/owner/repo/check-suites",
        "api_ref": "https://docs.github.com/rest/reference/checks#create-a-check-suite"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_check-suites_preferences": {
      "provider_intent": "patch_repos_owner_repo_check-suites_preferences",
      "provider_alias_intent": "/repos/owner/repo/check-suites/preferences",
      "text": "Update repository preferences for check suites",
      "category": "Checks",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "auto_trigger_checks": {
          "type": "array",
          "text": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Changes the default automatic flow when creating check suites.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-suites/preferences",
        "alias_endpoint": "/github/repos/owner/repo/check-suites/preferences",
        "api_ref": "https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_check-suites_check_suite_id": {
      "provider_intent": "get_repos_owner_repo_check-suites_check_suite_id",
      "provider_alias_intent": "/repos/owner/repo/check-suites/check_suite_id",
      "text": "Get a check suite",
      "category": "Checks",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_suite_id": {
          "type": "integer",
          "text": "The unique identifier of the check suite",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_suite_id": {
          "type": "integer",
          "text": "The unique identifier of the check suite",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}",
        "alias_endpoint": "/github/repos/owner/repo/check-suites/check_suite_id",
        "api_ref": "https://docs.github.com/rest/reference/checks#get-a-check-suite"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_check-suites_check_suite_id_check-runs": {
      "provider_intent": "get_repos_owner_repo_check-suites_check_suite_id_check-runs",
      "provider_alias_intent": "/repos/owner/repo/check-suites/check_suite_id/check-runs",
      "text": "List check runs in a check suite",
      "category": "Checks",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_suite_id": {
          "type": "integer",
          "text": "The unique identifier of the check suite",
          "required": true
        },
        "check_name": {
          "type": "string",
          "text": "Returns check runs with the specified `name`"
        },
        "status": {
          "type": "string",
          "text": "Returns check runs with the specified `status`"
        },
        "filter": {
          "type": "string",
          "text": "Filters check runs by their `completed_at` timestamp"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_suite_id": {
          "type": "integer",
          "text": "The unique identifier of the check suite",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
        "alias_endpoint": "/github/repos/owner/repo/check-suites/check_suite_id/check-runs",
        "api_ref": "https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_check-suites_check_suite_id_rerequest": {
      "provider_intent": "post_repos_owner_repo_check-suites_check_suite_id_rerequest",
      "provider_alias_intent": "/repos/owner/repo/check-suites/check_suite_id/rerequest",
      "text": "Rerequest a check suite",
      "category": "Checks",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_suite_id": {
          "type": "integer",
          "text": "The unique identifier of the check suite",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "check_suite_id": {
          "type": "integer",
          "text": "The unique identifier of the check suite",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Triggers GitHub to rerequest an existing check suite without pushing new code to a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
        "alias_endpoint": "/github/repos/owner/repo/check-suites/check_suite_id/rerequest",
        "api_ref": "https://docs.github.com/rest/reference/checks#rerequest-a-check-suite"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits_ref_check-runs": {
      "provider_intent": "get_repos_owner_repo_commits_ref_check-runs",
      "provider_alias_intent": "/repos/owner/repo/commits/ref/check-runs",
      "text": "List check runs for a Git reference",
      "category": "Checks",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        },
        "check_name": {
          "type": "string",
          "text": "Returns check runs with the specified `name`"
        },
        "status": {
          "type": "string",
          "text": "Returns check runs with the specified `status`"
        },
        "filter": {
          "type": "string",
          "text": "Filters check runs by their `completed_at` timestamp"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "app_id": {
          "type": "integer"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{ref}/check-runs",
        "alias_endpoint": "/github/repos/owner/repo/commits/ref/check-runs",
        "api_ref": "https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits_ref_check-suites": {
      "provider_intent": "get_repos_owner_repo_commits_ref_check-suites",
      "provider_alias_intent": "/repos/owner/repo/commits/ref/check-suites",
      "text": "List check suites for a Git reference",
      "category": "Checks",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        },
        "app_id": {
          "type": "integer",
          "text": "Filters check suites by GitHub App `id`"
        },
        "check_name": {
          "type": "string",
          "text": "Returns check runs with the specified `name`"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{ref}/check-suites",
        "alias_endpoint": "/github/repos/owner/repo/commits/ref/check-suites",
        "api_ref": "https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_code-scanning_alerts": {
      "provider_intent": "get_orgs_org_code-scanning_alerts",
      "provider_alias_intent": "/orgs/org/code-scanning/alerts",
      "text": "List code scanning alerts for an organization",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "tool_name": {
          "type": "string",
          "text": "The name of a code scanning tool"
        },
        "tool_guid": {
          "type": "string",
          "text": "The GUID of a code scanning tool"
        },
        "before": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "after": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "state": {
          "type": "string",
          "text": "If specified only code scanning alerts with this state will be returned"
        },
        "sort": {
          "type": "string",
          "text": "The property by which to sort the results"
        },
        "severity": {
          "type": "string",
          "text": "If specified only code scanning alerts with this severity will be returned"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists code scanning alerts for the default branch for all eligible repositories in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/code-scanning/alerts",
        "alias_endpoint": "/github/orgs/org/code-scanning/alerts",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_alerts": {
      "provider_intent": "get_repos_owner_repo_code-scanning_alerts",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/alerts",
      "text": "List code scanning alerts for a repository",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tool_name": {
          "type": "string",
          "text": "The name of a code scanning tool"
        },
        "tool_guid": {
          "type": "string",
          "text": "The GUID of a code scanning tool"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "ref": {
          "type": "string",
          "text": "The Git reference for the results you want to list"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "sort": {
          "type": "string",
          "text": "The property by which to sort the results"
        },
        "state": {
          "type": "string",
          "text": "If specified only code scanning alerts with this state will be returned"
        },
        "severity": {
          "type": "string",
          "text": "If specified only code scanning alerts with this severity will be returned"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists code scanning alerts.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/alerts",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_alerts_alert_number": {
      "provider_intent": "get_repos_owner_repo_code-scanning_alerts_alert_number",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/alerts/alert_number",
      "text": "Get a code scanning alert",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a single code scanning alert.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/alerts/alert_number",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-alert"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_code-scanning_alerts_alert_number": {
      "provider_intent": "patch_repos_owner_repo_code-scanning_alerts_alert_number",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/alerts/alert_number",
      "text": "Update a code scanning alert",
      "category": "Code scanning",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "state": {
          "type": "string",
          "text": "Sets the state of the code scanning alert"
        },
        "dismissed_reason": {
          "type": "string",
          "text": "**Required when the state is dismissed"
        },
        "dismissed_comment": {
          "type": "string",
          "text": "The dismissal comment associated with the dismissal of the alert"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates the status of a single code scanning alert.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/alerts/alert_number",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#update-a-code-scanning-alert"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_alerts_alert_number_instances": {
      "provider_intent": "get_repos_owner_repo_code-scanning_alerts_alert_number_instances",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/alerts/alert_number/instances",
      "text": "List instances of a code scanning alert",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "ref": {
          "type": "string",
          "text": "The Git reference for the results you want to list"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all instances of the specified code scanning alert.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/alerts/alert_number/instances",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_analyses": {
      "provider_intent": "get_repos_owner_repo_code-scanning_analyses",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/analyses",
      "text": "List code scanning analyses for a repository",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tool_name": {
          "type": "string",
          "text": "The name of a code scanning tool"
        },
        "tool_guid": {
          "type": "string",
          "text": "The GUID of a code scanning tool"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "ref": {
          "type": "string",
          "text": "The Git reference for the analyses you want to list"
        },
        "sarif_id": {
          "type": "string",
          "text": "Filter analyses belonging to the same SARIF upload"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "sort": {
          "type": "string",
          "text": "The property by which to sort the results"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the details of all code scanning analyses for a repository\nstarting with the most recent.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/analyses",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_analyses_analysis_id": {
      "provider_intent": "get_repos_owner_repo_code-scanning_analyses_analysis_id",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/analyses/analysis_id",
      "text": "Get a code scanning analysis for a repository",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "analysis_id": {
          "type": "integer",
          "text": "The ID of the analysis as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "analysis_id": {
          "type": "integer",
          "text": "The ID of the analysis as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specified code scanning analysis for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/analyses/analysis_id",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_code-scanning_analyses_analysis_id": {
      "provider_intent": "delete_repos_owner_repo_code-scanning_analyses_analysis_id",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/analyses/analysis_id",
      "text": "Delete a code scanning analysis from a repository",
      "category": "Code scanning",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "analysis_id": {
          "type": "integer",
          "text": "The ID of the analysis as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation",
          "required": true
        },
        "confirm_delete": {
          "type": "string",
          "text": "Allow deletion if the specified analysis is the last in a set"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "analysis_id": {
          "type": "integer",
          "text": "The ID of the analysis as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a specified code scanning analysis from a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/analyses/analysis_id",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_codeql_databases": {
      "provider_intent": "get_repos_owner_repo_code-scanning_codeql_databases",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/codeql/databases",
      "text": "List CodeQL databases for a repository",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the CodeQL databases that are available in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/codeql/databases",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/codeql/databases",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#list-codeql-databases-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_codeql_databases_language": {
      "provider_intent": "get_repos_owner_repo_code-scanning_codeql_databases_language",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/codeql/databases/language",
      "text": "Get a CodeQL database for a repository",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "language": {
          "type": "string",
          "text": "The language of the CodeQL database",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "language": {
          "type": "string",
          "text": "The language of the CodeQL database",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a CodeQL database for a language in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/codeql/databases/language",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#get-a-codeql-database-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_default-setup": {
      "provider_intent": "get_repos_owner_repo_code-scanning_default-setup",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/default-setup",
      "text": "Get a code scanning default setup configuration",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a code scanning default setup configuration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/default-setup",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/default-setup",
        "api_ref": "https://docs.github.com/rest/code-scanning#get-a-code-scanning-default-setup-configuration"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_code-scanning_default-setup": {
      "provider_intent": "patch_repos_owner_repo_code-scanning_default-setup",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/default-setup",
      "text": "Update a code scanning default setup configuration",
      "category": "Code scanning",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "state": {
          "type": "string",
          "text": "Whether code scanning default setup has been configured or not"
        },
        "query_suite": {
          "type": "string",
          "text": "CodeQL query suite to be used"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates a code scanning default setup configuration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/default-setup",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/default-setup",
        "api_ref": "https://docs.github.com/rest/code-scanning#update-a-code-scanning-default-setup-configuration"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_code-scanning_sarifs": {
      "provider_intent": "post_repos_owner_repo_code-scanning_sarifs",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/sarifs",
      "text": "Upload an analysis as SARIF data",
      "category": "Code scanning",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit to which the analysis you are uploading relates"
        },
        "ref": {
          "type": "string",
          "text": "The full Git reference formatted as `refs/heads/<branch name>`\n`refs/pull/<number>/merge` or `refs/pull/<number>/head`"
        },
        "sarif": {
          "type": "string",
          "text": "A Base64 string representing the SARIF file to upload"
        },
        "checkout_uri": {
          "type": "string",
          "text": "The base directory used in the analysis as it appears in the SARIF file"
        },
        "started_at": {
          "type": "string",
          "text": "The time that the analysis run began"
        },
        "tool_name": {
          "type": "string",
          "text": "The name of the tool used to generate the code scanning analysis"
        },
        "validate": {
          "type": "boolean",
          "text": "Whether the SARIF file will be validated according to the code scanning specifications",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/sarifs",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/sarifs",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#upload-an-analysis-as-sarif-data"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_code-scanning_sarifs_sarif_id": {
      "provider_intent": "get_repos_owner_repo_code-scanning_sarifs_sarif_id",
      "provider_alias_intent": "/repos/owner/repo/code-scanning/sarifs/sarif_id",
      "text": "Get information about a SARIF upload",
      "category": "Code scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sarif_id": {
          "type": "string",
          "text": "The SARIF ID obtained after uploading",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sarif_id": {
          "type": "string",
          "text": "The SARIF ID obtained after uploading",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a SARIF upload including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
        "alias_endpoint": "/github/repos/owner/repo/code-scanning/sarifs/sarif_id",
        "api_ref": "https://docs.github.com/rest/reference/code-scanning#get-information-about-a-sarif-upload"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_codes_of_conduct": {
      "provider_intent": "get_codes_of_conduct",
      "provider_alias_intent": "/codes_of_conduct",
      "text": "Get all codes of conduct",
      "category": "Codes of conduct",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/codes_of_conduct",
        "alias_endpoint": "/github/codes_of_conduct",
        "api_ref": "https://docs.github.com/rest/reference/codes-of-conduct#get-all-codes-of-conduct"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_codes_of_conduct_key": {
      "provider_intent": "get_codes_of_conduct_key",
      "provider_alias_intent": "/codes_of_conduct/key",
      "text": "Get a code of conduct",
      "category": "Codes of conduct",
      "method": "GET",
      "type": "API",
      "params": {
        "key": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "key": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/codes_of_conduct/{key}",
        "alias_endpoint": "/github/codes_of_conduct/key",
        "api_ref": "https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_codespaces": {
      "provider_intent": "get_orgs_org_codespaces",
      "provider_alias_intent": "/orgs/org/codespaces",
      "text": "List codespaces for the organization",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the codespaces associated to a specified organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces",
        "alias_endpoint": "/github/orgs/org/codespaces",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-in-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_codespaces_billing": {
      "provider_intent": "put_orgs_org_codespaces_billing",
      "provider_alias_intent": "/orgs/org/codespaces/billing",
      "text": "Manage access control for organization codespaces",
      "category": "Codespaces",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "visibility": {
          "type": "string",
          "text": "Which users can access codespaces in the organization"
        },
        "selected_usernames": {
          "type": "array",
          "text": "The usernames of the organization members who should have access to codespaces in the organization"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets which users can access codespaces in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/billing",
        "alias_endpoint": "/github/orgs/org/codespaces/billing",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#set-codespaces-billing"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_codespaces_billing_selected_users": {
      "provider_intent": "post_orgs_org_codespaces_billing_selected_users",
      "provider_alias_intent": "/orgs/org/codespaces/billing/selected_users",
      "text": "Add users to Codespaces billing for an organization",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_usernames": {
          "type": "array",
          "text": "The usernames of the organization members whose codespaces be billed to the organization"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Codespaces for the specified users will be billed to the organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/billing/selected_users",
        "alias_endpoint": "/github/orgs/org/codespaces/billing/selected_users",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#set-codespaces-billing-users"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_codespaces_billing_selected_users": {
      "provider_intent": "delete_orgs_org_codespaces_billing_selected_users",
      "provider_alias_intent": "/orgs/org/codespaces/billing/selected_users",
      "text": "Removes users from Codespaces billing for an organization",
      "category": "Codespaces",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_usernames": {
          "type": "array",
          "text": "The usernames of the organization members whose codespaces should not be billed to the organization"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Codespaces for the specified users will no longer be billed to the organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/billing/selected_users",
        "alias_endpoint": "/github/orgs/org/codespaces/billing/selected_users",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#delete-codespaces-billing-users"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_codespaces_secrets": {
      "provider_intent": "get_orgs_org_codespaces_secrets",
      "provider_alias_intent": "/orgs/org/codespaces/secrets",
      "text": "List organization secrets",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-organization-secrets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_codespaces_secrets_public-key": {
      "provider_intent": "get_orgs_org_codespaces_secrets_public-key",
      "provider_alias_intent": "/orgs/org/codespaces/secrets/public-key",
      "text": "Get an organization public key",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a public key for an organization which is required in order to encrypt secrets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets/public-key",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets/public-key",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_codespaces_secrets_secret_name": {
      "provider_intent": "get_orgs_org_codespaces_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/codespaces/secrets/secret_name",
      "text": "Get an organization secret",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets an organization secret without revealing its encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#get-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_codespaces_secrets_secret_name": {
      "provider_intent": "put_orgs_org_codespaces_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/codespaces/secrets/secret_name",
      "text": "Create or update an organization secret",
      "category": "Codespaces",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "encrypted_value": {
          "type": "string",
          "text": "The value for your secret encrypted with [LibSodium](https",
          "enum": [
            "",
            "",
            "libsodium"
          ]
        },
        "key_id": {
          "type": "string",
          "text": "The ID of the key you used to encrypt the secret"
        },
        "visibility": {
          "type": "string",
          "text": "Which type of organization repositories have access to the organization secret"
        },
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository IDs that can access the organization secret"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates an organization secret with an encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_codespaces_secrets_secret_name": {
      "provider_intent": "delete_orgs_org_codespaces_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/codespaces/secrets/secret_name",
      "text": "Delete an organization secret",
      "category": "Codespaces",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an organization secret using the secret name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#delete-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_codespaces_secrets_secret_name_repositories": {
      "provider_intent": "get_orgs_org_codespaces_secrets_secret_name_repositories",
      "provider_alias_intent": "/orgs/org/codespaces/secrets/secret_name/repositories",
      "text": "List selected repositories for an organization secret",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}/repositories",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets/secret_name/repositories",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_codespaces_secrets_secret_name_repositories": {
      "provider_intent": "put_orgs_org_codespaces_secrets_secret_name_repositories",
      "provider_alias_intent": "/orgs/org/codespaces/secrets/secret_name/repositories",
      "text": "Set selected repositories for an organization secret",
      "category": "Codespaces",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids that can access the organization secret"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}/repositories",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets/secret_name/repositories",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_codespaces_secrets_secret_name_repositories_repository_id": {
      "provider_intent": "put_orgs_org_codespaces_secrets_secret_name_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/codespaces/secrets/secret_name/repositories/repository_id",
      "text": "Add selected repository to an organization secret",
      "category": "Codespaces",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets/secret_name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#add-selected-repository-to-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_codespaces_secrets_secret_name_repositories_repository_id": {
      "provider_intent": "delete_orgs_org_codespaces_secrets_secret_name_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/codespaces/secrets/secret_name/repositories/repository_id",
      "text": "Remove selected repository from an organization secret",
      "category": "Codespaces",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/codespaces/secrets/secret_name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_members_username_codespaces": {
      "provider_intent": "get_orgs_org_members_username_codespaces",
      "provider_alias_intent": "/orgs/org/members/username/codespaces",
      "text": "List codespaces for a user in organization",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the codespaces that a member of an organization has for repositories in that organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/members/{username}/codespaces",
        "alias_endpoint": "/github/orgs/org/members/username/codespaces",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#get-codespaces-for-user-in-org"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_members_username_codespaces_codespace_name": {
      "provider_intent": "delete_orgs_org_members_username_codespaces_codespace_name",
      "provider_alias_intent": "/orgs/org/members/username/codespaces/codespace_name",
      "text": "Delete a codespace from the organization",
      "category": "Codespaces",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a user's codespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/members/{username}/codespaces/{codespace_name}",
        "alias_endpoint": "/github/orgs/org/members/username/codespaces/codespace_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_members_username_codespaces_codespace_name_stop": {
      "provider_intent": "post_orgs_org_members_username_codespaces_codespace_name_stop",
      "provider_alias_intent": "/orgs/org/members/username/codespaces/codespace_name/stop",
      "text": "Stop a codespace for an organization user",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Stops a user's codespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop",
        "alias_endpoint": "/github/orgs/org/members/username/codespaces/codespace_name/stop",
        "api_ref": "https://docs.github.com/rest/reference/codespaces"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_codespaces": {
      "provider_intent": "get_repos_owner_repo_codespaces",
      "provider_alias_intent": "/repos/owner/repo/codespaces",
      "text": "List codespaces in a repository for the authenticated user",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the codespaces associated to a specified repository and the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces",
        "alias_endpoint": "/github/repos/owner/repo/codespaces",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_codespaces": {
      "provider_intent": "post_repos_owner_repo_codespaces",
      "provider_alias_intent": "/repos/owner/repo/codespaces",
      "text": "Create a codespace in a repository",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "ref": {
          "type": "string",
          "text": "Git ref (typically a branch name) for this codespace"
        },
        "location": {
          "type": "string",
          "text": "The requested location for a new codespace"
        },
        "geo": {
          "type": "string",
          "text": "The geographic area for this codespace"
        },
        "client_ip": {
          "type": "string",
          "text": "IP for location auto-detection when proxying a request"
        },
        "machine": {
          "type": "string",
          "text": "Machine type to use for this codespace"
        },
        "devcontainer_path": {
          "type": "string",
          "text": "Path to devcontainer"
        },
        "multi_repo_permissions_opt_out": {
          "type": "boolean",
          "text": "Whether to authorize requested permissions from devcontainer",
          "enum": [
            true,
            false
          ]
        },
        "working_directory": {
          "type": "string",
          "text": "Working directory for this codespace"
        },
        "idle_timeout_minutes": {
          "type": "integer",
          "text": "Time in minutes before codespace stops from inactivity"
        },
        "display_name": {
          "type": "string",
          "text": "Display name for this codespace"
        },
        "retention_period_minutes": {
          "type": "integer",
          "text": "Duration in minutes after codespace has gone idle in which it will be deleted"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a codespace owned by the authenticated user in the specified repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces",
        "alias_endpoint": "/github/repos/owner/repo/codespaces",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_codespaces_devcontainers": {
      "provider_intent": "get_repos_owner_repo_codespaces_devcontainers",
      "provider_alias_intent": "/repos/owner/repo/codespaces/devcontainers",
      "text": "List devcontainer configurations in a repository for the authenticated user",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the devcontainer.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces/devcontainers",
        "alias_endpoint": "/github/repos/owner/repo/codespaces/devcontainers",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-devcontainers-in-a-repository-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_codespaces_machines": {
      "provider_intent": "get_repos_owner_repo_codespaces_machines",
      "provider_alias_intent": "/repos/owner/repo/codespaces/machines",
      "text": "List available machine types for a repository",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "location": {
          "type": "string",
          "text": "The location to check for available machines"
        },
        "client_ip": {
          "type": "string",
          "text": "IP for location auto-detection when proxying a request"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the machine types available for a given repository based on its configuration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces/machines",
        "alias_endpoint": "/github/repos/owner/repo/codespaces/machines",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_codespaces_new": {
      "provider_intent": "get_repos_owner_repo_codespaces_new",
      "provider_alias_intent": "/repos/owner/repo/codespaces/new",
      "text": "Get default attributes for a codespace",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "The branch or commit to check for a default devcontainer path"
        },
        "client_ip": {
          "type": "string",
          "text": "An alternative IP for default location auto-detection such as when proxying a request"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the default attributes for codespaces created by the user with the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces/new",
        "alias_endpoint": "/github/repos/owner/repo/codespaces/new",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#preview-attributes-for-a-new-codespace"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_codespaces_secrets": {
      "provider_intent": "get_repos_owner_repo_codespaces_secrets",
      "provider_alias_intent": "/repos/owner/repo/codespaces/secrets",
      "text": "List repository secrets",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all secrets available in a repository without revealing their encrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces/secrets",
        "alias_endpoint": "/github/repos/owner/repo/codespaces/secrets",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-repository-secrets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_codespaces_secrets_public-key": {
      "provider_intent": "get_repos_owner_repo_codespaces_secrets_public-key",
      "provider_alias_intent": "/repos/owner/repo/codespaces/secrets/public-key",
      "text": "Get a repository public key",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets your public key which you need to encrypt secrets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces/secrets/public-key",
        "alias_endpoint": "/github/repos/owner/repo/codespaces/secrets/public-key",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_codespaces_secrets_secret_name": {
      "provider_intent": "get_repos_owner_repo_codespaces_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/codespaces/secrets/secret_name",
      "text": "Get a repository secret",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a single repository secret without revealing its encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#get-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_codespaces_secrets_secret_name": {
      "provider_intent": "put_repos_owner_repo_codespaces_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/codespaces/secrets/secret_name",
      "text": "Create or update a repository secret",
      "category": "Codespaces",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "encrypted_value": {
          "type": "string",
          "text": "Value for your secret encrypted with [LibSodium](https",
          "enum": [
            "",
            "",
            "libsodium"
          ]
        },
        "key_id": {
          "type": "string",
          "text": "ID of the key you used to encrypt the secret"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates a repository secret with an encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#create-or-update-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_codespaces_secrets_secret_name": {
      "provider_intent": "delete_repos_owner_repo_codespaces_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/codespaces/secrets/secret_name",
      "text": "Delete a repository secret",
      "category": "Codespaces",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a secret in a repository using the secret name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#delete-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pulls_pull_number_codespaces": {
      "provider_intent": "post_repos_owner_repo_pulls_pull_number_codespaces",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/codespaces",
      "text": "Create a codespace from a pull request",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "location": {
          "type": "string",
          "text": "The requested location for a new codespace"
        },
        "geo": {
          "type": "string",
          "text": "The geographic area for this codespace"
        },
        "client_ip": {
          "type": "string",
          "text": "IP for location auto-detection when proxying a request"
        },
        "machine": {
          "type": "string",
          "text": "Machine type to use for this codespace"
        },
        "devcontainer_path": {
          "type": "string",
          "text": "Path to devcontainer"
        },
        "multi_repo_permissions_opt_out": {
          "type": "boolean",
          "text": "Whether to authorize requested permissions from devcontainer",
          "enum": [
            true,
            false
          ]
        },
        "working_directory": {
          "type": "string",
          "text": "Working directory for this codespace"
        },
        "idle_timeout_minutes": {
          "type": "integer",
          "text": "Time in minutes before codespace stops from inactivity"
        },
        "display_name": {
          "type": "string",
          "text": "Display name for this codespace"
        },
        "retention_period_minutes": {
          "type": "integer",
          "text": "Duration in minutes after codespace has gone idle in which it will be deleted"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a codespace owned by the authenticated user for the specified pull request.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/codespaces",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/codespaces",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_codespaces": {
      "provider_intent": "get_user_codespaces",
      "provider_alias_intent": "/user/codespaces",
      "text": "List codespaces for the authenticated user",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "repository_id": {
          "type": "integer",
          "text": "ID of the Repository to filter on"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the authenticated user's codespaces.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces",
        "alias_endpoint": "/github/user/codespaces",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_codespaces": {
      "provider_intent": "post_user_codespaces",
      "provider_alias_intent": "/user/codespaces",
      "text": "Create a codespace for the authenticated user",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new codespace owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces",
        "alias_endpoint": "/github/user/codespaces",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_codespaces_secrets": {
      "provider_intent": "get_user_codespaces_secrets",
      "provider_alias_intent": "/user/codespaces/secrets",
      "text": "List secrets for the authenticated user",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all secrets available for a user's Codespaces without revealing their\nencrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets",
        "alias_endpoint": "/github/user/codespaces/secrets",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_codespaces_secrets_public-key": {
      "provider_intent": "get_user_codespaces_secrets_public-key",
      "provider_alias_intent": "/user/codespaces/secrets/public-key",
      "text": "Get public key for the authenticated user",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets your public key which you need to encrypt secrets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets/public-key",
        "alias_endpoint": "/github/user/codespaces/secrets/public-key",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_codespaces_secrets_secret_name": {
      "provider_intent": "get_user_codespaces_secrets_secret_name",
      "provider_alias_intent": "/user/codespaces/secrets/secret_name",
      "text": "Get a secret for the authenticated user",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a secret available to a user's codespaces without revealing its encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/user/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_user_codespaces_secrets_secret_name": {
      "provider_intent": "put_user_codespaces_secrets_secret_name",
      "provider_alias_intent": "/user/codespaces/secrets/secret_name",
      "text": "Create or update a secret for the authenticated user",
      "category": "Codespaces",
      "method": "PUT",
      "type": "API",
      "params": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "encrypted_value": {
          "type": "string",
          "text": "Value for your secret encrypted with [LibSodium](https",
          "enum": [
            "",
            "",
            "libsodium"
          ]
        },
        "key_id": {
          "type": "string",
          "text": "ID of the key you used to encrypt the secret"
        },
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids that can access the user secret"
        }
      },
      "path": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates a secret for a user's codespace with an encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/user/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_codespaces_secrets_secret_name": {
      "provider_intent": "delete_user_codespaces_secrets_secret_name",
      "provider_alias_intent": "/user/codespaces/secrets/secret_name",
      "text": "Delete a secret for the authenticated user",
      "category": "Codespaces",
      "method": "DELETE",
      "type": "API",
      "params": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a secret from a user's codespaces using the secret name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets/{secret_name}",
        "alias_endpoint": "/github/user/codespaces/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_codespaces_secrets_secret_name_repositories": {
      "provider_intent": "get_user_codespaces_secrets_secret_name_repositories",
      "provider_alias_intent": "/user/codespaces/secrets/secret_name/repositories",
      "text": "List selected repositories for a user secret",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the repositories that have been granted the ability to use a user's codespace secret.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets/{secret_name}/repositories",
        "alias_endpoint": "/github/user/codespaces/secrets/secret_name/repositories",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_user_codespaces_secrets_secret_name_repositories": {
      "provider_intent": "put_user_codespaces_secrets_secret_name_repositories",
      "provider_alias_intent": "/user/codespaces/secrets/secret_name/repositories",
      "text": "Set selected repositories for a user secret",
      "category": "Codespaces",
      "method": "PUT",
      "type": "API",
      "params": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids for which a codespace can access the secret"
        }
      },
      "path": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Select the repositories that will use a user's codespace secret.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets/{secret_name}/repositories",
        "alias_endpoint": "/github/user/codespaces/secrets/secret_name/repositories",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_user_codespaces_secrets_secret_name_repositories_repository_id": {
      "provider_intent": "put_user_codespaces_secrets_secret_name_repositories_repository_id",
      "provider_alias_intent": "/user/codespaces/secrets/secret_name/repositories/repository_id",
      "text": "Add a selected repository to a user secret",
      "category": "Codespaces",
      "method": "PUT",
      "type": "API",
      "params": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a repository to the selected repositories for a user's codespace secret.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets/{secret_name}/repositories/{repository_id}",
        "alias_endpoint": "/github/user/codespaces/secrets/secret_name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_codespaces_secrets_secret_name_repositories_repository_id": {
      "provider_intent": "delete_user_codespaces_secrets_secret_name_repositories_repository_id",
      "provider_alias_intent": "/user/codespaces/secrets/secret_name/repositories/repository_id",
      "text": "Remove a selected repository from a user secret",
      "category": "Codespaces",
      "method": "DELETE",
      "type": "API",
      "params": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a repository from the selected repositories for a user's codespace secret.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/secrets/{secret_name}/repositories/{repository_id}",
        "alias_endpoint": "/github/user/codespaces/secrets/secret_name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_codespaces_codespace_name": {
      "provider_intent": "get_user_codespaces_codespace_name",
      "provider_alias_intent": "/user/codespaces/codespace_name",
      "text": "Get a codespace for the authenticated user",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a user's codespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}",
        "alias_endpoint": "/github/user/codespaces/codespace_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_user_codespaces_codespace_name": {
      "provider_intent": "patch_user_codespaces_codespace_name",
      "provider_alias_intent": "/user/codespaces/codespace_name",
      "text": "Update a codespace for the authenticated user",
      "category": "Codespaces",
      "method": "PATCH",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "machine": {
          "type": "string",
          "text": "A valid machine to transition this codespace to"
        },
        "display_name": {
          "type": "string",
          "text": "Display name for this codespace"
        },
        "recent_folders": {
          "type": "array",
          "text": "Recently opened folders inside the codespace"
        }
      },
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates a codespace owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}",
        "alias_endpoint": "/github/user/codespaces/codespace_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_codespaces_codespace_name": {
      "provider_intent": "delete_user_codespaces_codespace_name",
      "provider_alias_intent": "/user/codespaces/codespace_name",
      "text": "Delete a codespace for the authenticated user",
      "category": "Codespaces",
      "method": "DELETE",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a user's codespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}",
        "alias_endpoint": "/github/user/codespaces/codespace_name",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_codespaces_codespace_name_exports": {
      "provider_intent": "post_user_codespaces_codespace_name_exports",
      "provider_alias_intent": "/user/codespaces/codespace_name/exports",
      "text": "Export a codespace for the authenticated user",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}/exports",
        "alias_endpoint": "/github/user/codespaces/codespace_name/exports",
        "api_ref": "https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_codespaces_codespace_name_exports_export_id": {
      "provider_intent": "get_user_codespaces_codespace_name_exports_export_id",
      "provider_alias_intent": "/user/codespaces/codespace_name/exports/export_id",
      "text": "Get details about a codespace export",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        },
        "export_id": {
          "type": "string",
          "text": "The ID of the export operation or `latest`",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        },
        "export_id": {
          "type": "string",
          "text": "The ID of the export operation or `latest`",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about an export of a codespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}/exports/{export_id}",
        "alias_endpoint": "/github/user/codespaces/codespace_name/exports/export_id",
        "api_ref": "https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_codespaces_codespace_name_machines": {
      "provider_intent": "get_user_codespaces_codespace_name_machines",
      "provider_alias_intent": "/user/codespaces/codespace_name/machines",
      "text": "List machine types for a codespace",
      "category": "Codespaces",
      "method": "GET",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the machine types a codespace can transition to use.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}/machines",
        "alias_endpoint": "/github/user/codespaces/codespace_name/machines",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_codespaces_codespace_name_publish": {
      "provider_intent": "post_user_codespaces_codespace_name_publish",
      "provider_alias_intent": "/user/codespaces/codespace_name/publish",
      "text": "Create a repository from an unpublished codespace",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "A name for the new repository"
        },
        "private": {
          "type": "boolean",
          "text": "Whether the new repository should be private",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Publishes an unpublished codespace creating a new repository and assigning it to the codespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}/publish",
        "alias_endpoint": "/github/user/codespaces/codespace_name/publish",
        "api_ref": "https://docs.github.com/rest/reference/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_codespaces_codespace_name_start": {
      "provider_intent": "post_user_codespaces_codespace_name_start",
      "provider_alias_intent": "/user/codespaces/codespace_name/start",
      "text": "Start a codespace for the authenticated user",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Starts a user's codespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}/start",
        "alias_endpoint": "/github/user/codespaces/codespace_name/start",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#start-a-codespace-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_codespaces_codespace_name_stop": {
      "provider_intent": "post_user_codespaces_codespace_name_stop",
      "provider_alias_intent": "/user/codespaces/codespace_name/stop",
      "text": "Stop a codespace for the authenticated user",
      "category": "Codespaces",
      "method": "POST",
      "type": "API",
      "params": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "codespace_name": {
          "type": "string",
          "text": "The name of the codespace",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Stops a user's codespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/codespaces/{codespace_name}/stop",
        "alias_endpoint": "/github/user/codespaces/codespace_name/stop",
        "api_ref": "https://docs.github.com/rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_dependabot_alerts": {
      "provider_intent": "get_repos_owner_repo_dependabot_alerts",
      "provider_alias_intent": "/repos/owner/repo/dependabot/alerts",
      "text": "List Dependabot alerts for a repository",
      "category": "Dependabot",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "A comma-separated list of states"
        },
        "severity": {
          "type": "string",
          "text": "A comma-separated list of severities"
        },
        "ecosystem": {
          "type": "string",
          "text": "A comma-separated list of ecosystems"
        },
        "package": {
          "type": "string",
          "text": "A comma-separated list of package names"
        },
        "manifest": {
          "type": "string",
          "text": "A comma-separated list of full manifest paths"
        },
        "scope": {
          "type": "string",
          "text": "The scope of the vulnerable dependency"
        },
        "sort": {
          "type": "string",
          "text": "The property by which to sort the results"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "page": {
          "type": "integer",
          "text": "**Deprecated**"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "before": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "after": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "first": {
          "type": "integer",
          "text": "**Deprecated**"
        },
        "last": {
          "type": "integer",
          "text": "**Deprecated**"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You must use an access token with the `security_events` scope to use this endpoint with private repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependabot/alerts",
        "alias_endpoint": "/github/repos/owner/repo/dependabot/alerts",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#list-dependabot-alerts-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_dependabot_alerts_alert_number": {
      "provider_intent": "get_repos_owner_repo_dependabot_alerts_alert_number",
      "provider_alias_intent": "/repos/owner/repo/dependabot/alerts/alert_number",
      "text": "Get a Dependabot alert",
      "category": "Dependabot",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies a Dependabot alert in its repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies a Dependabot alert in its repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You must use an access token with the `security_events` scope to use this endpoint with private repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
        "alias_endpoint": "/github/repos/owner/repo/dependabot/alerts/alert_number",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#get-a-dependabot-alert"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_dependabot_alerts_alert_number": {
      "provider_intent": "patch_repos_owner_repo_dependabot_alerts_alert_number",
      "provider_alias_intent": "/repos/owner/repo/dependabot/alerts/alert_number",
      "text": "Update a Dependabot alert",
      "category": "Dependabot",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies a Dependabot alert in its repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "state": {
          "type": "string",
          "text": "The state of the Dependabot alert"
        },
        "dismissed_reason": {
          "type": "string",
          "text": "**Required when `state` is `dismissed`"
        },
        "dismissed_comment": {
          "type": "string",
          "text": "An optional comment associated with dismissing the alert"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies a Dependabot alert in its repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You must use an access token with the `security_events` scope to use this endpoint with private repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
        "alias_endpoint": "/github/repos/owner/repo/dependabot/alerts/alert_number",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#update-a-dependabot-alert"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_dependabot_secrets": {
      "provider_intent": "get_repos_owner_repo_dependabot_secrets",
      "provider_alias_intent": "/repos/owner/repo/dependabot/secrets",
      "text": "List repository secrets",
      "category": "Dependabot",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all secrets available in a repository without revealing their encrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependabot/secrets",
        "alias_endpoint": "/github/repos/owner/repo/dependabot/secrets",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#list-repository-secrets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_dependabot_secrets_public-key": {
      "provider_intent": "get_repos_owner_repo_dependabot_secrets_public-key",
      "provider_alias_intent": "/repos/owner/repo/dependabot/secrets/public-key",
      "text": "Get a repository public key",
      "category": "Dependabot",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets your public key which you need to encrypt secrets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/public-key",
        "alias_endpoint": "/github/repos/owner/repo/dependabot/secrets/public-key",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_dependabot_secrets_secret_name": {
      "provider_intent": "get_repos_owner_repo_dependabot_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/dependabot/secrets/secret_name",
      "text": "Get a repository secret",
      "category": "Dependabot",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a single repository secret without revealing its encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/dependabot/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#get-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_dependabot_secrets_secret_name": {
      "provider_intent": "put_repos_owner_repo_dependabot_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/dependabot/secrets/secret_name",
      "text": "Create or update a repository secret",
      "category": "Dependabot",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "encrypted_value": {
          "type": "string",
          "text": "Value for your secret encrypted with [LibSodium](https",
          "enum": [
            "",
            "",
            "libsodium"
          ]
        },
        "key_id": {
          "type": "string",
          "text": "ID of the key you used to encrypt the secret"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates a repository secret with an encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/dependabot/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#create-or-update-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_dependabot_secrets_secret_name": {
      "provider_intent": "delete_repos_owner_repo_dependabot_secrets_secret_name",
      "provider_alias_intent": "/repos/owner/repo/dependabot/secrets/secret_name",
      "text": "Delete a repository secret",
      "category": "Dependabot",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a secret in a repository using the secret name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        "alias_endpoint": "/github/repos/owner/repo/dependabot/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#delete-a-repository-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_enterprises_enterprise_dependabot_alerts": {
      "provider_intent": "get_enterprises_enterprise_dependabot_alerts",
      "provider_alias_intent": "/enterprises/enterprise/dependabot/alerts",
      "text": "List Dependabot alerts for an enterprise",
      "category": "Dependanot",
      "method": "GET",
      "type": "API",
      "params": {
        "enterprise": {
          "type": "string",
          "text": "The slug version of the enterprise name",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "A comma-separated list of states"
        },
        "severity": {
          "type": "string",
          "text": "A comma-separated list of severities"
        },
        "ecosystem": {
          "type": "string",
          "text": "A comma-separated list of ecosystems"
        },
        "package": {
          "type": "string",
          "text": "A comma-separated list of package names"
        },
        "scope": {
          "type": "string",
          "text": "The scope of the vulnerable dependency"
        },
        "sort": {
          "type": "string",
          "text": "The property by which to sort the results"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "before": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "after": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "first": {
          "type": "integer",
          "text": "**Deprecated**"
        },
        "last": {
          "type": "integer",
          "text": "**Deprecated**"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "enterprise": {
          "type": "string",
          "text": "The slug version of the enterprise name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists Dependabot alerts for repositories that are owned by the specified enterprise.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/enterprises/{enterprise}/dependabot/alerts",
        "alias_endpoint": "/github/enterprises/enterprise/dependabot/alerts",
        "api_ref": "https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-enterprise"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_dependabot_alerts": {
      "provider_intent": "get_orgs_org_dependabot_alerts",
      "provider_alias_intent": "/orgs/org/dependabot/alerts",
      "text": "List Dependabot alerts for an organization",
      "category": "Dependanot",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "A comma-separated list of states"
        },
        "severity": {
          "type": "string",
          "text": "A comma-separated list of severities"
        },
        "ecosystem": {
          "type": "string",
          "text": "A comma-separated list of ecosystems"
        },
        "package": {
          "type": "string",
          "text": "A comma-separated list of package names"
        },
        "scope": {
          "type": "string",
          "text": "The scope of the vulnerable dependency"
        },
        "sort": {
          "type": "string",
          "text": "The property by which to sort the results"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "before": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "after": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "first": {
          "type": "integer",
          "text": "**Deprecated**"
        },
        "last": {
          "type": "integer",
          "text": "**Deprecated**"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists Dependabot alerts for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/alerts",
        "alias_endpoint": "/github/orgs/org/dependabot/alerts",
        "api_ref": "https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_dependabot_secrets": {
      "provider_intent": "get_orgs_org_dependabot_secrets",
      "provider_alias_intent": "/orgs/org/dependabot/secrets",
      "text": "List organization secrets",
      "category": "Dependanot",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all secrets available in an organization without revealing their encrypted values.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#list-organization-secrets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_dependabot_secrets_public-key": {
      "provider_intent": "get_orgs_org_dependabot_secrets_public-key",
      "provider_alias_intent": "/orgs/org/dependabot/secrets/public-key",
      "text": "Get an organization public key",
      "category": "Dependanot",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets your public key which you need to encrypt secrets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets/public-key",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets/public-key",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_dependabot_secrets_secret_name": {
      "provider_intent": "get_orgs_org_dependabot_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/dependabot/secrets/secret_name",
      "text": "Get an organization secret",
      "category": "Dependanot",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a single organization secret without revealing its encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#get-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_dependabot_secrets_secret_name": {
      "provider_intent": "put_orgs_org_dependabot_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/dependabot/secrets/secret_name",
      "text": "Create or update an organization secret",
      "category": "Dependanot",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "encrypted_value": {
          "type": "string",
          "text": "Value for your secret encrypted with [LibSodium](https",
          "enum": [
            "",
            "",
            "libsodium"
          ]
        },
        "key_id": {
          "type": "string",
          "text": "ID of the key you used to encrypt the secret"
        },
        "visibility": {
          "type": "string",
          "text": "Which type of organization repositories have access to the organization secret"
        },
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids that can access the organization secret"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates an organization secret with an encrypted value.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_dependabot_secrets_secret_name": {
      "provider_intent": "delete_orgs_org_dependabot_secrets_secret_name",
      "provider_alias_intent": "/orgs/org/dependabot/secrets/secret_name",
      "text": "Delete an organization secret",
      "category": "Dependanot",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a secret in an organization using the secret name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets/secret_name",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#delete-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_dependabot_secrets_secret_name_repositories": {
      "provider_intent": "get_orgs_org_dependabot_secrets_secret_name_repositories",
      "provider_alias_intent": "/orgs/org/dependabot/secrets/secret_name/repositories",
      "text": "List selected repositories for an organization secret",
      "category": "Dependanot",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets/secret_name/repositories",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_dependabot_secrets_secret_name_repositories": {
      "provider_intent": "put_orgs_org_dependabot_secrets_secret_name_repositories",
      "provider_alias_intent": "/orgs/org/dependabot/secrets/secret_name/repositories",
      "text": "Set selected repositories for an organization secret",
      "category": "Dependanot",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "selected_repository_ids": {
          "type": "array",
          "text": "An array of repository ids that can access the organization secret"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets/secret_name/repositories",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_dependabot_secrets_secret_name_repositories_repository_id": {
      "provider_intent": "put_orgs_org_dependabot_secrets_secret_name_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/dependabot/secrets/secret_name/repositories/repository_id",
      "text": "Add selected repository to an organization secret",
      "category": "Dependanot",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets/secret_name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#add-selected-repository-to-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_dependabot_secrets_secret_name_repositories_repository_id": {
      "provider_intent": "delete_orgs_org_dependabot_secrets_secret_name_repositories_repository_id",
      "provider_alias_intent": "/orgs/org/dependabot/secrets/secret_name/repositories/repository_id",
      "text": "Remove selected repository from an organization secret",
      "category": "Dependanot",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "secret_name": {
          "type": "string",
          "text": "The name of the secret",
          "required": true
        },
        "repository_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
        "alias_endpoint": "/github/orgs/org/dependabot/secrets/secret_name/repositories/repository_id",
        "api_ref": "https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_dependency-graph_compare_basehead": {
      "provider_intent": "get_repos_owner_repo_dependency-graph_compare_basehead",
      "provider_alias_intent": "/repos/owner/repo/dependency-graph/compare/basehead",
      "text": "Get a diff of the dependencies between commits",
      "category": "Dependency-graph",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "basehead": {
          "type": "string",
          "text": "The base and head Git revisions to compare",
          "required": true
        },
        "name": {
          "type": "string",
          "text": "The full path relative to the repository root of the dependency manifest file"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "basehead": {
          "type": "string",
          "text": "The base and head Git revisions to compare",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the diff of the dependency changes between two commits of a repository based on the changes to the dependency manifests made in those commits.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependency-graph/compare/{basehead}",
        "alias_endpoint": "/github/repos/owner/repo/dependency-graph/compare/basehead",
        "api_ref": "https://docs.github.com/rest/reference/dependency-graph#get-a-diff-of-the-dependencies-between-commits"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_dependency-graph_sbom": {
      "provider_intent": "get_repos_owner_repo_dependency-graph_sbom",
      "provider_alias_intent": "/repos/owner/repo/dependency-graph/sbom",
      "text": "Export a software bill of materials (SBOM) for a repository.",
      "category": "Dependency-graph",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependency-graph/sbom",
        "alias_endpoint": "/github/repos/owner/repo/dependency-graph/sbom",
        "api_ref": "https://docs.github.com/rest/dependency-graph/sboms#export-a-software-bill-of-materials-sbom-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_dependency-graph_snapshots": {
      "provider_intent": "post_repos_owner_repo_dependency-graph_snapshots",
      "provider_alias_intent": "/repos/owner/repo/dependency-graph/snapshots",
      "text": "Create a snapshot of dependencies for a repository",
      "category": "Dependency-graph",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "version": {
          "type": "integer",
          "text": "The version of the repository snapshot submission"
        },
        "job": {
          "type": "object"
        },
        "sha": {
          "type": "string",
          "text": "The commit SHA associated with this dependency snapshot"
        },
        "ref": {
          "type": "string",
          "text": "The repository branch that triggered this snapshot"
        },
        "detector": {
          "type": "object",
          "text": "A description of the detector used"
        },
        "metadata": {
          "type": "object",
          "text": "User-defined metadata to store domain-specific information limited to 8 keys with scalar values"
        },
        "manifests": {
          "type": "object",
          "text": "A collection of package manifests which are a collection of related dependencies declared in a file or representing a logical group of dependencies"
        },
        "scanned": {
          "type": "string",
          "text": "The time at which the snapshot was scanned"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a new snapshot of a repository's dependencies.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dependency-graph/snapshots",
        "alias_endpoint": "/github/repos/owner/repo/dependency-graph/snapshots",
        "api_ref": "https://docs.github.com/rest/reference/dependency-graph#create-a-snapshot-of-dependencies-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_emojis": {
      "provider_intent": "get_emojis",
      "provider_alias_intent": "/emojis",
      "text": "Get emojis",
      "category": "Emojies",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all the emojis available to use on GitHub.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/emojis",
        "alias_endpoint": "/github/emojis",
        "api_ref": "https://docs.github.com/rest/reference/emojis#get-emojis"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists": {
      "provider_intent": "get_gists",
      "provider_alias_intent": "/gists",
      "text": "List gists for the authenticated user",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the authenticated user's gists or if called anonymously this endpoint returns all public gists:.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists",
        "alias_endpoint": "/github/gists",
        "api_ref": "https://docs.github.com/rest/reference/gists#list-gists-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_gists": {
      "provider_intent": "post_gists",
      "provider_alias_intent": "/gists",
      "text": "Create a gist",
      "category": "Gists",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "description": {
          "type": "string",
          "text": "Description of the gist"
        },
        "files": {
          "type": "object",
          "text": "Names and content for the files that make up the gist"
        },
        "public": {
          "type": "undefined"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Allows you to add a new gist with one or more files.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists",
        "alias_endpoint": "/github/gists",
        "api_ref": "https://docs.github.com/rest/reference/gists#create-a-gist"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_public": {
      "provider_intent": "get_gists_public",
      "provider_alias_intent": "/gists/public",
      "text": "List public gists",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List public gists sorted by most recently updated to least recently updated.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/public",
        "alias_endpoint": "/github/gists/public",
        "api_ref": "https://docs.github.com/rest/reference/gists#list-public-gists"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_starred": {
      "provider_intent": "get_gists_starred",
      "provider_alias_intent": "/gists/starred",
      "text": "List starred gists",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the authenticated user's starred gists:.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/starred",
        "alias_endpoint": "/github/gists/starred",
        "api_ref": "https://docs.github.com/rest/reference/gists#list-starred-gists"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_gist_id": {
      "provider_intent": "get_gists_gist_id",
      "provider_alias_intent": "/gists/gist_id",
      "text": "Get a gist",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}",
        "alias_endpoint": "/github/gists/gist_id",
        "api_ref": "https://docs.github.com/rest/reference/gists#get-a-gist"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_gists_gist_id": {
      "provider_intent": "patch_gists_gist_id",
      "provider_alias_intent": "/gists/gist_id",
      "text": "Update a gist",
      "category": "Gists",
      "method": "PATCH",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "description": {
          "type": "string",
          "text": "The description of the gist"
        },
        "files": {
          "type": "object",
          "text": "The gist files to be updated renamed or deleted"
        }
      },
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Allows you to update a gist's description and to update delete or rename gist files.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}",
        "alias_endpoint": "/github/gists/gist_id",
        "api_ref": "https://docs.github.com/rest/reference/gists/#update-a-gist"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_gists_gist_id": {
      "provider_intent": "delete_gists_gist_id",
      "provider_alias_intent": "/gists/gist_id",
      "text": "Delete a gist",
      "category": "Gists",
      "method": "DELETE",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}",
        "alias_endpoint": "/github/gists/gist_id",
        "api_ref": "https://docs.github.com/rest/reference/gists#delete-a-gist"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_gist_id_comments": {
      "provider_intent": "get_gists_gist_id_comments",
      "provider_alias_intent": "/gists/gist_id/comments",
      "text": "List gist comments",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/comments",
        "alias_endpoint": "/github/gists/gist_id/comments",
        "api_ref": "https://docs.github.com/rest/reference/gists#list-gist-comments"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_gists_gist_id_comments": {
      "provider_intent": "post_gists_gist_id_comments",
      "provider_alias_intent": "/gists/gist_id/comments",
      "text": "Create a gist comment",
      "category": "Gists",
      "method": "POST",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The comment text"
        }
      },
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/comments",
        "alias_endpoint": "/github/gists/gist_id/comments",
        "api_ref": "https://docs.github.com/rest/reference/gists#create-a-gist-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_gist_id_comments_comment_id": {
      "provider_intent": "get_gists_gist_id_comments_comment_id",
      "provider_alias_intent": "/gists/gist_id/comments/comment_id",
      "text": "Get a gist comment",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/comments/{comment_id}",
        "alias_endpoint": "/github/gists/gist_id/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/gists#get-a-gist-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_gists_gist_id_comments_comment_id": {
      "provider_intent": "patch_gists_gist_id_comments_comment_id",
      "provider_alias_intent": "/gists/gist_id/comments/comment_id",
      "text": "Update a gist comment",
      "category": "Gists",
      "method": "PATCH",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The comment text"
        }
      },
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/comments/{comment_id}",
        "alias_endpoint": "/github/gists/gist_id/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/gists#update-a-gist-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_gists_gist_id_comments_comment_id": {
      "provider_intent": "delete_gists_gist_id_comments_comment_id",
      "provider_alias_intent": "/gists/gist_id/comments/comment_id",
      "text": "Delete a gist comment",
      "category": "Gists",
      "method": "DELETE",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/comments/{comment_id}",
        "alias_endpoint": "/github/gists/gist_id/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/gists#delete-a-gist-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_gist_id_commits": {
      "provider_intent": "get_gists_gist_id_commits",
      "provider_alias_intent": "/gists/gist_id/commits",
      "text": "List gist commits",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/commits",
        "alias_endpoint": "/github/gists/gist_id/commits",
        "api_ref": "https://docs.github.com/rest/reference/gists#list-gist-commits"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_gist_id_forks": {
      "provider_intent": "get_gists_gist_id_forks",
      "provider_alias_intent": "/gists/gist_id/forks",
      "text": "List gist forks",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/forks",
        "alias_endpoint": "/github/gists/gist_id/forks",
        "api_ref": "https://docs.github.com/rest/reference/gists#list-gist-forks"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_gists_gist_id_forks": {
      "provider_intent": "post_gists_gist_id_forks",
      "provider_alias_intent": "/gists/gist_id/forks",
      "text": "Fork a gist",
      "category": "Gists",
      "method": "POST",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/forks",
        "alias_endpoint": "/github/gists/gist_id/forks",
        "api_ref": "https://docs.github.com/rest/reference/gists#fork-a-gist"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_gist_id_star": {
      "provider_intent": "get_gists_gist_id_star",
      "provider_alias_intent": "/gists/gist_id/star",
      "text": "Check if a gist is starred",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/star",
        "alias_endpoint": "/github/gists/gist_id/star",
        "api_ref": "https://docs.github.com/rest/reference/gists#check-if-a-gist-is-starred"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_gists_gist_id_star": {
      "provider_intent": "put_gists_gist_id_star",
      "provider_alias_intent": "/gists/gist_id/star",
      "text": "Star a gist",
      "category": "Gists",
      "method": "PUT",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/star",
        "alias_endpoint": "/github/gists/gist_id/star",
        "api_ref": "https://docs.github.com/rest/reference/gists#star-a-gist"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_gists_gist_id_star": {
      "provider_intent": "delete_gists_gist_id_star",
      "provider_alias_intent": "/gists/gist_id/star",
      "text": "Unstar a gist",
      "category": "Gists",
      "method": "DELETE",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/star",
        "alias_endpoint": "/github/gists/gist_id/star",
        "api_ref": "https://docs.github.com/rest/reference/gists#unstar-a-gist"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gists_gist_id_sha": {
      "provider_intent": "get_gists_gist_id_sha",
      "provider_alias_intent": "/gists/gist_id/sha",
      "text": "Get a gist revision",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "sha": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gist_id": {
          "type": "string",
          "text": "The unique identifier of the gist",
          "required": true
        },
        "sha": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gists/{gist_id}/{sha}",
        "alias_endpoint": "/github/gists/gist_id/sha",
        "api_ref": "https://docs.github.com/rest/reference/gists#get-a-gist-revision"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_gists": {
      "provider_intent": "get_users_username_gists",
      "provider_alias_intent": "/users/username/gists",
      "text": "List gists for a user",
      "category": "Gists",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists public gists for the specified user:.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/gists",
        "alias_endpoint": "/github/users/username/gists",
        "api_ref": "https://docs.github.com/rest/reference/gists#list-gists-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_git_blobs": {
      "provider_intent": "post_repos_owner_repo_git_blobs",
      "provider_alias_intent": "/repos/owner/repo/git/blobs",
      "text": "Create a blob",
      "category": "Git",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The new blob's content"
        },
        "encoding": {
          "type": "string",
          "text": "The encoding used for `content`"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/blobs",
        "alias_endpoint": "/github/repos/owner/repo/git/blobs",
        "api_ref": "https://docs.github.com/rest/reference/git#create-a-blob"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_git_blobs_file_sha": {
      "provider_intent": "get_repos_owner_repo_git_blobs_file_sha",
      "provider_alias_intent": "/repos/owner/repo/git/blobs/file_sha",
      "text": "Get a blob",
      "category": "Git",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "file_sha": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "file_sha": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The `content` in the response will always be Base64 encoded.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/blobs/{file_sha}",
        "alias_endpoint": "/github/repos/owner/repo/git/blobs/file_sha",
        "api_ref": "https://docs.github.com/rest/reference/git#get-a-blob"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_git_commits": {
      "provider_intent": "post_repos_owner_repo_git_commits",
      "provider_alias_intent": "/repos/owner/repo/git/commits",
      "text": "Create a commit",
      "category": "Git",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "message": {
          "type": "string",
          "text": "The commit message"
        },
        "tree": {
          "type": "string",
          "text": "The SHA of the tree object this commit points to"
        },
        "parents": {
          "type": "array",
          "text": "The SHAs of the commits that were the parents of this commit"
        },
        "author": {
          "type": "object",
          "text": "Information about the author of the commit"
        },
        "committer": {
          "type": "object",
          "text": "Information about the person who is making the commit"
        },
        "signature": {
          "type": "string",
          "text": "The [PGP signature](https",
          "enum": [
            "",
            "",
            "en"
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new Git [commit object](https://git-scm.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/commits",
        "alias_endpoint": "/github/repos/owner/repo/git/commits",
        "api_ref": "https://docs.github.com/rest/reference/git#create-a-commit"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_git_commits_commit_sha": {
      "provider_intent": "get_repos_owner_repo_git_commits_commit_sha",
      "provider_alias_intent": "/repos/owner/repo/git/commits/commit_sha",
      "text": "Get a commit",
      "category": "Git",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a Git [commit object](https://git-scm.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/commits/{commit_sha}",
        "alias_endpoint": "/github/repos/owner/repo/git/commits/commit_sha",
        "api_ref": "https://docs.github.com/rest/reference/git#get-a-commit"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_git_matching-refs_ref": {
      "provider_intent": "get_repos_owner_repo_git_matching-refs_ref",
      "provider_alias_intent": "/repos/owner/repo/git/matching-refs/ref",
      "text": "List matching references",
      "category": "Git",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns an array of references from your Git database that match the supplied name.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/matching-refs/{ref}",
        "alias_endpoint": "/github/repos/owner/repo/git/matching-refs/ref",
        "api_ref": "https://docs.github.com/rest/reference/git#list-matching-references"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_git_ref_ref": {
      "provider_intent": "get_repos_owner_repo_git_ref_ref",
      "provider_alias_intent": "/repos/owner/repo/git/ref/ref",
      "text": "Get a reference",
      "category": "Git",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a single reference from your Git database.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/ref/{ref}",
        "alias_endpoint": "/github/repos/owner/repo/git/ref/ref",
        "api_ref": "https://docs.github.com/rest/reference/git#get-a-reference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_git_refs": {
      "provider_intent": "post_repos_owner_repo_git_refs",
      "provider_alias_intent": "/repos/owner/repo/git/refs",
      "text": "Create a reference",
      "category": "Git",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "ref": {
          "type": "string",
          "text": "The name of the fully qualified reference (ie",
          "enum": [
            "`refs",
            "heads",
            "master`)"
          ]
        },
        "sha": {
          "type": "string",
          "text": "The SHA1 value for this reference"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a reference for your repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/refs",
        "alias_endpoint": "/github/repos/owner/repo/git/refs",
        "api_ref": "https://docs.github.com/rest/reference/git#create-a-reference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_git_refs_ref": {
      "provider_intent": "patch_repos_owner_repo_git_refs_ref",
      "provider_alias_intent": "/repos/owner/repo/git/refs/ref",
      "text": "Update a reference",
      "category": "Git",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "The name of the fully qualified reference to update",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "sha": {
          "type": "string",
          "text": "The SHA1 value to set this reference to"
        },
        "force": {
          "type": "boolean",
          "text": "Indicates whether to force the update or to make sure the update is a fast-forward update",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "The name of the fully qualified reference to update",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/refs/{ref}",
        "alias_endpoint": "/github/repos/owner/repo/git/refs/ref",
        "api_ref": "https://docs.github.com/rest/reference/git#update-a-reference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_git_refs_ref": {
      "provider_intent": "delete_repos_owner_repo_git_refs_ref",
      "provider_alias_intent": "/repos/owner/repo/git/refs/ref",
      "text": "Delete a reference",
      "category": "Git",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/refs/{ref}",
        "alias_endpoint": "/github/repos/owner/repo/git/refs/ref",
        "api_ref": "https://docs.github.com/rest/reference/git#delete-a-reference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_git_tags": {
      "provider_intent": "post_repos_owner_repo_git_tags",
      "provider_alias_intent": "/repos/owner/repo/git/tags",
      "text": "Create a tag object",
      "category": "Git",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "tag": {
          "type": "string",
          "text": "The tag's name"
        },
        "message": {
          "type": "string",
          "text": "The tag message"
        },
        "object": {
          "type": "string",
          "text": "The SHA of the git object this is tagging"
        },
        "type": {
          "type": "string",
          "text": "The type of the object we're tagging"
        },
        "tagger": {
          "type": "object",
          "text": "An object with information about the individual creating the tag"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Note that creating a tag object does not create the reference that makes a tag in Git.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/tags",
        "alias_endpoint": "/github/repos/owner/repo/git/tags",
        "api_ref": "https://docs.github.com/rest/reference/git#create-a-tag-object"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_git_tags_tag_sha": {
      "provider_intent": "get_repos_owner_repo_git_tags_tag_sha",
      "provider_alias_intent": "/repos/owner/repo/git/tags/tag_sha",
      "text": "Get a tag",
      "category": "Git",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tag_sha": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tag_sha": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/tags/{tag_sha}",
        "alias_endpoint": "/github/repos/owner/repo/git/tags/tag_sha",
        "api_ref": "https://docs.github.com/rest/reference/git#get-a-tag"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_git_trees": {
      "provider_intent": "post_repos_owner_repo_git_trees",
      "provider_alias_intent": "/repos/owner/repo/git/trees",
      "text": "Create a tree",
      "category": "Git",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "tree": {
          "type": "array",
          "text": "Objects (of `path` `mode` `type` and `sha`) specifying a tree structure"
        },
        "base_tree": {
          "type": "string",
          "text": "The SHA1 of an existing Git tree object which will be used as the base for the new tree"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The tree creation API accepts nested entries.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/trees",
        "alias_endpoint": "/github/repos/owner/repo/git/trees",
        "api_ref": "https://docs.github.com/rest/reference/git#create-a-tree"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_git_trees_tree_sha": {
      "provider_intent": "get_repos_owner_repo_git_trees_tree_sha",
      "provider_alias_intent": "/repos/owner/repo/git/trees/tree_sha",
      "text": "Get a tree",
      "category": "Git",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tree_sha": {
          "type": "string",
          "required": true
        },
        "recursive": {
          "type": "string",
          "text": "Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `",
          "enum": [
            "tree_sha`"
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tree_sha": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a single tree using the SHA1 value for that tree.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/git/trees/{tree_sha}",
        "alias_endpoint": "/github/repos/owner/repo/git/trees/tree_sha",
        "api_ref": "https://docs.github.com/rest/reference/git#get-a-tree"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gitignore_templates": {
      "provider_intent": "get_gitignore_templates",
      "provider_alias_intent": "/gitignore/templates",
      "text": "Get all gitignore templates",
      "category": "Gitignore",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all templates available to pass as an option when [creating a repository](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gitignore/templates",
        "alias_endpoint": "/github/gitignore/templates",
        "api_ref": "https://docs.github.com/rest/reference/gitignore#get-all-gitignore-templates"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_gitignore_templates_name": {
      "provider_intent": "get_gitignore_templates_name",
      "provider_alias_intent": "/gitignore/templates/name",
      "text": "Get a gitignore template",
      "category": "Gitignore",
      "method": "GET",
      "type": "API",
      "params": {
        "name": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "name": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The API also allows fetching the source of a single template.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/gitignore/templates/{name}",
        "alias_endpoint": "/github/gitignore/templates/name",
        "api_ref": "https://docs.github.com/rest/reference/gitignore#get-a-gitignore-template"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_interaction-limits": {
      "provider_intent": "get_orgs_org_interaction-limits",
      "provider_alias_intent": "/orgs/org/interaction-limits",
      "text": "Get interaction restrictions for an organization",
      "category": "Interactions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Shows which type of GitHub user can interact with this organization and when the restriction expires.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/interaction-limits",
        "alias_endpoint": "/github/orgs/org/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_interaction-limits": {
      "provider_intent": "put_orgs_org_interaction-limits",
      "provider_alias_intent": "/orgs/org/interaction-limits",
      "text": "Set interaction restrictions for an organization",
      "category": "Interactions",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "limit": {
          "type": "string",
          "text": "The type of GitHub user that can comment open issues or create pull requests while the interaction limit is in effect"
        },
        "expiry": {
          "type": "string",
          "text": "The duration of the interaction restriction"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/interaction-limits",
        "alias_endpoint": "/github/orgs/org/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_interaction-limits": {
      "provider_intent": "delete_orgs_org_interaction-limits",
      "provider_alias_intent": "/orgs/org/interaction-limits",
      "text": "Remove interaction restrictions for an organization",
      "category": "Interactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes all interaction restrictions from public repositories in the given organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/interaction-limits",
        "alias_endpoint": "/github/orgs/org/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_interaction-limits": {
      "provider_intent": "get_repos_owner_repo_interaction-limits",
      "provider_alias_intent": "/repos/owner/repo/interaction-limits",
      "text": "Get interaction restrictions for a repository",
      "category": "Interactions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Shows which type of GitHub user can interact with this repository and when the restriction expires.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/interaction-limits",
        "alias_endpoint": "/github/repos/owner/repo/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_interaction-limits": {
      "provider_intent": "put_repos_owner_repo_interaction-limits",
      "provider_alias_intent": "/repos/owner/repo/interaction-limits",
      "text": "Set interaction restrictions for a repository",
      "category": "Interactions",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "limit": {
          "type": "string",
          "text": "The type of GitHub user that can comment open issues or create pull requests while the interaction limit is in effect"
        },
        "expiry": {
          "type": "string",
          "text": "The duration of the interaction restriction"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Temporarily restricts interactions to a certain type of GitHub user within the given repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/interaction-limits",
        "alias_endpoint": "/github/repos/owner/repo/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_interaction-limits": {
      "provider_intent": "delete_repos_owner_repo_interaction-limits",
      "provider_alias_intent": "/repos/owner/repo/interaction-limits",
      "text": "Remove interaction restrictions for a repository",
      "category": "Interactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes all interaction restrictions from the given repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/interaction-limits",
        "alias_endpoint": "/github/repos/owner/repo/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_interaction-limits": {
      "provider_intent": "get_user_interaction-limits",
      "provider_alias_intent": "/user/interaction-limits",
      "text": "Get interaction restrictions for your public repositories",
      "category": "Interactions",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Shows which type of GitHub user can interact with your public repositories and when the restriction expires.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/interaction-limits",
        "alias_endpoint": "/github/user/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_user_interaction-limits": {
      "provider_intent": "put_user_interaction-limits",
      "provider_alias_intent": "/user/interaction-limits",
      "text": "Set interaction restrictions for your public repositories",
      "category": "Interactions",
      "method": "PUT",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "limit": {
          "type": "string",
          "text": "The type of GitHub user that can comment open issues or create pull requests while the interaction limit is in effect"
        },
        "expiry": {
          "type": "string",
          "text": "The duration of the interaction restriction"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Temporarily restricts which type of GitHub user can interact with your public repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/interaction-limits",
        "alias_endpoint": "/github/user/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_interaction-limits": {
      "provider_intent": "delete_user_interaction-limits",
      "provider_alias_intent": "/user/interaction-limits",
      "text": "Remove interaction restrictions from your public repositories",
      "category": "Interactions",
      "method": "DELETE",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes any interaction restrictions from your public repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/interaction-limits",
        "alias_endpoint": "/github/user/interaction-limits",
        "api_ref": "https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_issues": {
      "provider_intent": "get_issues",
      "provider_alias_intent": "/issues",
      "text": "List issues assigned to the authenticated user",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "filter": {
          "type": "string",
          "text": "Indicates which sorts of issues to return"
        },
        "state": {
          "type": "string",
          "text": "Indicates the state of the issues to return"
        },
        "labels": {
          "type": "string",
          "text": "A list of comma separated label names"
        },
        "sort": {
          "type": "string",
          "text": "What to sort results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "collab": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        },
        "orgs": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        },
        "owned": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        },
        "pulls": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List issues assigned to the authenticated user across all visible repositories including owned repositories member\nrepositories and organization repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/issues",
        "alias_endpoint": "/github/issues",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-issues-assigned-to-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_issues": {
      "provider_intent": "get_orgs_org_issues",
      "provider_alias_intent": "/orgs/org/issues",
      "text": "List organization issues assigned to the authenticated user",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "filter": {
          "type": "string",
          "text": "Indicates which sorts of issues to return"
        },
        "state": {
          "type": "string",
          "text": "Indicates the state of the issues to return"
        },
        "labels": {
          "type": "string",
          "text": "A list of comma separated label names"
        },
        "sort": {
          "type": "string",
          "text": "What to sort results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List issues in an organization assigned to the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/issues",
        "alias_endpoint": "/github/orgs/org/issues",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_assignees": {
      "provider_intent": "get_repos_owner_repo_assignees",
      "provider_alias_intent": "/repos/owner/repo/assignees",
      "text": "List assignees",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the [available assignees](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/assignees",
        "alias_endpoint": "/github/repos/owner/repo/assignees",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-assignees"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_assignees_assignee": {
      "provider_intent": "get_repos_owner_repo_assignees_assignee",
      "provider_alias_intent": "/repos/owner/repo/assignees/assignee",
      "text": "Check if a user can be assigned",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "assignee": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "assignee": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Checks if a user has permission to be assigned to an issue in this repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/assignees/{assignee}",
        "alias_endpoint": "/github/repos/owner/repo/assignees/assignee",
        "api_ref": "https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues": {
      "provider_intent": "get_repos_owner_repo_issues",
      "provider_alias_intent": "/repos/owner/repo/issues",
      "text": "List repository issues",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone": {
          "type": "string",
          "text": "If an `integer` is passed it should refer to a milestone by its `number` field"
        },
        "state": {
          "type": "string",
          "text": "Indicates the state of the issues to return"
        },
        "assignee": {
          "type": "string",
          "text": "Can be the name of a user"
        },
        "creator": {
          "type": "string",
          "text": "The user that created the issue"
        },
        "mentioned": {
          "type": "string",
          "text": "A user that's mentioned in the issue"
        },
        "labels": {
          "type": "string",
          "text": "A list of comma separated label names"
        },
        "sort": {
          "type": "string",
          "text": "What to sort results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List issues in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues",
        "alias_endpoint": "/github/repos/owner/repo/issues",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-repository-issues"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_issues": {
      "provider_intent": "post_repos_owner_repo_issues",
      "provider_alias_intent": "/repos/owner/repo/issues",
      "text": "Create an issue",
      "category": "Issues",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "undefined",
          "text": "The title of the issue"
        },
        "body": {
          "type": "string",
          "text": "The contents of the issue"
        },
        "assignee": {
          "type": "string",
          "text": "Login for the user that this issue should be assigned to"
        },
        "milestone": {
          "type": "undefined"
        },
        "labels": {
          "type": "array",
          "text": "Labels to associate with this issue"
        },
        "assignees": {
          "type": "array",
          "text": "Logins for Users to assign to this issue"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Any user with pull access to a repository can create an issue.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues",
        "alias_endpoint": "/github/repos/owner/repo/issues",
        "api_ref": "https://docs.github.com/rest/reference/issues#create-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_comments": {
      "provider_intent": "get_repos_owner_repo_issues_comments",
      "provider_alias_intent": "/repos/owner/repo/issues/comments",
      "text": "List issue comments for a repository",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "Either `asc` or `desc`"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can use the REST API to list comments on issues and pull requests for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/comments",
        "alias_endpoint": "/github/repos/owner/repo/issues/comments",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_comments_comment_id": {
      "provider_intent": "get_repos_owner_repo_issues_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/issues/comments/comment_id",
      "text": "Get an issue comment",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can use the REST API to get comments on issues and pull requests.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/issues/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/issues#get-an-issue-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_issues_comments_comment_id": {
      "provider_intent": "patch_repos_owner_repo_issues_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/issues/comments/comment_id",
      "text": "Update an issue comment",
      "category": "Issues",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The contents of the comment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can use the REST API to update comments on issues and pull requests.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/issues/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/issues#update-an-issue-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_issues_comments_comment_id": {
      "provider_intent": "delete_repos_owner_repo_issues_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/issues/comments/comment_id",
      "text": "Delete an issue comment",
      "category": "Issues",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can use the REST API to delete comments on issues and pull requests.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/issues/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/issues#delete-an-issue-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_events": {
      "provider_intent": "get_repos_owner_repo_issues_events",
      "provider_alias_intent": "/repos/owner/repo/issues/events",
      "text": "List issue events for a repository",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/events",
        "alias_endpoint": "/github/repos/owner/repo/issues/events",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_events_event_id": {
      "provider_intent": "get_repos_owner_repo_issues_events_event_id",
      "provider_alias_intent": "/repos/owner/repo/issues/events/event_id",
      "text": "Get an issue event",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "event_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "event_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/events/{event_id}",
        "alias_endpoint": "/github/repos/owner/repo/issues/events/event_id",
        "api_ref": "https://docs.github.com/rest/reference/issues#get-an-issue-event"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_issue_number": {
      "provider_intent": "get_repos_owner_repo_issues_issue_number",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number",
      "text": "Get an issue",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The API returns a [`301 Moved Permanently` status](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number",
        "api_ref": "https://docs.github.com/rest/reference/issues#get-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_issues_issue_number": {
      "provider_intent": "patch_repos_owner_repo_issues_issue_number",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number",
      "text": "Update an issue",
      "category": "Issues",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "undefined",
          "text": "The title of the issue"
        },
        "body": {
          "type": "string",
          "text": "The contents of the issue"
        },
        "assignee": {
          "type": "string",
          "text": "Username to assign to this issue"
        },
        "state": {
          "type": "string",
          "text": "The open or closed state of the issue"
        },
        "state_reason": {
          "type": "string",
          "text": "The reason for the state change"
        },
        "milestone": {
          "type": "undefined"
        },
        "labels": {
          "type": "array",
          "text": "Labels to associate with this issue"
        },
        "assignees": {
          "type": "array",
          "text": "Usernames to assign to this issue"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Issue owners and users with push access can edit an issue.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number",
        "api_ref": "https://docs.github.com/rest/reference/issues#update-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_issues_issue_number_assignees": {
      "provider_intent": "post_repos_owner_repo_issues_issue_number_assignees",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/assignees",
      "text": "Add assignees to an issue",
      "category": "Issues",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "assignees": {
          "type": "array",
          "text": "Usernames of people to assign this issue to"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds up to 10 assignees to an issue.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/assignees",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/assignees",
        "api_ref": "https://docs.github.com/rest/reference/issues#add-assignees-to-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_issues_issue_number_assignees": {
      "provider_intent": "delete_repos_owner_repo_issues_issue_number_assignees",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/assignees",
      "text": "Remove assignees from an issue",
      "category": "Issues",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "assignees": {
          "type": "array",
          "text": "Usernames of assignees to remove from an issue"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes one or more assignees from an issue.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/assignees",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/assignees",
        "api_ref": "https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_issue_number_assignees_assignee": {
      "provider_intent": "get_repos_owner_repo_issues_issue_number_assignees_assignee",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/assignees/assignee",
      "text": "Check if a user can be assigned to a issue",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "assignee": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "assignee": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Checks if a user has permission to be assigned to a specific issue.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/assignees/assignee",
        "api_ref": "https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned-to-a-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_issue_number_comments": {
      "provider_intent": "get_repos_owner_repo_issues_issue_number_comments",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/comments",
      "text": "List issue comments",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can use the REST API to list comments on issues and pull requests.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/comments",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/comments",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-issue-comments"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_issues_issue_number_comments": {
      "provider_intent": "post_repos_owner_repo_issues_issue_number_comments",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/comments",
      "text": "Create an issue comment",
      "category": "Issues",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The contents of the comment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "\nYou can use the REST API to create comments on issues and pull requests.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/comments",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/comments",
        "api_ref": "https://docs.github.com/rest/reference/issues#create-an-issue-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_issue_number_events": {
      "provider_intent": "get_repos_owner_repo_issues_issue_number_events",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/events",
      "text": "List issue events",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/events",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/events",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-issue-events"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_issue_number_labels": {
      "provider_intent": "get_repos_owner_repo_issues_issue_number_labels",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/labels",
      "text": "List labels for an issue",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/labels",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-labels-for-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_issues_issue_number_labels": {
      "provider_intent": "post_repos_owner_repo_issues_issue_number_labels",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/labels",
      "text": "Add labels to an issue",
      "category": "Issues",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/labels",
        "api_ref": "https://docs.github.com/rest/reference/issues#add-labels-to-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_issues_issue_number_labels": {
      "provider_intent": "put_repos_owner_repo_issues_issue_number_labels",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/labels",
      "text": "Set labels for an issue",
      "category": "Issues",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes any previous labels and sets the new labels for an issue.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/labels",
        "api_ref": "https://docs.github.com/rest/reference/issues#set-labels-for-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_issues_issue_number_labels": {
      "provider_intent": "delete_repos_owner_repo_issues_issue_number_labels",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/labels",
      "text": "Remove all labels from an issue",
      "category": "Issues",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/labels",
        "api_ref": "https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_issues_issue_number_labels_name": {
      "provider_intent": "delete_repos_owner_repo_issues_issue_number_labels_name",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/labels/name",
      "text": "Remove a label from an issue",
      "category": "Issues",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes the specified label from the issue and returns the remaining labels on the issue.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/labels/name",
        "api_ref": "https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_issues_issue_number_lock": {
      "provider_intent": "put_repos_owner_repo_issues_issue_number_lock",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/lock",
      "text": "Lock an issue",
      "category": "Issues",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "lock_reason": {
          "type": "string",
          "text": "The reason for locking the issue or pull request conversation"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with push access can lock an issue or pull request's conversation.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/lock",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/lock",
        "api_ref": "https://docs.github.com/rest/reference/issues#lock-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_issues_issue_number_lock": {
      "provider_intent": "delete_repos_owner_repo_issues_issue_number_lock",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/lock",
      "text": "Unlock an issue",
      "category": "Issues",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with push access can unlock an issue's conversation.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/lock",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/lock",
        "api_ref": "https://docs.github.com/rest/reference/issues#unlock-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_issue_number_timeline": {
      "provider_intent": "get_repos_owner_repo_issues_issue_number_timeline",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/timeline",
      "text": "List timeline events for an issue",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/timeline",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/timeline",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_labels": {
      "provider_intent": "get_repos_owner_repo_labels",
      "provider_alias_intent": "/repos/owner/repo/labels",
      "text": "List labels for a repository",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/labels",
        "alias_endpoint": "/github/repos/owner/repo/labels",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-labels-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_labels": {
      "provider_intent": "post_repos_owner_repo_labels",
      "provider_alias_intent": "/repos/owner/repo/labels",
      "text": "Create a label",
      "category": "Issues",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the label"
        },
        "color": {
          "type": "string",
          "text": "The [hexadecimal color code](http",
          "enum": [
            "",
            "",
            "www"
          ]
        },
        "description": {
          "type": "string",
          "text": "A short description of the label"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/labels",
        "alias_endpoint": "/github/repos/owner/repo/labels",
        "api_ref": "https://docs.github.com/rest/reference/issues#create-a-label"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_labels_name": {
      "provider_intent": "get_repos_owner_repo_labels_name",
      "provider_alias_intent": "/repos/owner/repo/labels/name",
      "text": "Get a label",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/labels/{name}",
        "alias_endpoint": "/github/repos/owner/repo/labels/name",
        "api_ref": "https://docs.github.com/rest/reference/issues#get-a-label"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_labels_name": {
      "provider_intent": "patch_repos_owner_repo_labels_name",
      "provider_alias_intent": "/repos/owner/repo/labels/name",
      "text": "Update a label",
      "category": "Issues",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "new_name": {
          "type": "string",
          "text": "The new name of the label"
        },
        "color": {
          "type": "string",
          "text": "The [hexadecimal color code](http",
          "enum": [
            "",
            "",
            "www"
          ]
        },
        "description": {
          "type": "string",
          "text": "A short description of the label"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/labels/{name}",
        "alias_endpoint": "/github/repos/owner/repo/labels/name",
        "api_ref": "https://docs.github.com/rest/reference/issues#update-a-label"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_labels_name": {
      "provider_intent": "delete_repos_owner_repo_labels_name",
      "provider_alias_intent": "/repos/owner/repo/labels/name",
      "text": "Delete a label",
      "category": "Issues",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/labels/{name}",
        "alias_endpoint": "/github/repos/owner/repo/labels/name",
        "api_ref": "https://docs.github.com/rest/reference/issues#delete-a-label"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_milestones": {
      "provider_intent": "post_repos_owner_repo_milestones",
      "provider_alias_intent": "/repos/owner/repo/milestones",
      "text": "Create a milestone",
      "category": "Issues",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "The title of the milestone"
        },
        "state": {
          "type": "string",
          "text": "The state of the milestone"
        },
        "description": {
          "type": "string",
          "text": "A description of the milestone"
        },
        "due_on": {
          "type": "string",
          "text": "The milestone due date"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/milestones",
        "alias_endpoint": "/github/repos/owner/repo/milestones",
        "api_ref": "https://docs.github.com/rest/reference/issues#create-a-milestone"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_milestones_milestone_number": {
      "provider_intent": "get_repos_owner_repo_milestones_milestone_number",
      "provider_alias_intent": "/repos/owner/repo/milestones/milestone_number",
      "text": "Get a milestone",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone_number": {
          "type": "integer",
          "text": "The number that identifies the milestone",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone_number": {
          "type": "integer",
          "text": "The number that identifies the milestone",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}",
        "alias_endpoint": "/github/repos/owner/repo/milestones/milestone_number",
        "api_ref": "https://docs.github.com/rest/reference/issues#get-a-milestone"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_milestones_milestone_number": {
      "provider_intent": "patch_repos_owner_repo_milestones_milestone_number",
      "provider_alias_intent": "/repos/owner/repo/milestones/milestone_number",
      "text": "Update a milestone",
      "category": "Issues",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone_number": {
          "type": "integer",
          "text": "The number that identifies the milestone",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "The title of the milestone"
        },
        "state": {
          "type": "string",
          "text": "The state of the milestone"
        },
        "description": {
          "type": "string",
          "text": "A description of the milestone"
        },
        "due_on": {
          "type": "string",
          "text": "The milestone due date"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone_number": {
          "type": "integer",
          "text": "The number that identifies the milestone",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}",
        "alias_endpoint": "/github/repos/owner/repo/milestones/milestone_number",
        "api_ref": "https://docs.github.com/rest/reference/issues#update-a-milestone"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_milestones_milestone_number": {
      "provider_intent": "delete_repos_owner_repo_milestones_milestone_number",
      "provider_alias_intent": "/repos/owner/repo/milestones/milestone_number",
      "text": "Delete a milestone",
      "category": "Issues",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone_number": {
          "type": "integer",
          "text": "The number that identifies the milestone",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone_number": {
          "type": "integer",
          "text": "The number that identifies the milestone",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}",
        "alias_endpoint": "/github/repos/owner/repo/milestones/milestone_number",
        "api_ref": "https://docs.github.com/rest/reference/issues#delete-a-milestone"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_milestones_milestone_number_labels": {
      "provider_intent": "get_repos_owner_repo_milestones_milestone_number_labels",
      "provider_alias_intent": "/repos/owner/repo/milestones/milestone_number/labels",
      "text": "List labels for issues in a milestone",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone_number": {
          "type": "integer",
          "text": "The number that identifies the milestone",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "milestone_number": {
          "type": "integer",
          "text": "The number that identifies the milestone",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
        "alias_endpoint": "/github/repos/owner/repo/milestones/milestone_number/labels",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_issues": {
      "provider_intent": "get_user_issues",
      "provider_alias_intent": "/user/issues",
      "text": "List user account issues assigned to the authenticated user",
      "category": "Issues",
      "method": "GET",
      "type": "API",
      "params": {
        "filter": {
          "type": "string",
          "text": "Indicates which sorts of issues to return"
        },
        "state": {
          "type": "string",
          "text": "Indicates the state of the issues to return"
        },
        "labels": {
          "type": "string",
          "text": "A list of comma separated label names"
        },
        "sort": {
          "type": "string",
          "text": "What to sort results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List issues across owned and member repositories assigned to the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/issues",
        "alias_endpoint": "/github/user/issues",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_licenses": {
      "provider_intent": "get_licenses",
      "provider_alias_intent": "/licenses",
      "text": "Get all commonly used licenses",
      "category": "Licenses",
      "method": "GET",
      "type": "API",
      "params": {
        "featured": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/licenses",
        "alias_endpoint": "/github/licenses",
        "api_ref": "https://docs.github.com/rest/reference/licenses#get-all-commonly-used-licenses"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_licenses_license": {
      "provider_intent": "get_licenses_license",
      "provider_alias_intent": "/licenses/license",
      "text": "Get a license",
      "category": "Licenses",
      "method": "GET",
      "type": "API",
      "params": {
        "license": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "license": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/licenses/{license}",
        "alias_endpoint": "/github/licenses/license",
        "api_ref": "https://docs.github.com/rest/reference/licenses#get-a-license"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_license": {
      "provider_intent": "get_repos_owner_repo_license",
      "provider_alias_intent": "/repos/owner/repo/license",
      "text": "Get the license for a repository",
      "category": "Licenses",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This method returns the contents of the repository's license file if one is detected.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/license",
        "alias_endpoint": "/github/repos/owner/repo/license",
        "api_ref": "https://docs.github.com/rest/reference/licenses/#get-the-license-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_markdown": {
      "provider_intent": "post_markdown",
      "provider_alias_intent": "/markdown",
      "text": "Render a Markdown document",
      "category": "Markdown",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "text": {
          "type": "string",
          "text": "The Markdown text to render in HTML"
        },
        "mode": {
          "type": "string",
          "text": "The rendering mode"
        },
        "context": {
          "type": "string",
          "text": "The repository context to use when creating references in `gfm` mode"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/markdown",
        "alias_endpoint": "/github/markdown",
        "api_ref": "https://docs.github.com/rest/reference/markdown#render-a-markdown-document"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_markdown_raw": {
      "provider_intent": "post_markdown_raw",
      "provider_alias_intent": "/markdown/raw",
      "text": "Render a Markdown document in raw mode",
      "category": "Markdown",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint rather than using JSON format.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/markdown/raw",
        "alias_endpoint": "/github/markdown/raw",
        "api_ref": "https://docs.github.com/rest/reference/markdown#render-a-markdown-document-in-raw-mode"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get": {
      "provider_intent": "get",
      "provider_alias_intent": "/",
      "text": "GitHub API Root",
      "category": "Meta",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get Hypermedia links to resources accessible in GitHub's REST API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/",
        "alias_endpoint": "/github/",
        "api_ref": "https://docs.github.com/rest/overview/resources-in-the-rest-api#root-endpoint"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_meta": {
      "provider_intent": "get_meta",
      "provider_alias_intent": "/meta",
      "text": "Get GitHub meta information",
      "category": "Meta",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns meta information about GitHub including a list of GitHub's IP addresses.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/meta",
        "alias_endpoint": "/github/meta",
        "api_ref": "https://docs.github.com/rest/reference/meta#get-github-meta-information"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_octocat": {
      "provider_intent": "get_octocat",
      "provider_alias_intent": "/octocat",
      "text": "Get Octocat",
      "category": "Meta",
      "method": "GET",
      "type": "API",
      "params": {
        "s": {
          "type": "string",
          "text": "The words to show in Octocat's speech bubble"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get the octocat as ASCII art.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/octocat",
        "alias_endpoint": "/github/octocat",
        "api_ref": "https://docs.github.com/rest/reference/meta#get-octocat"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_versions": {
      "provider_intent": "get_versions",
      "provider_alias_intent": "/versions",
      "text": "Get all API versions",
      "category": "Meta",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get all supported GitHub API versions.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/versions",
        "alias_endpoint": "/github/versions",
        "api_ref": "https://docs.github.com/rest/reference/meta#get-all-api-versions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_zen": {
      "provider_intent": "get_zen",
      "provider_alias_intent": "/zen",
      "text": "Get the Zen of GitHub",
      "category": "Meta",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a random sentence from the Zen of GitHub.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/zen",
        "alias_endpoint": "/github/zen",
        "api_ref": "https://docs.github.com/rest/meta#get-the-zen-of-github"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_migrations": {
      "provider_intent": "get_orgs_org_migrations",
      "provider_alias_intent": "/orgs/org/migrations",
      "text": "List organization migrations",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "exclude": {
          "type": "array",
          "text": "Exclude attributes from the API response to improve performance"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the most recent migrations including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/migrations",
        "alias_endpoint": "/github/orgs/org/migrations",
        "api_ref": "https://docs.github.com/rest/migrations/orgs#list-organization-migrations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_migrations": {
      "provider_intent": "post_orgs_org_migrations",
      "provider_alias_intent": "/orgs/org/migrations",
      "text": "Start an organization migration",
      "category": "Migrations",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "repositories": {
          "type": "array",
          "text": "A list of arrays indicating which repositories should be migrated"
        },
        "lock_repositories": {
          "type": "boolean",
          "text": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data",
          "enum": [
            true,
            false
          ]
        },
        "exclude_metadata": {
          "type": "boolean",
          "text": "Indicates whether metadata should be excluded and only git source should be included for the migration",
          "enum": [
            true,
            false
          ]
        },
        "exclude_git_data": {
          "type": "boolean",
          "text": "Indicates whether the repository git data should be excluded from the migration",
          "enum": [
            true,
            false
          ]
        },
        "exclude_attachments": {
          "type": "boolean",
          "text": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size)",
          "enum": [
            true,
            false
          ]
        },
        "exclude_releases": {
          "type": "boolean",
          "text": "Indicates whether releases should be excluded from the migration (to reduce migration archive file size)",
          "enum": [
            true,
            false
          ]
        },
        "exclude_owner_projects": {
          "type": "boolean",
          "text": "Indicates whether projects owned by the organization or users should be excluded",
          "enum": [
            true,
            false
          ]
        },
        "org_metadata_only": {
          "type": "boolean",
          "text": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags)",
          "enum": [
            true,
            false
          ]
        },
        "exclude": {
          "type": "array",
          "text": "Exclude related items from being returned in the response in order to improve performance of the request"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Initiates the generation of a migration archive.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/migrations",
        "alias_endpoint": "/github/orgs/org/migrations",
        "api_ref": "https://docs.github.com/rest/migrations/orgs#start-an-organization-migration"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_migrations_migration_id": {
      "provider_intent": "get_orgs_org_migrations_migration_id",
      "provider_alias_intent": "/orgs/org/migrations/migration_id",
      "text": "Get an organization migration status",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        },
        "exclude": {
          "type": "array",
          "text": "Exclude attributes from the API response to improve performance"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Fetches the status of a migration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/migrations/{migration_id}",
        "alias_endpoint": "/github/orgs/org/migrations/migration_id",
        "api_ref": "https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_migrations_migration_id_archive": {
      "provider_intent": "get_orgs_org_migrations_migration_id_archive",
      "provider_alias_intent": "/orgs/org/migrations/migration_id/archive",
      "text": "Download an organization migration archive",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Fetches the URL to a migration archive.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/migrations/{migration_id}/archive",
        "alias_endpoint": "/github/orgs/org/migrations/migration_id/archive",
        "api_ref": "https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_migrations_migration_id_archive": {
      "provider_intent": "delete_orgs_org_migrations_migration_id_archive",
      "provider_alias_intent": "/orgs/org/migrations/migration_id/archive",
      "text": "Delete an organization migration archive",
      "category": "Migrations",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a previous migration archive.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/migrations/{migration_id}/archive",
        "alias_endpoint": "/github/orgs/org/migrations/migration_id/archive",
        "api_ref": "https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_migrations_migration_id_repos_repo_name_lock": {
      "provider_intent": "delete_orgs_org_migrations_migration_id_repos_repo_name_lock",
      "provider_alias_intent": "/orgs/org/migrations/migration_id/repos/repo_name/lock",
      "text": "Unlock an organization repository",
      "category": "Migrations",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        },
        "repo_name": {
          "type": "string",
          "text": "repo_name parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        },
        "repo_name": {
          "type": "string",
          "text": "repo_name parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Unlocks a repository that was locked for migration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
        "alias_endpoint": "/github/orgs/org/migrations/migration_id/repos/repo_name/lock",
        "api_ref": "https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_migrations_migration_id_repositories": {
      "provider_intent": "get_orgs_org_migrations_migration_id_repositories",
      "provider_alias_intent": "/orgs/org/migrations/migration_id/repositories",
      "text": "List repositories in an organization migration",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all the repositories for this organization migration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/migrations/{migration_id}/repositories",
        "alias_endpoint": "/github/orgs/org/migrations/migration_id/repositories",
        "api_ref": "https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_import": {
      "provider_intent": "get_repos_owner_repo_import",
      "provider_alias_intent": "/repos/owner/repo/import",
      "text": "Get an import status",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "View the progress of an import.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/import",
        "alias_endpoint": "/github/repos/owner/repo/import",
        "api_ref": "https://docs.github.com/rest/migrations/source-imports#get-an-import-status"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_import": {
      "provider_intent": "put_repos_owner_repo_import",
      "provider_alias_intent": "/repos/owner/repo/import",
      "text": "Start an import",
      "category": "Migrations",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "vcs_url": {
          "type": "string",
          "text": "The URL of the originating repository"
        },
        "vcs": {
          "type": "string",
          "text": "The originating VCS type"
        },
        "vcs_username": {
          "type": "string",
          "text": "If authentication is required the username to provide to `vcs_url`"
        },
        "vcs_password": {
          "type": "string",
          "text": "If authentication is required the password to provide to `vcs_url`"
        },
        "tfvc_project": {
          "type": "string",
          "text": "For a tfvc import the name of the project that is being imported"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Start a source import to a GitHub repository using GitHub Importer.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/import",
        "alias_endpoint": "/github/repos/owner/repo/import",
        "api_ref": "https://docs.github.com/rest/migrations/source-imports#start-an-import"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_import": {
      "provider_intent": "patch_repos_owner_repo_import",
      "provider_alias_intent": "/repos/owner/repo/import",
      "text": "Update an import",
      "category": "Migrations",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "vcs_username": {
          "type": "string",
          "text": "The username to provide to the originating repository"
        },
        "vcs_password": {
          "type": "string",
          "text": "The password to provide to the originating repository"
        },
        "vcs": {
          "type": "string",
          "text": "The type of version control system you are migrating from"
        },
        "tfvc_project": {
          "type": "string",
          "text": "For a tfvc import the name of the project that is being imported"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\nrequest.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/import",
        "alias_endpoint": "/github/repos/owner/repo/import",
        "api_ref": "https://docs.github.com/rest/migrations/source-imports#update-an-import"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_import": {
      "provider_intent": "delete_repos_owner_repo_import",
      "provider_alias_intent": "/repos/owner/repo/import",
      "text": "Cancel an import",
      "category": "Migrations",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Stop an import for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/import",
        "alias_endpoint": "/github/repos/owner/repo/import",
        "api_ref": "https://docs.github.com/rest/migrations/source-imports#cancel-an-import"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_import_authors": {
      "provider_intent": "get_repos_owner_repo_import_authors",
      "provider_alias_intent": "/repos/owner/repo/import/authors",
      "text": "Get commit authors",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "since": {
          "type": "integer",
          "text": "A user ID"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Each type of source control system represents authors in a different way.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/import/authors",
        "alias_endpoint": "/github/repos/owner/repo/import/authors",
        "api_ref": "https://docs.github.com/rest/migrations/source-imports#get-commit-authors"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_import_authors_author_id": {
      "provider_intent": "patch_repos_owner_repo_import_authors_author_id",
      "provider_alias_intent": "/repos/owner/repo/import/authors/author_id",
      "text": "Map a commit author",
      "category": "Migrations",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "author_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "email": {
          "type": "string",
          "text": "The new Git author email"
        },
        "name": {
          "type": "string",
          "text": "The new Git author name"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "author_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update an author's identity for the import.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/import/authors/{author_id}",
        "alias_endpoint": "/github/repos/owner/repo/import/authors/author_id",
        "api_ref": "https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_import_large_files": {
      "provider_intent": "get_repos_owner_repo_import_large_files",
      "provider_alias_intent": "/repos/owner/repo/import/large_files",
      "text": "Get large files",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List files larger than 100MB found during the import\n\n**Warning:** Support for importing Mercurial Subversion and Team Foundation Version Control repositories will end\non October 17 2023.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/import/large_files",
        "alias_endpoint": "/github/repos/owner/repo/import/large_files",
        "api_ref": "https://docs.github.com/rest/migrations/source-imports#get-large-files"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_import_lfs": {
      "provider_intent": "patch_repos_owner_repo_import_lfs",
      "provider_alias_intent": "/repos/owner/repo/import/lfs",
      "text": "Update Git LFS preference",
      "category": "Migrations",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "use_lfs": {
          "type": "string",
          "text": "Whether to store large files during the import"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can import repositories from Subversion Mercurial and TFS that include files larger than 100MB.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/import/lfs",
        "alias_endpoint": "/github/repos/owner/repo/import/lfs",
        "api_ref": "https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_migrations": {
      "provider_intent": "get_user_migrations",
      "provider_alias_intent": "/user/migrations",
      "text": "List user migrations",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all migrations a user has started.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/migrations",
        "alias_endpoint": "/github/user/migrations",
        "api_ref": "https://docs.github.com/rest/migrations/users#list-user-migrations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_migrations": {
      "provider_intent": "post_user_migrations",
      "provider_alias_intent": "/user/migrations",
      "text": "Start a user migration",
      "category": "Migrations",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "lock_repositories": {
          "type": "boolean",
          "text": "Lock the repositories being migrated at the start of the migration",
          "enum": [
            true,
            false
          ]
        },
        "exclude_metadata": {
          "type": "boolean",
          "text": "Indicates whether metadata should be excluded and only git source should be included for the migration",
          "enum": [
            true,
            false
          ]
        },
        "exclude_git_data": {
          "type": "boolean",
          "text": "Indicates whether the repository git data should be excluded from the migration",
          "enum": [
            true,
            false
          ]
        },
        "exclude_attachments": {
          "type": "boolean",
          "text": "Do not include attachments in the migration",
          "enum": [
            true,
            false
          ]
        },
        "exclude_releases": {
          "type": "boolean",
          "text": "Do not include releases in the migration",
          "enum": [
            true,
            false
          ]
        },
        "exclude_owner_projects": {
          "type": "boolean",
          "text": "Indicates whether projects owned by the organization or users should be excluded",
          "enum": [
            true,
            false
          ]
        },
        "org_metadata_only": {
          "type": "boolean",
          "text": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags)",
          "enum": [
            true,
            false
          ]
        },
        "exclude": {
          "type": "array",
          "text": "Exclude attributes from the API response to improve performance"
        },
        "repositories": {
          "type": "array"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Initiates the generation of a user migration archive.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/migrations",
        "alias_endpoint": "/github/user/migrations",
        "api_ref": "https://docs.github.com/rest/migrations/users#start-a-user-migration"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_migrations_migration_id": {
      "provider_intent": "get_user_migrations_migration_id",
      "provider_alias_intent": "/user/migrations/migration_id",
      "text": "Get a user migration status",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        },
        "exclude": {
          "type": "array"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Fetches a single user migration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/migrations/{migration_id}",
        "alias_endpoint": "/github/user/migrations/migration_id",
        "api_ref": "https://docs.github.com/rest/migrations/users#get-a-user-migration-status"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_migrations_migration_id_archive": {
      "provider_intent": "get_user_migrations_migration_id_archive",
      "provider_alias_intent": "/user/migrations/migration_id/archive",
      "text": "Download a user migration archive",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Fetches the URL to download the migration archive as a `tar.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/migrations/{migration_id}/archive",
        "alias_endpoint": "/github/user/migrations/migration_id/archive",
        "api_ref": "https://docs.github.com/rest/migrations/users#download-a-user-migration-archive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_migrations_migration_id_archive": {
      "provider_intent": "delete_user_migrations_migration_id_archive",
      "provider_alias_intent": "/user/migrations/migration_id/archive",
      "text": "Delete a user migration archive",
      "category": "Migrations",
      "method": "DELETE",
      "type": "API",
      "params": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a previous migration archive.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/migrations/{migration_id}/archive",
        "alias_endpoint": "/github/user/migrations/migration_id/archive",
        "api_ref": "https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_migrations_migration_id_repos_repo_name_lock": {
      "provider_intent": "delete_user_migrations_migration_id_repos_repo_name_lock",
      "provider_alias_intent": "/user/migrations/migration_id/repos/repo_name/lock",
      "text": "Unlock a user repository",
      "category": "Migrations",
      "method": "DELETE",
      "type": "API",
      "params": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        },
        "repo_name": {
          "type": "string",
          "text": "repo_name parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        },
        "repo_name": {
          "type": "string",
          "text": "repo_name parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Unlocks a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/migrations/{migration_id}/repos/{repo_name}/lock",
        "alias_endpoint": "/github/user/migrations/migration_id/repos/repo_name/lock",
        "api_ref": "https://docs.github.com/rest/migrations/users#unlock-a-user-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_migrations_migration_id_repositories": {
      "provider_intent": "get_user_migrations_migration_id_repositories",
      "provider_alias_intent": "/user/migrations/migration_id/repositories",
      "text": "List repositories for a user migration",
      "category": "Migrations",
      "method": "GET",
      "type": "API",
      "params": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "migration_id": {
          "type": "integer",
          "text": "The unique identifier of the migration",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all the repositories for this user migration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/migrations/{migration_id}/repositories",
        "alias_endpoint": "/github/user/migrations/migration_id/repositories",
        "api_ref": "https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_actions_oidc_customization_sub": {
      "provider_intent": "get_orgs_org_actions_oidc_customization_sub",
      "provider_alias_intent": "/orgs/org/actions/oidc/customization/sub",
      "text": "Get the customization template for an OIDC subject claim for an organization",
      "category": "OIDC",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the customization template for an OpenID Connect (OIDC) subject claim.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/oidc/customization/sub",
        "alias_endpoint": "/github/orgs/org/actions/oidc/customization/sub",
        "api_ref": "https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_actions_oidc_customization_sub": {
      "provider_intent": "put_orgs_org_actions_oidc_customization_sub",
      "provider_alias_intent": "/orgs/org/actions/oidc/customization/sub",
      "text": "Set the customization template for an OIDC subject claim for an organization",
      "category": "OIDC",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "include_claim_keys": {
          "type": "array",
          "text": "Array of unique strings"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/actions/oidc/customization/sub",
        "alias_endpoint": "/github/orgs/org/actions/oidc/customization/sub",
        "api_ref": "https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_organizations": {
      "provider_intent": "get_organizations",
      "provider_alias_intent": "/organizations",
      "text": "List organizations",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "since": {
          "type": "integer",
          "text": "An organization ID"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all organizations in the order that they were created on GitHub.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations",
        "alias_endpoint": "/github/organizations",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-organizations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_organizations_org_personal-access-token-requests": {
      "provider_intent": "get_organizations_org_personal-access-token-requests",
      "provider_alias_intent": "/organizations/org/personal-access-token-requests",
      "text": "List requests to access organization resources with fine-grained personal access tokens",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "sort": {
          "type": "string",
          "text": "The property by which to sort the results"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "owner": {
          "type": "array",
          "text": "A list of owner usernames to use to filter the results"
        },
        "repository": {
          "type": "string",
          "text": "The name of the repository to use to filter the results"
        },
        "permission": {
          "type": "string",
          "text": "The permission to use to filter the results"
        },
        "last_used_before": {
          "type": "string",
          "text": "Only show fine-grained personal access tokens used before the given time"
        },
        "last_used_after": {
          "type": "string",
          "text": "Only show fine-grained personal access tokens used after the given time"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists requests from organization members to access organization resources with a fine-grained personal access token.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations/{org}/personal-access-token-requests",
        "alias_endpoint": "/github/organizations/org/personal-access-token-requests",
        "api_ref": "https://docs.github.com/rest/orgs/orgs#list-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_organizations_org_personal-access-token-requests": {
      "provider_intent": "post_organizations_org_personal-access-token-requests",
      "provider_alias_intent": "/organizations/org/personal-access-token-requests",
      "text": "Review requests to access organization resources with fine-grained personal access tokens",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "pat_request_ids": {
          "type": "array",
          "text": "Unique identifiers of the requests for access via fine-grained personal access token"
        },
        "action": {
          "type": "string",
          "text": "Action to apply to the requests"
        },
        "reason": {
          "type": "string",
          "text": "Reason for approving or denying the requests"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations/{org}/personal-access-token-requests",
        "alias_endpoint": "/github/organizations/org/personal-access-token-requests",
        "api_ref": "https://docs.github.com/rest/orgs/orgs#review-requests-to-access-organization-resources-with-a-fine-grained-personal-access-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_organizations_org_personal-access-token-requests_pat_request_id": {
      "provider_intent": "post_organizations_org_personal-access-token-requests_pat_request_id",
      "provider_alias_intent": "/organizations/org/personal-access-token-requests/pat_request_id",
      "text": "Review a request to access organization resources with a fine-grained personal access token",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "pat_request_id": {
          "type": "integer",
          "text": "Unique identifier of the request for access via fine-grained personal access token",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "action": {
          "type": "string",
          "text": "Action to apply to the request"
        },
        "reason": {
          "type": "string",
          "text": "Reason for approving or denying the request"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "pat_request_id": {
          "type": "integer",
          "text": "Unique identifier of the request for access via fine-grained personal access token",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Approves or denies a pending request to access organization resources via a fine-grained personal access token.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations/{org}/personal-access-token-requests/{pat_request_id}",
        "alias_endpoint": "/github/organizations/org/personal-access-token-requests/pat_request_id",
        "api_ref": "https://docs.github.com/rest/orgs/orgs#review-a-request-to-access-organization-resources-with-a-fine-grained-personal-access-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_organizations_org_personal-access-token-requests_pat_request_id_repositories": {
      "provider_intent": "get_organizations_org_personal-access-token-requests_pat_request_id_repositories",
      "provider_alias_intent": "/organizations/org/personal-access-token-requests/pat_request_id/repositories",
      "text": "List repositories requested to be accessed by a fine-grained personal access token",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "pat_request_id": {
          "type": "integer",
          "text": "Unique identifier of the request for access via fine-grained personal access token",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "pat_request_id": {
          "type": "integer",
          "text": "Unique identifier of the request for access via fine-grained personal access token",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the repositories a fine-grained personal access token request is requesting access to.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories",
        "alias_endpoint": "/github/organizations/org/personal-access-token-requests/pat_request_id/repositories",
        "api_ref": "https://docs.github.com/rest/orgs/orgs#list-repositories-requested-to-be-accessed-by-a-fine-grained-personal-access-token"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_organizations_org_personal-access-tokens": {
      "provider_intent": "get_organizations_org_personal-access-tokens",
      "provider_alias_intent": "/organizations/org/personal-access-tokens",
      "text": "List fine-grained personal access tokens with access to organization resources",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "sort": {
          "type": "string",
          "text": "The property by which to sort the results"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "owner": {
          "type": "array",
          "text": "A list of owner usernames to use to filter the results"
        },
        "repository": {
          "type": "string",
          "text": "The name of the repository to use to filter the results"
        },
        "permission": {
          "type": "string",
          "text": "The permission to use to filter the results"
        },
        "last_used_before": {
          "type": "string",
          "text": "Only show fine-grained personal access tokens used before the given time"
        },
        "last_used_after": {
          "type": "string",
          "text": "Only show fine-grained personal access tokens used after the given time"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations/{org}/personal-access-tokens",
        "alias_endpoint": "/github/organizations/org/personal-access-tokens",
        "api_ref": "https://docs.github.com/rest/orgs/orgs#list-fine-grained-personal-access-tokens-with-access-to-organization-resources"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_organizations_org_personal-access-tokens": {
      "provider_intent": "post_organizations_org_personal-access-tokens",
      "provider_alias_intent": "/organizations/org/personal-access-tokens",
      "text": "Update the access to organization resources via fine-grained personal access tokens",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "action": {
          "type": "string",
          "text": "Action to apply to the fine-grained personal access token"
        },
        "pat_ids": {
          "type": "array",
          "text": "The IDs of the fine-grained personal access tokens"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates the access organization members have to organization resources via fine-grained personal access tokens.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations/{org}/personal-access-tokens",
        "alias_endpoint": "/github/organizations/org/personal-access-tokens",
        "api_ref": "https://docs.github.com/rest/orgs/orgs#update-the-access-to-organization-resources-via-fine-grained-personal-access-tokens"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_organizations_org_personal-access-tokens_pat_id": {
      "provider_intent": "post_organizations_org_personal-access-tokens_pat_id",
      "provider_alias_intent": "/organizations/org/personal-access-tokens/pat_id",
      "text": "Update the access a fine-grained personal access token has to organization resources",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "pat_id": {
          "type": "integer",
          "text": "The unique identifier of the fine-grained personal access token",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "action": {
          "type": "string",
          "text": "Action to apply to the fine-grained personal access token"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "pat_id": {
          "type": "integer",
          "text": "The unique identifier of the fine-grained personal access token",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates the access an organization member has to organization resources via a fine-grained personal access token.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations/{org}/personal-access-tokens/{pat_id}",
        "alias_endpoint": "/github/organizations/org/personal-access-tokens/pat_id",
        "api_ref": "https://docs.github.com/rest/orgs/orgs#update-the-access-a-fine-grained-personal-access-token-has-to-organization-resources"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_organizations_org_personal-access-tokens_pat_id_repositories": {
      "provider_intent": "get_organizations_org_personal-access-tokens_pat_id_repositories",
      "provider_alias_intent": "/organizations/org/personal-access-tokens/pat_id/repositories",
      "text": "List repositories a fine-grained personal access token has access to",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "pat_id": {
          "type": "integer",
          "text": "Unique identifier of the fine-grained personal access token",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "pat_id": {
          "type": "integer",
          "text": "Unique identifier of the fine-grained personal access token",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the repositories a fine-grained personal access token has access to.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/organizations/{org}/personal-access-tokens/{pat_id}/repositories",
        "alias_endpoint": "/github/organizations/org/personal-access-tokens/pat_id/repositories",
        "api_ref": "https://docs.github.com/rest/orgs/orgs#list-repositories-a-fine-grained-personal-access-token-has-access-to"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org": {
      "provider_intent": "get_orgs_org",
      "provider_alias_intent": "/orgs/org",
      "text": "Get an organization",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "To see many of the organization response values you need to be an authenticated organization owner with the `admin:org` scope.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}",
        "alias_endpoint": "/github/orgs/org",
        "api_ref": "https://docs.github.com/rest/reference/orgs#get-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_orgs_org": {
      "provider_intent": "patch_orgs_org",
      "provider_alias_intent": "/orgs/org",
      "text": "Update an organization",
      "category": "Orgs",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "billing_email": {
          "type": "string",
          "text": "Billing email address"
        },
        "company": {
          "type": "string",
          "text": "The company name"
        },
        "email": {
          "type": "string",
          "text": "The publicly visible email address"
        },
        "twitter_username": {
          "type": "string",
          "text": "The Twitter username of the company"
        },
        "location": {
          "type": "string",
          "text": "The location"
        },
        "name": {
          "type": "string",
          "text": "The shorthand name of the company"
        },
        "description": {
          "type": "string",
          "text": "The description of the company"
        },
        "has_organization_projects": {
          "type": "boolean",
          "text": "Whether an organization can use organization projects",
          "enum": [
            true,
            false
          ]
        },
        "has_repository_projects": {
          "type": "boolean",
          "text": "Whether repositories that belong to the organization can use repository projects",
          "enum": [
            true,
            false
          ]
        },
        "default_repository_permission": {
          "type": "string",
          "text": "Default permission level members have for organization repositories"
        },
        "members_can_create_repositories": {
          "type": "boolean",
          "text": "Whether of non-admin organization members can create repositories",
          "enum": [
            true,
            false
          ]
        },
        "members_can_create_internal_repositories": {
          "type": "boolean",
          "text": "Whether organization members can create internal repositories which are visible to all enterprise members",
          "enum": [
            true,
            false
          ]
        },
        "members_can_create_private_repositories": {
          "type": "boolean",
          "text": "Whether organization members can create private repositories which are visible to organization members with permission",
          "enum": [
            true,
            false
          ]
        },
        "members_can_create_public_repositories": {
          "type": "boolean",
          "text": "Whether organization members can create public repositories which are visible to anyone",
          "enum": [
            true,
            false
          ]
        },
        "members_allowed_repository_creation_type": {
          "type": "string",
          "text": "Specifies which types of repositories non-admin organization members can create"
        },
        "members_can_create_pages": {
          "type": "boolean",
          "text": "Whether organization members can create GitHub Pages sites",
          "enum": [
            true,
            false
          ]
        },
        "members_can_create_public_pages": {
          "type": "boolean",
          "text": "Whether organization members can create public GitHub Pages sites",
          "enum": [
            true,
            false
          ]
        },
        "members_can_create_private_pages": {
          "type": "boolean",
          "text": "Whether organization members can create private GitHub Pages sites",
          "enum": [
            true,
            false
          ]
        },
        "members_can_fork_private_repositories": {
          "type": "boolean",
          "text": "Whether organization members can fork private organization repositories",
          "enum": [
            true,
            false
          ]
        },
        "web_commit_signoff_required": {
          "type": "boolean",
          "text": "Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface",
          "enum": [
            true,
            false
          ]
        },
        "blog": {
          "type": "string"
        },
        "advanced_security_enabled_for_new_repositories": {
          "type": "boolean",
          "text": "Whether GitHub Advanced Security is automatically enabled for new repositories",
          "enum": [
            true,
            false
          ]
        },
        "dependabot_alerts_enabled_for_new_repositories": {
          "type": "boolean",
          "text": "Whether Dependabot alerts is automatically enabled for new repositories",
          "enum": [
            true,
            false
          ]
        },
        "dependabot_security_updates_enabled_for_new_repositories": {
          "type": "boolean",
          "text": "Whether Dependabot security updates is automatically enabled for new repositories",
          "enum": [
            true,
            false
          ]
        },
        "dependency_graph_enabled_for_new_repositories": {
          "type": "boolean",
          "text": "Whether dependency graph is automatically enabled for new repositories",
          "enum": [
            true,
            false
          ]
        },
        "secret_scanning_enabled_for_new_repositories": {
          "type": "boolean",
          "text": "Whether secret scanning is automatically enabled for new repositories",
          "enum": [
            true,
            false
          ]
        },
        "secret_scanning_push_protection_enabled_for_new_repositories": {
          "type": "boolean",
          "text": "Whether secret scanning push protection is automatically enabled for new repositories",
          "enum": [
            true,
            false
          ]
        },
        "secret_scanning_push_protection_custom_link_enabled": {
          "type": "boolean",
          "text": "Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection",
          "enum": [
            true,
            false
          ]
        },
        "secret_scanning_push_protection_custom_link": {
          "type": "string",
          "text": "If `secret_scanning_push_protection_custom_link_enabled` is true the URL that will be displayed to contributors who are blocked from pushing a secret"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}",
        "alias_endpoint": "/github/orgs/org",
        "api_ref": "https://docs.github.com/rest/reference/orgs#update-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org": {
      "provider_intent": "delete_orgs_org",
      "provider_alias_intent": "/orgs/org",
      "text": "Delete an organization",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an organization and all its repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}",
        "alias_endpoint": "/github/orgs/org",
        "api_ref": "https://docs.github.com/rest/orgs/orgs/#delete-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_blocks": {
      "provider_intent": "get_orgs_org_blocks",
      "provider_alias_intent": "/orgs/org/blocks",
      "text": "List users blocked by an organization",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the users blocked by an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/blocks",
        "alias_endpoint": "/github/orgs/org/blocks",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_blocks_username": {
      "provider_intent": "get_orgs_org_blocks_username",
      "provider_alias_intent": "/orgs/org/blocks/username",
      "text": "Check if a user is blocked by an organization",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/blocks/{username}",
        "alias_endpoint": "/github/orgs/org/blocks/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_blocks_username": {
      "provider_intent": "put_orgs_org_blocks_username",
      "provider_alias_intent": "/orgs/org/blocks/username",
      "text": "Block a user from an organization",
      "category": "Orgs",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/blocks/{username}",
        "alias_endpoint": "/github/orgs/org/blocks/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#block-a-user-from-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_blocks_username": {
      "provider_intent": "delete_orgs_org_blocks_username",
      "provider_alias_intent": "/orgs/org/blocks/username",
      "text": "Unblock a user from an organization",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/blocks/{username}",
        "alias_endpoint": "/github/orgs/org/blocks/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_failed_invitations": {
      "provider_intent": "get_orgs_org_failed_invitations",
      "provider_alias_intent": "/orgs/org/failed_invitations",
      "text": "List failed organization invitations",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/failed_invitations",
        "alias_endpoint": "/github/orgs/org/failed_invitations",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_hooks": {
      "provider_intent": "get_orgs_org_hooks",
      "provider_alias_intent": "/orgs/org/hooks",
      "text": "List organization webhooks",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks",
        "alias_endpoint": "/github/orgs/org/hooks",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-organization-webhooks"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_hooks": {
      "provider_intent": "post_orgs_org_hooks",
      "provider_alias_intent": "/orgs/org/hooks",
      "text": "Create an organization webhook",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "Must be passed as \"web\""
        },
        "config": {
          "type": "object",
          "text": "Key/value pairs to provide settings for this webhook"
        },
        "events": {
          "type": "array",
          "text": "Determines what [events](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "active": {
          "type": "boolean",
          "text": "Determines if notifications are sent when the webhook is triggered",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Here's how you can create a hook that posts payloads in JSON format:.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks",
        "alias_endpoint": "/github/orgs/org/hooks",
        "api_ref": "https://docs.github.com/rest/reference/orgs#create-an-organization-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_hooks_hook_id": {
      "provider_intent": "get_orgs_org_hooks_hook_id",
      "provider_alias_intent": "/orgs/org/hooks/hook_id",
      "text": "Get an organization webhook",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a webhook configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id",
        "api_ref": "https://docs.github.com/rest/reference/orgs#get-an-organization-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_orgs_org_hooks_hook_id": {
      "provider_intent": "patch_orgs_org_hooks_hook_id",
      "provider_alias_intent": "/orgs/org/hooks/hook_id",
      "text": "Update an organization webhook",
      "category": "Orgs",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "config": {
          "type": "object",
          "text": "Key/value pairs to provide settings for this webhook"
        },
        "events": {
          "type": "array",
          "text": "Determines what [events](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "active": {
          "type": "boolean",
          "text": "Determines if notifications are sent when the webhook is triggered",
          "enum": [
            true,
            false
          ]
        },
        "name": {
          "type": "string"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates a webhook configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id",
        "api_ref": "https://docs.github.com/rest/reference/orgs#update-an-organization-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_hooks_hook_id": {
      "provider_intent": "delete_orgs_org_hooks_hook_id",
      "provider_alias_intent": "/orgs/org/hooks/hook_id",
      "text": "Delete an organization webhook",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id",
        "api_ref": "https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_hooks_hook_id_config": {
      "provider_intent": "get_orgs_org_hooks_hook_id_config",
      "provider_alias_intent": "/orgs/org/hooks/hook_id/config",
      "text": "Get a webhook configuration for an organization",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns the webhook configuration for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}/config",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id/config",
        "api_ref": "https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_orgs_org_hooks_hook_id_config": {
      "provider_intent": "patch_orgs_org_hooks_hook_id_config",
      "provider_alias_intent": "/orgs/org/hooks/hook_id/config",
      "text": "Update a webhook configuration for an organization",
      "category": "Orgs",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "url": {
          "type": "string",
          "text": "The URL to which the payloads will be delivered"
        },
        "content_type": {
          "type": "string",
          "text": "The media type used to serialize the payloads"
        },
        "secret": {
          "type": "string",
          "text": "If provided the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "insecure_ssl": {
          "type": "undefined"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates the webhook configuration for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}/config",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id/config",
        "api_ref": "https://docs.github.com/rest/reference/orgs#update-a-webhook-configuration-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_hooks_hook_id_deliveries": {
      "provider_intent": "get_orgs_org_hooks_hook_id_deliveries",
      "provider_alias_intent": "/orgs/org/hooks/hook_id/deliveries",
      "text": "List deliveries for an organization webhook",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "cursor": {
          "type": "string",
          "text": "Used for pagination",
          "enum": [
            "the starting delivery from which the page of deliveries is fetched"
          ]
        },
        "redelivery": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a list of webhook deliveries for a webhook configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id/deliveries",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-deliveries-for-an-organization-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_hooks_hook_id_deliveries_delivery_id": {
      "provider_intent": "get_orgs_org_hooks_hook_id_deliveries_delivery_id",
      "provider_alias_intent": "/orgs/org/hooks/hook_id/deliveries/delivery_id",
      "text": "Get a webhook delivery for an organization webhook",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a delivery for a webhook configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id/deliveries/delivery_id",
        "api_ref": "https://docs.github.com/rest/reference/orgs#get-a-webhook-delivery-for-an-organization-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_hooks_hook_id_deliveries_delivery_id_attempts": {
      "provider_intent": "post_orgs_org_hooks_hook_id_deliveries_delivery_id_attempts",
      "provider_alias_intent": "/orgs/org/hooks/hook_id/deliveries/delivery_id/attempts",
      "text": "Redeliver a delivery for an organization webhook",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Redeliver a delivery for a webhook configured in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id/deliveries/delivery_id/attempts",
        "api_ref": "https://docs.github.com/rest/reference/orgs#redeliver-a-delivery-for-an-organization-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_hooks_hook_id_pings": {
      "provider_intent": "post_orgs_org_hooks_hook_id_pings",
      "provider_alias_intent": "/orgs/org/hooks/hook_id/pings",
      "text": "Ping an organization webhook",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This will trigger a [ping event](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/hooks/{hook_id}/pings",
        "alias_endpoint": "/github/orgs/org/hooks/hook_id/pings",
        "api_ref": "https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_installations": {
      "provider_intent": "get_orgs_org_installations",
      "provider_alias_intent": "/orgs/org/installations",
      "text": "List app installations for an organization",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all GitHub Apps in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/installations",
        "alias_endpoint": "/github/orgs/org/installations",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_invitations": {
      "provider_intent": "get_orgs_org_invitations",
      "provider_alias_intent": "/orgs/org/invitations",
      "text": "List pending organization invitations",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "role": {
          "type": "string",
          "text": "Filter invitations by their member role"
        },
        "invitation_source": {
          "type": "string",
          "text": "Filter invitations by their invitation source"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member` `admin` `billing_manager` or `hiring_manager`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/invitations",
        "alias_endpoint": "/github/orgs/org/invitations",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_invitations": {
      "provider_intent": "post_orgs_org_invitations",
      "provider_alias_intent": "/orgs/org/invitations",
      "text": "Create an organization invitation",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "invitee_id": {
          "type": "integer",
          "text": "**Required unless you provide `email`**"
        },
        "email": {
          "type": "string",
          "text": "**Required unless you provide `invitee_id`**"
        },
        "role": {
          "type": "string",
          "text": "The role for the new member"
        },
        "team_ids": {
          "type": "array",
          "text": "Specify IDs for the teams you want to invite new members to"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Invite people to an organization by using their GitHub user ID or their email address.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/invitations",
        "alias_endpoint": "/github/orgs/org/invitations",
        "api_ref": "https://docs.github.com/rest/reference/orgs#create-an-organization-invitation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_invitations_invitation_id": {
      "provider_intent": "delete_orgs_org_invitations_invitation_id",
      "provider_alias_intent": "/orgs/org/invitations/invitation_id",
      "text": "Cancel an organization invitation",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Cancel an organization invitation.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/invitations/{invitation_id}",
        "alias_endpoint": "/github/orgs/org/invitations/invitation_id",
        "api_ref": "https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_invitations_invitation_id_teams": {
      "provider_intent": "get_orgs_org_invitations_invitation_id_teams",
      "provider_alias_intent": "/orgs/org/invitations/invitation_id/teams",
      "text": "List organization invitation teams",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all teams associated with an invitation.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/invitations/{invitation_id}/teams",
        "alias_endpoint": "/github/orgs/org/invitations/invitation_id/teams",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_members": {
      "provider_intent": "get_orgs_org_members",
      "provider_alias_intent": "/orgs/org/members",
      "text": "List organization members",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "filter": {
          "type": "string",
          "text": "Filter members returned in the list"
        },
        "role": {
          "type": "string",
          "text": "Filter members returned by their role"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all users who are members of an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/members",
        "alias_endpoint": "/github/orgs/org/members",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-organization-members"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_members_username": {
      "provider_intent": "get_orgs_org_members_username",
      "provider_alias_intent": "/orgs/org/members/username",
      "text": "Check organization membership for a user",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Check if a user is publicly or privately a member of the organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/members/{username}",
        "alias_endpoint": "/github/orgs/org/members/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_members_username": {
      "provider_intent": "delete_orgs_org_members_username",
      "provider_alias_intent": "/orgs/org/members/username",
      "text": "Remove an organization member",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/members/{username}",
        "alias_endpoint": "/github/orgs/org/members/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#remove-an-organization-member"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_memberships_username": {
      "provider_intent": "get_orgs_org_memberships_username",
      "provider_alias_intent": "/orgs/org/memberships/username",
      "text": "Get organization membership for a user",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "In order to get a user's membership with an organization the authenticated user must be an organization member.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/memberships/{username}",
        "alias_endpoint": "/github/orgs/org/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_memberships_username": {
      "provider_intent": "put_orgs_org_memberships_username",
      "provider_alias_intent": "/orgs/org/memberships/username",
      "text": "Set organization membership for a user",
      "category": "Orgs",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "role": {
          "type": "string",
          "text": "The role to give the user in the organization"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Only authenticated organization owners can add a member to the organization or update the member's role.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/memberships/{username}",
        "alias_endpoint": "/github/orgs/org/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#set-organization-membership-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_memberships_username": {
      "provider_intent": "delete_orgs_org_memberships_username",
      "provider_alias_intent": "/orgs/org/memberships/username",
      "text": "Remove organization membership for a user",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "In order to remove a user's membership with an organization the authenticated user must be an organization owner.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/memberships/{username}",
        "alias_endpoint": "/github/orgs/org/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#remove-organization-membership-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_outside_collaborators": {
      "provider_intent": "get_orgs_org_outside_collaborators",
      "provider_alias_intent": "/orgs/org/outside_collaborators",
      "text": "List outside collaborators for an organization",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "filter": {
          "type": "string",
          "text": "Filter the list of outside collaborators"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all users who are outside collaborators of an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/outside_collaborators",
        "alias_endpoint": "/github/orgs/org/outside_collaborators",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_outside_collaborators_username": {
      "provider_intent": "put_orgs_org_outside_collaborators_username",
      "provider_alias_intent": "/orgs/org/outside_collaborators/username",
      "text": "Convert an organization member to outside collaborator",
      "category": "Orgs",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "async": {
          "type": "boolean",
          "text": "When set to `true` the request will be performed asynchronously",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "When an organization member is converted to an outside collaborator they'll only have access to the repositories that their current team membership allows.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/outside_collaborators/{username}",
        "alias_endpoint": "/github/orgs/org/outside_collaborators/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_outside_collaborators_username": {
      "provider_intent": "delete_orgs_org_outside_collaborators_username",
      "provider_alias_intent": "/orgs/org/outside_collaborators/username",
      "text": "Remove outside collaborator from an organization",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removing a user from this list will remove them from all the organization's repositories.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/outside_collaborators/{username}",
        "alias_endpoint": "/github/orgs/org/outside_collaborators/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_public_members": {
      "provider_intent": "get_orgs_org_public_members",
      "provider_alias_intent": "/orgs/org/public_members",
      "text": "List public organization members",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Members of an organization can choose to have their membership publicized or not.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/public_members",
        "alias_endpoint": "/github/orgs/org/public_members",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-public-organization-members"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_public_members_username": {
      "provider_intent": "get_orgs_org_public_members_username",
      "provider_alias_intent": "/orgs/org/public_members/username",
      "text": "Check public organization membership for a user",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/public_members/{username}",
        "alias_endpoint": "/github/orgs/org/public_members/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_public_members_username": {
      "provider_intent": "put_orgs_org_public_members_username",
      "provider_alias_intent": "/orgs/org/public_members/username",
      "text": "Set public organization membership for the authenticated user",
      "category": "Orgs",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The user can publicize their own membership.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/public_members/{username}",
        "alias_endpoint": "/github/orgs/org/public_members/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_public_members_username": {
      "provider_intent": "delete_orgs_org_public_members_username",
      "provider_alias_intent": "/orgs/org/public_members/username",
      "text": "Remove public organization membership for the authenticated user",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/public_members/{username}",
        "alias_endpoint": "/github/orgs/org/public_members/username",
        "api_ref": "https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_security-managers": {
      "provider_intent": "get_orgs_org_security-managers",
      "provider_alias_intent": "/orgs/org/security-managers",
      "text": "List security manager teams",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists teams that are security managers for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/security-managers",
        "alias_endpoint": "/github/orgs/org/security-managers",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-security-manager-teams"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_security-managers_teams_team_slug": {
      "provider_intent": "put_orgs_org_security-managers_teams_team_slug",
      "provider_alias_intent": "/orgs/org/security-managers/teams/team_slug",
      "text": "Add a security manager team",
      "category": "Orgs",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a team as a security manager for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/security-managers/teams/{team_slug}",
        "alias_endpoint": "/github/orgs/org/security-managers/teams/team_slug",
        "api_ref": "https://docs.github.com/rest/reference/orgs#add-a-security-manager-team"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_security-managers_teams_team_slug": {
      "provider_intent": "delete_orgs_org_security-managers_teams_team_slug",
      "provider_alias_intent": "/orgs/org/security-managers/teams/team_slug",
      "text": "Remove a security manager team",
      "category": "Orgs",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes the security manager role from a team for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/security-managers/teams/{team_slug}",
        "alias_endpoint": "/github/orgs/org/security-managers/teams/team_slug",
        "api_ref": "https://docs.github.com/rest/reference/orgs#remove-a-security-manager-team"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_security_product_enablement": {
      "provider_intent": "post_orgs_org_security_product_enablement",
      "provider_alias_intent": "/orgs/org/security_product/enablement",
      "text": "Enable or disable a security feature for an organization",
      "category": "Orgs",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "security_product": {
          "type": "string",
          "text": "The security feature to enable or disable",
          "required": true
        },
        "enablement": {
          "type": "string",
          "text": "The action to take",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "security_product": {
          "type": "string",
          "text": "The security feature to enable or disable",
          "required": true
        },
        "enablement": {
          "type": "string",
          "text": "The action to take",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables or disables the specified security feature for all eligible repositories in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/{security_product}/{enablement}",
        "alias_endpoint": "/github/orgs/org/security_product/enablement",
        "api_ref": "https://docs.github.com/rest/reference/orgs#enable-or-disable-security-product-on-all-org-repos"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_milestones": {
      "provider_intent": "get_repos_owner_repo_milestones",
      "provider_alias_intent": "/repos/owner/repo/milestones",
      "text": "List milestones",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "The state of the milestone"
        },
        "sort": {
          "type": "string",
          "text": "What to sort results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction of the sort"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/milestones",
        "alias_endpoint": "/github/repos/owner/repo/milestones",
        "api_ref": "https://docs.github.com/rest/reference/issues#list-milestones"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_memberships_orgs": {
      "provider_intent": "get_user_memberships_orgs",
      "provider_alias_intent": "/user/memberships/orgs",
      "text": "List organization memberships for the authenticated user",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "state": {
          "type": "string",
          "text": "Indicates the state of the memberships to return"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/memberships/orgs",
        "alias_endpoint": "/github/user/memberships/orgs",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_memberships_orgs_org": {
      "provider_intent": "get_user_memberships_orgs_org",
      "provider_alias_intent": "/user/memberships/orgs/org",
      "text": "Get an organization membership for the authenticated user",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/memberships/orgs/{org}",
        "alias_endpoint": "/github/user/memberships/orgs/org",
        "api_ref": "https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_user_memberships_orgs_org": {
      "provider_intent": "patch_user_memberships_orgs_org",
      "provider_alias_intent": "/user/memberships/orgs/org",
      "text": "Update an organization membership for the authenticated user",
      "category": "Orgs",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "state": {
          "type": "string",
          "text": "The state that the membership should be in"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/memberships/orgs/{org}",
        "alias_endpoint": "/github/user/memberships/orgs/org",
        "api_ref": "https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_orgs": {
      "provider_intent": "get_user_orgs",
      "provider_alias_intent": "/user/orgs",
      "text": "List organizations for the authenticated user",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List organizations for the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/orgs",
        "alias_endpoint": "/github/user/orgs",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_orgs": {
      "provider_intent": "get_users_username_orgs",
      "provider_alias_intent": "/users/username/orgs",
      "text": "List organizations for a user",
      "category": "Orgs",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List [public organization memberships](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/orgs",
        "alias_endpoint": "/github/users/username/orgs",
        "api_ref": "https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_docker_conflicts": {
      "provider_intent": "get_orgs_org_docker_conflicts",
      "provider_alias_intent": "/orgs/org/docker/conflicts",
      "text": "Get list of conflicting packages during Docker migration for organization",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all packages that are in a specific organization are readable by the requesting user and that encountered a conflict during a Docker migration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/docker/conflicts",
        "alias_endpoint": "/github/orgs/org/docker/conflicts",
        "api_ref": "https://docs.github.com/rest/reference/packages#list-docker-migration-conflicting-packages-for-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_packages": {
      "provider_intent": "get_orgs_org_packages",
      "provider_alias_intent": "/orgs/org/packages",
      "text": "List packages for an organization",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "visibility": {
          "type": "string",
          "text": "The selected visibility of the packages"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists packages in an organization readable by the user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/packages",
        "alias_endpoint": "/github/orgs/org/packages",
        "api_ref": "https://docs.github.com/rest/reference/packages#list-packages-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_packages_package_type_package_name": {
      "provider_intent": "get_orgs_org_packages_package_type_package_name",
      "provider_alias_intent": "/orgs/org/packages/package_type/package_name",
      "text": "Get a package for an organization",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific package in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}",
        "alias_endpoint": "/github/orgs/org/packages/package_type/package_name",
        "api_ref": "https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_packages_package_type_package_name": {
      "provider_intent": "delete_orgs_org_packages_package_type_package_name",
      "provider_alias_intent": "/orgs/org/packages/package_type/package_name",
      "text": "Delete a package for an organization",
      "category": "Packages",
      "method": "DELETE",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an entire package in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}",
        "alias_endpoint": "/github/orgs/org/packages/package_type/package_name",
        "api_ref": "https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_packages_package_type_package_name_restore": {
      "provider_intent": "post_orgs_org_packages_package_type_package_name_restore",
      "provider_alias_intent": "/orgs/org/packages/package_type/package_name/restore",
      "text": "Restore a package for an organization",
      "category": "Packages",
      "method": "POST",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "token": {
          "type": "string",
          "text": "package token"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Restores an entire package in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/restore",
        "alias_endpoint": "/github/orgs/org/packages/package_type/package_name/restore",
        "api_ref": "https://docs.github.com/rest/reference/packages#restore-a-package-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_packages_package_type_package_name_versions": {
      "provider_intent": "get_orgs_org_packages_package_type_package_name_versions",
      "provider_alias_intent": "/orgs/org/packages/package_type/package_name/versions",
      "text": "List package versions for a package owned by an organization",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "state": {
          "type": "string",
          "text": "The state of the package either active or deleted"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists package versions for a package owned by an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions",
        "alias_endpoint": "/github/orgs/org/packages/package_type/package_name/versions",
        "api_ref": "https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_packages_package_type_package_name_versions_package_version_id": {
      "provider_intent": "get_orgs_org_packages_package_type_package_name_versions_package_version_id",
      "provider_alias_intent": "/orgs/org/packages/package_type/package_name/versions/package_version_id",
      "text": "Get a package version for an organization",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific package version in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "alias_endpoint": "/github/orgs/org/packages/package_type/package_name/versions/package_version_id",
        "api_ref": "https://docs.github.com/rest/reference/packages#get-a-package-version-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_packages_package_type_package_name_versions_package_version_id": {
      "provider_intent": "delete_orgs_org_packages_package_type_package_name_versions_package_version_id",
      "provider_alias_intent": "/orgs/org/packages/package_type/package_name/versions/package_version_id",
      "text": "Delete package version for an organization",
      "category": "Packages",
      "method": "DELETE",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a specific package version in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "alias_endpoint": "/github/orgs/org/packages/package_type/package_name/versions/package_version_id",
        "api_ref": "https://docs.github.com/rest/reference/packages#delete-a-package-version-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_packages_package_type_package_name_versions_package_version_id_restore": {
      "provider_intent": "post_orgs_org_packages_package_type_package_name_versions_package_version_id_restore",
      "provider_alias_intent": "/orgs/org/packages/package_type/package_name/versions/package_version_id/restore",
      "text": "Restore package version for an organization",
      "category": "Packages",
      "method": "POST",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Restores a specific package version in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        "alias_endpoint": "/github/orgs/org/packages/package_type/package_name/versions/package_version_id/restore",
        "api_ref": "https://docs.github.com/rest/reference/packages#restore-a-package-version-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_docker_conflicts": {
      "provider_intent": "get_user_docker_conflicts",
      "provider_alias_intent": "/user/docker/conflicts",
      "text": "Get list of conflicting packages during Docker migration for authenticated-user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all packages that are owned by the authenticated user within the user's namespace and that encountered a conflict during a Docker migration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/docker/conflicts",
        "alias_endpoint": "/github/user/docker/conflicts",
        "api_ref": "https://docs.github.com/rest/packages#list-docker-migration-conflicting-packages-for-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_packages": {
      "provider_intent": "get_user_packages",
      "provider_alias_intent": "/user/packages",
      "text": "List packages for the authenticated user's namespace",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "visibility": {
          "type": "string",
          "text": "The selected visibility of the packages"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists packages owned by the authenticated user within the user's namespace.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/packages",
        "alias_endpoint": "/github/user/packages",
        "api_ref": "https://docs.github.com/rest/reference/packages#list-packages-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_packages_package_type_package_name": {
      "provider_intent": "get_user_packages_package_type_package_name",
      "provider_alias_intent": "/user/packages/package_type/package_name",
      "text": "Get a package for the authenticated user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific package for a package owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/packages/{package_type}/{package_name}",
        "alias_endpoint": "/github/user/packages/package_type/package_name",
        "api_ref": "https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_packages_package_type_package_name": {
      "provider_intent": "delete_user_packages_package_type_package_name",
      "provider_alias_intent": "/user/packages/package_type/package_name",
      "text": "Delete a package for the authenticated user",
      "category": "Packages",
      "method": "DELETE",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a package owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/packages/{package_type}/{package_name}",
        "alias_endpoint": "/github/user/packages/package_type/package_name",
        "api_ref": "https://docs.github.com/rest/reference/packages#delete-a-package-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_packages_package_type_package_name_restore": {
      "provider_intent": "post_user_packages_package_type_package_name_restore",
      "provider_alias_intent": "/user/packages/package_type/package_name/restore",
      "text": "Restore a package for the authenticated user",
      "category": "Packages",
      "method": "POST",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "token": {
          "type": "string",
          "text": "package token"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Restores a package owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/packages/{package_type}/{package_name}/restore",
        "alias_endpoint": "/github/user/packages/package_type/package_name/restore",
        "api_ref": "https://docs.github.com/rest/reference/packages#restore-a-package-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_packages_package_type_package_name_versions": {
      "provider_intent": "get_user_packages_package_type_package_name_versions",
      "provider_alias_intent": "/user/packages/package_type/package_name/versions",
      "text": "List package versions for a package owned by the authenticated user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "state": {
          "type": "string",
          "text": "The state of the package either active or deleted"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists package versions for a package owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/packages/{package_type}/{package_name}/versions",
        "alias_endpoint": "/github/user/packages/package_type/package_name/versions",
        "api_ref": "https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_packages_package_type_package_name_versions_package_version_id": {
      "provider_intent": "get_user_packages_package_type_package_name_versions_package_version_id",
      "provider_alias_intent": "/user/packages/package_type/package_name/versions/package_version_id",
      "text": "Get a package version for the authenticated user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific package version for a package owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "alias_endpoint": "/github/user/packages/package_type/package_name/versions/package_version_id",
        "api_ref": "https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_packages_package_type_package_name_versions_package_version_id": {
      "provider_intent": "delete_user_packages_package_type_package_name_versions_package_version_id",
      "provider_alias_intent": "/user/packages/package_type/package_name/versions/package_version_id",
      "text": "Delete a package version for the authenticated user",
      "category": "Packages",
      "method": "DELETE",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a specific package version for a package owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "alias_endpoint": "/github/user/packages/package_type/package_name/versions/package_version_id",
        "api_ref": "https://docs.github.com/rest/reference/packages#delete-a-package-version-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_packages_package_type_package_name_versions_package_version_id_restore": {
      "provider_intent": "post_user_packages_package_type_package_name_versions_package_version_id_restore",
      "provider_alias_intent": "/user/packages/package_type/package_name/versions/package_version_id/restore",
      "text": "Restore a package version for the authenticated user",
      "category": "Packages",
      "method": "POST",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Restores a package version owned by the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        "alias_endpoint": "/github/user/packages/package_type/package_name/versions/package_version_id/restore",
        "api_ref": "https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_docker_conflicts": {
      "provider_intent": "get_users_username_docker_conflicts",
      "provider_alias_intent": "/users/username/docker/conflicts",
      "text": "Get list of conflicting packages during Docker migration for user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all packages that are in a specific user's namespace that the requesting user has access to and that encountered a conflict during Docker migration.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/docker/conflicts",
        "alias_endpoint": "/github/users/username/docker/conflicts",
        "api_ref": "https://docs.github.com/rest/reference/packages#list-docker-migration-conflicting-packages-for-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_packages": {
      "provider_intent": "get_users_username_packages",
      "provider_alias_intent": "/users/username/packages",
      "text": "List packages for a user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "visibility": {
          "type": "string",
          "text": "The selected visibility of the packages"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all packages in a user's namespace for which the requesting user has access.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/packages",
        "alias_endpoint": "/github/users/username/packages",
        "api_ref": "https://docs.github.com/rest/reference/packages#list-packages-for-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_packages_package_type_package_name": {
      "provider_intent": "get_users_username_packages_package_type_package_name",
      "provider_alias_intent": "/users/username/packages/package_type/package_name",
      "text": "Get a package for a user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific package metadata for a public package owned by a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/packages/{package_type}/{package_name}",
        "alias_endpoint": "/github/users/username/packages/package_type/package_name",
        "api_ref": "https://docs.github.com/rest/reference/packages#get-a-package-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_users_username_packages_package_type_package_name": {
      "provider_intent": "delete_users_username_packages_package_type_package_name",
      "provider_alias_intent": "/users/username/packages/package_type/package_name",
      "text": "Delete a package for a user",
      "category": "Packages",
      "method": "DELETE",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an entire package for a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/packages/{package_type}/{package_name}",
        "alias_endpoint": "/github/users/username/packages/package_type/package_name",
        "api_ref": "https://docs.github.com/rest/reference/packages#delete-a-package-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_users_username_packages_package_type_package_name_restore": {
      "provider_intent": "post_users_username_packages_package_type_package_name_restore",
      "provider_alias_intent": "/users/username/packages/package_type/package_name/restore",
      "text": "Restore a package for a user",
      "category": "Packages",
      "method": "POST",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "token": {
          "type": "string",
          "text": "package token"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Restores an entire package for a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/packages/{package_type}/{package_name}/restore",
        "alias_endpoint": "/github/users/username/packages/package_type/package_name/restore",
        "api_ref": "https://docs.github.com/rest/reference/packages#restore-a-package-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_packages_package_type_package_name_versions": {
      "provider_intent": "get_users_username_packages_package_type_package_name_versions",
      "provider_alias_intent": "/users/username/packages/package_type/package_name/versions",
      "text": "List package versions for a package owned by a user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists package versions for a public package owned by a specified user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions",
        "alias_endpoint": "/github/users/username/packages/package_type/package_name/versions",
        "api_ref": "https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_packages_package_type_package_name_versions_package_version_id": {
      "provider_intent": "get_users_username_packages_package_type_package_name_versions_package_version_id",
      "provider_alias_intent": "/users/username/packages/package_type/package_name/versions/package_version_id",
      "text": "Get a package version for a user",
      "category": "Packages",
      "method": "GET",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a specific package version for a public package owned by a specified user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "alias_endpoint": "/github/users/username/packages/package_type/package_name/versions/package_version_id",
        "api_ref": "https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_users_username_packages_package_type_package_name_versions_package_version_id": {
      "provider_intent": "delete_users_username_packages_package_type_package_name_versions_package_version_id",
      "provider_alias_intent": "/users/username/packages/package_type/package_name/versions/package_version_id",
      "text": "Delete package version for a user",
      "category": "Packages",
      "method": "DELETE",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a specific package version for a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "alias_endpoint": "/github/users/username/packages/package_type/package_name/versions/package_version_id",
        "api_ref": "https://docs.github.com/rest/reference/packages#delete-a-package-version-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_users_username_packages_package_type_package_name_versions_package_version_id_restore": {
      "provider_intent": "post_users_username_packages_package_type_package_name_versions_package_version_id_restore",
      "provider_alias_intent": "/users/username/packages/package_type/package_name/versions/package_version_id/restore",
      "text": "Restore package version for a user",
      "category": "Packages",
      "method": "POST",
      "type": "API",
      "params": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "package_type": {
          "type": "string",
          "text": "The type of supported package",
          "required": true
        },
        "package_name": {
          "type": "string",
          "text": "The name of the package",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "package_version_id": {
          "type": "integer",
          "text": "Unique identifier of the package version",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Restores a specific package version for a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        "alias_endpoint": "/github/users/username/packages/package_type/package_name/versions/package_version_id/restore",
        "api_ref": "https://docs.github.com/rest/reference/packages#restore-a-package-version-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_projects": {
      "provider_intent": "get_orgs_org_projects",
      "provider_alias_intent": "/orgs/org/projects",
      "text": "List organization projects",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "Indicates the state of the projects to return"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the projects in an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/projects",
        "alias_endpoint": "/github/orgs/org/projects",
        "api_ref": "https://docs.github.com/rest/reference/projects#list-organization-projects"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_projects": {
      "provider_intent": "post_orgs_org_projects",
      "provider_alias_intent": "/orgs/org/projects",
      "text": "Create an organization project",
      "category": "Projects",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the project"
        },
        "body": {
          "type": "string",
          "text": "The description of the project"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates an organization project board.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/projects",
        "alias_endpoint": "/github/orgs/org/projects",
        "api_ref": "https://docs.github.com/rest/reference/projects#create-an-organization-project"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_projects_columns_cards_card_id": {
      "provider_intent": "get_projects_columns_cards_card_id",
      "provider_alias_intent": "/projects/columns/cards/card_id",
      "text": "Get a project card",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "card_id": {
          "type": "integer",
          "text": "The unique identifier of the card",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "card_id": {
          "type": "integer",
          "text": "The unique identifier of the card",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/cards/{card_id}",
        "alias_endpoint": "/github/projects/columns/cards/card_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#get-a-project-card"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_projects_columns_cards_card_id": {
      "provider_intent": "patch_projects_columns_cards_card_id",
      "provider_alias_intent": "/projects/columns/cards/card_id",
      "text": "Update an existing project card",
      "category": "Projects",
      "method": "PATCH",
      "type": "API",
      "params": {
        "card_id": {
          "type": "integer",
          "text": "The unique identifier of the card",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "note": {
          "type": "string",
          "text": "The project card's note"
        },
        "archived": {
          "type": "boolean",
          "text": "Whether or not the card is archived",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "card_id": {
          "type": "integer",
          "text": "The unique identifier of the card",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/cards/{card_id}",
        "alias_endpoint": "/github/projects/columns/cards/card_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#update-a-project-card"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_projects_columns_cards_card_id": {
      "provider_intent": "delete_projects_columns_cards_card_id",
      "provider_alias_intent": "/projects/columns/cards/card_id",
      "text": "Delete a project card",
      "category": "Projects",
      "method": "DELETE",
      "type": "API",
      "params": {
        "card_id": {
          "type": "integer",
          "text": "The unique identifier of the card",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "card_id": {
          "type": "integer",
          "text": "The unique identifier of the card",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/cards/{card_id}",
        "alias_endpoint": "/github/projects/columns/cards/card_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#delete-a-project-card"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_projects_columns_cards_card_id_moves": {
      "provider_intent": "post_projects_columns_cards_card_id_moves",
      "provider_alias_intent": "/projects/columns/cards/card_id/moves",
      "text": "Move a project card",
      "category": "Projects",
      "method": "POST",
      "type": "API",
      "params": {
        "card_id": {
          "type": "integer",
          "text": "The unique identifier of the card",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "position": {
          "type": "string",
          "text": "The position of the card in a column"
        },
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column the card should be moved to"
        }
      },
      "path": {
        "card_id": {
          "type": "integer",
          "text": "The unique identifier of the card",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/cards/{card_id}/moves",
        "alias_endpoint": "/github/projects/columns/cards/card_id/moves",
        "api_ref": "https://docs.github.com/rest/reference/projects#move-a-project-card"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_projects_columns_column_id": {
      "provider_intent": "get_projects_columns_column_id",
      "provider_alias_intent": "/projects/columns/column_id",
      "text": "Get a project column",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/{column_id}",
        "alias_endpoint": "/github/projects/columns/column_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#get-a-project-column"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_projects_columns_column_id": {
      "provider_intent": "patch_projects_columns_column_id",
      "provider_alias_intent": "/projects/columns/column_id",
      "text": "Update an existing project column",
      "category": "Projects",
      "method": "PATCH",
      "type": "API",
      "params": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "Name of the project column"
        }
      },
      "path": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/{column_id}",
        "alias_endpoint": "/github/projects/columns/column_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#update-a-project-column"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_projects_columns_column_id": {
      "provider_intent": "delete_projects_columns_column_id",
      "provider_alias_intent": "/projects/columns/column_id",
      "text": "Delete a project column",
      "category": "Projects",
      "method": "DELETE",
      "type": "API",
      "params": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/{column_id}",
        "alias_endpoint": "/github/projects/columns/column_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#delete-a-project-column"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_projects_columns_column_id_cards": {
      "provider_intent": "get_projects_columns_column_id_cards",
      "provider_alias_intent": "/projects/columns/column_id/cards",
      "text": "List project cards",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        },
        "archived_state": {
          "type": "string",
          "text": "Filters the project cards that are returned by the card's state"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/{column_id}/cards",
        "alias_endpoint": "/github/projects/columns/column_id/cards",
        "api_ref": "https://docs.github.com/rest/reference/projects#list-project-cards"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_projects_columns_column_id_cards": {
      "provider_intent": "post_projects_columns_column_id_cards",
      "provider_alias_intent": "/projects/columns/column_id/cards",
      "text": "Create a project card",
      "category": "Projects",
      "method": "POST",
      "type": "API",
      "params": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/{column_id}/cards",
        "alias_endpoint": "/github/projects/columns/column_id/cards",
        "api_ref": "https://docs.github.com/rest/reference/projects#create-a-project-card"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_projects_columns_column_id_moves": {
      "provider_intent": "post_projects_columns_column_id_moves",
      "provider_alias_intent": "/projects/columns/column_id/moves",
      "text": "Move a project column",
      "category": "Projects",
      "method": "POST",
      "type": "API",
      "params": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "position": {
          "type": "string",
          "text": "The position of the column in a project"
        }
      },
      "path": {
        "column_id": {
          "type": "integer",
          "text": "The unique identifier of the column",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/columns/{column_id}/moves",
        "alias_endpoint": "/github/projects/columns/column_id/moves",
        "api_ref": "https://docs.github.com/rest/reference/projects#move-a-project-column"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_projects_project_id": {
      "provider_intent": "get_projects_project_id",
      "provider_alias_intent": "/projects/project_id",
      "text": "Get a project",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a project by its `id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}",
        "alias_endpoint": "/github/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#get-a-project"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_projects_project_id": {
      "provider_intent": "patch_projects_project_id",
      "provider_alias_intent": "/projects/project_id",
      "text": "Update a project",
      "category": "Projects",
      "method": "PATCH",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "Name of the project"
        },
        "body": {
          "type": "string",
          "text": "Body of the project"
        },
        "state": {
          "type": "string",
          "text": "State of the project; either 'open' or 'closed'"
        },
        "organization_permission": {
          "type": "string",
          "text": "The baseline permission that all organization members have on this project"
        },
        "private": {
          "type": "boolean",
          "text": "Whether or not this project can be seen by everyone",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates a project board's information.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}",
        "alias_endpoint": "/github/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#update-a-project"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_projects_project_id": {
      "provider_intent": "delete_projects_project_id",
      "provider_alias_intent": "/projects/project_id",
      "text": "Delete a project",
      "category": "Projects",
      "method": "DELETE",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a project board.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}",
        "alias_endpoint": "/github/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/projects#delete-a-project"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_projects_project_id_collaborators": {
      "provider_intent": "get_projects_project_id_collaborators",
      "provider_alias_intent": "/projects/project_id/collaborators",
      "text": "List project collaborators",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        },
        "affiliation": {
          "type": "string",
          "text": "Filters the collaborators by their affiliation"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the collaborators for an organization project.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}/collaborators",
        "alias_endpoint": "/github/projects/project_id/collaborators",
        "api_ref": "https://docs.github.com/rest/reference/projects#list-project-collaborators"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_projects_project_id_collaborators_username": {
      "provider_intent": "put_projects_project_id_collaborators_username",
      "provider_alias_intent": "/projects/project_id/collaborators/username",
      "text": "Add project collaborator",
      "category": "Projects",
      "method": "PUT",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "permission": {
          "type": "string",
          "text": "The permission to grant the collaborator"
        }
      },
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a collaborator to an organization project and sets their permission level.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}/collaborators/{username}",
        "alias_endpoint": "/github/projects/project_id/collaborators/username",
        "api_ref": "https://docs.github.com/rest/reference/projects#add-project-collaborator"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_projects_project_id_collaborators_username": {
      "provider_intent": "delete_projects_project_id_collaborators_username",
      "provider_alias_intent": "/projects/project_id/collaborators/username",
      "text": "Remove user as a collaborator",
      "category": "Projects",
      "method": "DELETE",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a collaborator from an organization project.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}/collaborators/{username}",
        "alias_endpoint": "/github/projects/project_id/collaborators/username",
        "api_ref": "https://docs.github.com/rest/reference/projects#remove-project-collaborator"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_projects_project_id_collaborators_username_permission": {
      "provider_intent": "get_projects_project_id_collaborators_username_permission",
      "provider_alias_intent": "/projects/project_id/collaborators/username/permission",
      "text": "Get project permission for a user",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns the collaborator's permission level for an organization project.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}/collaborators/{username}/permission",
        "alias_endpoint": "/github/projects/project_id/collaborators/username/permission",
        "api_ref": "https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_projects_project_id_columns": {
      "provider_intent": "get_projects_project_id_columns",
      "provider_alias_intent": "/projects/project_id/columns",
      "text": "List project columns",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}/columns",
        "alias_endpoint": "/github/projects/project_id/columns",
        "api_ref": "https://docs.github.com/rest/reference/projects#list-project-columns"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_projects_project_id_columns": {
      "provider_intent": "post_projects_project_id_columns",
      "provider_alias_intent": "/projects/project_id/columns",
      "text": "Create a project column",
      "category": "Projects",
      "method": "POST",
      "type": "API",
      "params": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "Name of the project column"
        }
      },
      "path": {
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/projects/{project_id}/columns",
        "alias_endpoint": "/github/projects/project_id/columns",
        "api_ref": "https://docs.github.com/rest/reference/projects#create-a-project-column"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_projects": {
      "provider_intent": "get_repos_owner_repo_projects",
      "provider_alias_intent": "/repos/owner/repo/projects",
      "text": "List repository projects",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "Indicates the state of the projects to return"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the projects in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/projects",
        "alias_endpoint": "/github/repos/owner/repo/projects",
        "api_ref": "https://docs.github.com/rest/reference/projects#list-repository-projects"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_projects": {
      "provider_intent": "post_repos_owner_repo_projects",
      "provider_alias_intent": "/repos/owner/repo/projects",
      "text": "Create a repository project",
      "category": "Projects",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the project"
        },
        "body": {
          "type": "string",
          "text": "The description of the project"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a repository project board.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/projects",
        "alias_endpoint": "/github/repos/owner/repo/projects",
        "api_ref": "https://docs.github.com/rest/reference/projects#create-a-repository-project"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_projects": {
      "provider_intent": "post_user_projects",
      "provider_alias_intent": "/user/projects",
      "text": "Create a user project",
      "category": "Projects",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "Name of the project"
        },
        "body": {
          "type": "string",
          "text": "Body of the project"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a user project board.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/projects",
        "alias_endpoint": "/github/user/projects",
        "api_ref": "https://docs.github.com/rest/reference/projects#create-a-user-project"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_projects": {
      "provider_intent": "get_users_username_projects",
      "provider_alias_intent": "/users/username/projects",
      "text": "List user projects",
      "category": "Projects",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "Indicates the state of the projects to return"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/projects",
        "alias_endpoint": "/github/users/username/projects",
        "api_ref": "https://docs.github.com/rest/reference/projects#list-user-projects"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls": {
      "provider_intent": "get_repos_owner_repo_pulls",
      "provider_alias_intent": "/repos/owner/repo/pulls",
      "text": "List pull requests",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "Either `open` `closed` or `all` to filter by state"
        },
        "head": {
          "type": "string",
          "text": "Filter pulls by head user or head organization and branch name in the format of `user",
          "enum": [
            "ref-name` or `organization"
          ]
        },
        "base": {
          "type": "string",
          "text": "Filter pulls by base branch name"
        },
        "sort": {
          "type": "string",
          "text": "What to sort results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction of the sort"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations GitHub Pro and legacy per-repository billing plans and in public and private repositories with GitHub Team and GitHub Enterprise Cloud.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls",
        "alias_endpoint": "/github/repos/owner/repo/pulls",
        "api_ref": "https://docs.github.com/rest/reference/pulls#list-pull-requests"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pulls": {
      "provider_intent": "post_repos_owner_repo_pulls",
      "provider_alias_intent": "/repos/owner/repo/pulls",
      "text": "Create a pull request",
      "category": "Pulls",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "The title of the new pull request"
        },
        "head": {
          "type": "string",
          "text": "The name of the branch where your changes are implemented"
        },
        "head_repo": {
          "type": "string",
          "text": "The name of the repository where the changes in the pull request were made"
        },
        "base": {
          "type": "string",
          "text": "The name of the branch you want the changes pulled into"
        },
        "body": {
          "type": "string",
          "text": "The contents of the pull request"
        },
        "maintainer_can_modify": {
          "type": "boolean",
          "text": "Indicates whether [maintainers can modify](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "draft": {
          "type": "boolean",
          "text": "Indicates whether the pull request is a draft",
          "enum": [
            true,
            false
          ]
        },
        "issue": {
          "type": "integer",
          "text": "An issue in the repository to convert to a pull request"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations GitHub Pro and legacy per-repository billing plans and in public and private repositories with GitHub Team and GitHub Enterprise Cloud.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls",
        "alias_endpoint": "/github/repos/owner/repo/pulls",
        "api_ref": "https://docs.github.com/rest/reference/pulls#create-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_comments": {
      "provider_intent": "get_repos_owner_repo_pulls_comments",
      "provider_alias_intent": "/repos/owner/repo/pulls/comments",
      "text": "List review comments in a repository",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sort": {
          "type": "string"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort results"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists review comments for all pull requests in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/comments",
        "alias_endpoint": "/github/repos/owner/repo/pulls/comments",
        "api_ref": "https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_comments_comment_id": {
      "provider_intent": "get_repos_owner_repo_pulls_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/pulls/comments/comment_id",
      "text": "Get a review comment for a pull request",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Provides details for a review comment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_pulls_comments_comment_id": {
      "provider_intent": "patch_repos_owner_repo_pulls_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/pulls/comments/comment_id",
      "text": "Update a review comment for a pull request",
      "category": "Pulls",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The text of the reply to the review comment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables you to edit a review comment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_pulls_comments_comment_id": {
      "provider_intent": "delete_repos_owner_repo_pulls_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/pulls/comments/comment_id",
      "text": "Delete a review comment for a pull request",
      "category": "Pulls",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a review comment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number",
      "text": "Get a pull request",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations GitHub Pro and legacy per-repository billing plans and in public and private repositories with GitHub Team and GitHub Enterprise Cloud.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number",
        "api_ref": "https://docs.github.com/rest/reference/pulls#get-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_pulls_pull_number": {
      "provider_intent": "patch_repos_owner_repo_pulls_pull_number",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number",
      "text": "Update a pull request",
      "category": "Pulls",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "The title of the pull request"
        },
        "body": {
          "type": "string",
          "text": "The contents of the pull request"
        },
        "state": {
          "type": "string",
          "text": "State of this Pull Request"
        },
        "base": {
          "type": "string",
          "text": "The name of the branch you want your changes pulled into"
        },
        "maintainer_can_modify": {
          "type": "boolean",
          "text": "Indicates whether [maintainers can modify](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations GitHub Pro and legacy per-repository billing plans and in public and private repositories with GitHub Team and GitHub Enterprise Cloud.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number",
        "api_ref": "https://docs.github.com/rest/reference/pulls/#update-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number_comments": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number_comments",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/comments",
      "text": "List review comments on a pull request",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort results"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all review comments for a pull request.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/comments",
        "api_ref": "https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pulls_pull_number_comments": {
      "provider_intent": "post_repos_owner_repo_pulls_pull_number_comments",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/comments",
      "text": "Create a review comment for a pull request",
      "category": "Pulls",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The text of the review comment"
        },
        "commit_id": {
          "type": "string",
          "text": "The SHA of the commit needing a comment"
        },
        "path": {
          "type": "string",
          "text": "The relative path to the file that necessitates a comment"
        },
        "position": {
          "type": "integer",
          "text": "**This parameter is deprecated"
        },
        "side": {
          "type": "string",
          "text": "In a split diff view the side of the diff that the pull request's changes appear on"
        },
        "line": {
          "type": "integer",
          "text": "**Required unless using `subject_type",
          "enum": [
            "file`**"
          ]
        },
        "start_line": {
          "type": "integer",
          "text": "**Required when using multi-line comments unless using `in_reply_to`**"
        },
        "start_side": {
          "type": "string",
          "text": "**Required when using multi-line comments unless using `in_reply_to`**"
        },
        "in_reply_to": {
          "type": "integer",
          "text": "The ID of the review comment to reply to"
        },
        "subject_type": {
          "type": "string",
          "text": "The level at which the comment is targeted"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "\nCreates a review comment in the pull request diff.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/comments",
        "api_ref": "https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pulls_pull_number_comments_comment_id_replies": {
      "provider_intent": "post_repos_owner_repo_pulls_pull_number_comments_comment_id_replies",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/comments/comment_id/replies",
      "text": "Create a reply for a review comment",
      "category": "Pulls",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The text of the review comment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a reply to a review comment for a pull request.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/comments/comment_id/replies",
        "api_ref": "https://docs.github.com/rest/reference/pulls#create-a-reply-for-a-review-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number_commits": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number_commits",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/commits",
      "text": "List commits on a pull request",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists a maximum of 250 commits for a pull request.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/commits",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/commits",
        "api_ref": "https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number_files": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number_files",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/files",
      "text": "List pull requests files",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** Responses include a maximum of 3000 files.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/files",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/files",
        "api_ref": "https://docs.github.com/rest/reference/pulls#list-pull-requests-files"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number_merge": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number_merge",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/merge",
      "text": "Check if a pull request has been merged",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Checks if a pull request has been merged into the base branch.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/merge",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/merge",
        "api_ref": "https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_pulls_pull_number_merge": {
      "provider_intent": "put_repos_owner_repo_pulls_pull_number_merge",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/merge",
      "text": "Merge a pull request",
      "category": "Pulls",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "commit_title": {
          "type": "string",
          "text": "Title for the automatic commit message"
        },
        "commit_message": {
          "type": "string",
          "text": "Extra detail to append to automatic commit message"
        },
        "sha": {
          "type": "string",
          "text": "SHA that pull request head must match to allow merge"
        },
        "merge_method": {
          "type": "string",
          "text": "The merge method to use"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Merges a pull request into the base branch.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/merge",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/merge",
        "api_ref": "https://docs.github.com/rest/reference/pulls#merge-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number_requested_reviewers": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number_requested_reviewers",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/requested_reviewers",
      "text": "Get all requested reviewers for a pull request",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the users or teams whose review is requested for a pull request.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/requested_reviewers",
        "api_ref": "https://docs.github.com/rest/reference/pulls#get-all-requested-reviewers-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pulls_pull_number_requested_reviewers": {
      "provider_intent": "post_repos_owner_repo_pulls_pull_number_requested_reviewers",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/requested_reviewers",
      "text": "Request reviewers for a pull request",
      "category": "Pulls",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "reviewers": {
          "type": "array",
          "text": "An array of user `login`s that will be requested"
        },
        "team_reviewers": {
          "type": "array",
          "text": "An array of team `slug`s that will be requested"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Requests reviews for a pull request from a given set of users and/or teams.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/requested_reviewers",
        "api_ref": "https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_pulls_pull_number_requested_reviewers": {
      "provider_intent": "delete_repos_owner_repo_pulls_pull_number_requested_reviewers",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/requested_reviewers",
      "text": "Remove requested reviewers from a pull request",
      "category": "Pulls",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "reviewers": {
          "type": "array",
          "text": "An array of user `login`s that will be removed"
        },
        "team_reviewers": {
          "type": "array",
          "text": "An array of team `slug`s that will be removed"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes review requests from a pull request for a given set of users and/or teams.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/requested_reviewers",
        "api_ref": "https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number_reviews": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number_reviews",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/reviews",
      "text": "List reviews for a pull request",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The list of reviews returns in chronological order.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/reviews",
        "api_ref": "https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pulls_pull_number_reviews": {
      "provider_intent": "post_repos_owner_repo_pulls_pull_number_reviews",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/reviews",
      "text": "Create a review for a pull request",
      "category": "Pulls",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "commit_id": {
          "type": "string",
          "text": "The SHA of the commit that needs a review"
        },
        "body": {
          "type": "string",
          "text": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter"
        },
        "event": {
          "type": "string",
          "text": "The review action you want to perform"
        },
        "comments": {
          "type": "array",
          "text": "Use the following table to specify the location destination and contents of the draft review comment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This endpoint triggers [notifications](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/reviews",
        "api_ref": "https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number_reviews_review_id": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number_reviews_review_id",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/reviews/review_id",
      "text": "Get a review for a pull request",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Retrieves a pull request review by its ID.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/reviews/review_id",
        "api_ref": "https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_pulls_pull_number_reviews_review_id": {
      "provider_intent": "put_repos_owner_repo_pulls_pull_number_reviews_review_id",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/reviews/review_id",
      "text": "Update a review for a pull request",
      "category": "Pulls",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The body text of the pull request review"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update the review summary comment with new text.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/reviews/review_id",
        "api_ref": "https://docs.github.com/rest/reference/pulls#update-a-review-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_pulls_pull_number_reviews_review_id": {
      "provider_intent": "delete_repos_owner_repo_pulls_pull_number_reviews_review_id",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/reviews/review_id",
      "text": "Delete a pending review for a pull request",
      "category": "Pulls",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a pull request review that has not been submitted.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/reviews/review_id",
        "api_ref": "https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_pull_number_reviews_review_id_comments": {
      "provider_intent": "get_repos_owner_repo_pulls_pull_number_reviews_review_id_comments",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/reviews/review_id/comments",
      "text": "List comments for a pull request review",
      "category": "Pulls",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List comments for a specific pull request review.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/reviews/review_id/comments",
        "api_ref": "https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_pulls_pull_number_reviews_review_id_dismissals": {
      "provider_intent": "put_repos_owner_repo_pulls_pull_number_reviews_review_id_dismissals",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/reviews/review_id/dismissals",
      "text": "Dismiss a review for a pull request",
      "category": "Pulls",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "message": {
          "type": "string",
          "text": "The message for the pull request review dismissal"
        },
        "event": {
          "type": "string"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** To dismiss a pull request review on a [protected branch](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/reviews/review_id/dismissals",
        "api_ref": "https://docs.github.com/rest/reference/pulls#dismiss-a-review-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pulls_pull_number_reviews_review_id_events": {
      "provider_intent": "post_repos_owner_repo_pulls_pull_number_reviews_review_id_events",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/reviews/review_id/events",
      "text": "Submit a review for a pull request",
      "category": "Pulls",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The body text of the pull request review"
        },
        "event": {
          "type": "string",
          "text": "The review action you want to perform"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        },
        "review_id": {
          "type": "integer",
          "text": "The unique identifier of the review",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Submits a pending review for a pull request.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/reviews/review_id/events",
        "api_ref": "https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_pulls_pull_number_update-branch": {
      "provider_intent": "put_repos_owner_repo_pulls_pull_number_update-branch",
      "provider_alias_intent": "/repos/owner/repo/pulls/pull_number/update-branch",
      "text": "Update a pull request branch",
      "category": "Pulls",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "expected_head_sha": {
          "type": "string",
          "text": "The expected SHA of the pull request's HEAD ref"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "pull_number": {
          "type": "integer",
          "text": "The number that identifies the pull request",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
        "alias_endpoint": "/github/repos/owner/repo/pulls/pull_number/update-branch",
        "api_ref": "https://docs.github.com/rest/reference/pulls#update-a-pull-request-branch"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_rate_limit": {
      "provider_intent": "get_rate_limit",
      "provider_alias_intent": "/rate_limit",
      "text": "Get rate limit status for the authenticated user",
      "category": "Rate Limit",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** Accessing this endpoint does not count against your REST API rate limit.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/rate_limit",
        "alias_endpoint": "/github/rate_limit",
        "api_ref": "https://docs.github.com/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number_reactions": {
      "provider_intent": "get_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number_reactions",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number/reactions",
      "text": "List reactions for a team discussion comment",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the reactions to a [team discussion comment](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number_reactions": {
      "provider_intent": "post_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number_reactions",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number/reactions",
      "text": "Create reaction for a team discussion comment",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a reaction to a [team discussion comment](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number_reactions_reaction_id": {
      "provider_intent": "delete_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number_reactions_reaction_id",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number/reactions/reaction_id",
      "text": "Delete team discussion comment reaction",
      "category": "Reactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number/reactions/reaction_id",
        "api_ref": "https://docs.github.com/rest/reference/reactions#delete-team-discussion-comment-reaction"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_discussions_discussion_number_reactions": {
      "provider_intent": "get_orgs_org_teams_team_slug_discussions_discussion_number_reactions",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/reactions",
      "text": "List reactions for a team discussion",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the reactions to a [team discussion](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_teams_team_slug_discussions_discussion_number_reactions": {
      "provider_intent": "post_orgs_org_teams_team_slug_discussions_discussion_number_reactions",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/reactions",
      "text": "Create reaction for a team discussion",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a reaction to a [team discussion](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_teams_team_slug_discussions_discussion_number_reactions_reaction_id": {
      "provider_intent": "delete_orgs_org_teams_team_slug_discussions_discussion_number_reactions_reaction_id",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/reactions/reaction_id",
      "text": "Delete team discussion reaction",
      "category": "Reactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/reactions/reaction_id",
        "api_ref": "https://docs.github.com/rest/reference/reactions#delete-team-discussion-reaction"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_comments_comment_id_reactions": {
      "provider_intent": "get_repos_owner_repo_comments_comment_id_reactions",
      "provider_alias_intent": "/repos/owner/repo/comments/comment_id/reactions",
      "text": "List reactions for a commit comment",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the reactions to a [commit comment](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/comments/comment_id/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#list-reactions-for-a-commit-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_comments_comment_id_reactions": {
      "provider_intent": "post_repos_owner_repo_comments_comment_id_reactions",
      "provider_alias_intent": "/repos/owner/repo/comments/comment_id/reactions",
      "text": "Create reaction for a commit comment",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a reaction to a [commit comment](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/comments/comment_id/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#create-reaction-for-a-commit-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_comments_comment_id_reactions_reaction_id": {
      "provider_intent": "delete_repos_owner_repo_comments_comment_id_reactions_reaction_id",
      "provider_alias_intent": "/repos/owner/repo/comments/comment_id/reactions/reaction_id",
      "text": "Delete a commit comment reaction",
      "category": "Reactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
        "alias_endpoint": "/github/repos/owner/repo/comments/comment_id/reactions/reaction_id",
        "api_ref": "https://docs.github.com/rest/reference/reactions#delete-a-commit-comment-reaction"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_comments_comment_id_reactions": {
      "provider_intent": "get_repos_owner_repo_issues_comments_comment_id_reactions",
      "provider_alias_intent": "/repos/owner/repo/issues/comments/comment_id/reactions",
      "text": "List reactions for an issue comment",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the reactions to an [issue comment](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/issues/comments/comment_id/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_issues_comments_comment_id_reactions": {
      "provider_intent": "post_repos_owner_repo_issues_comments_comment_id_reactions",
      "provider_alias_intent": "/repos/owner/repo/issues/comments/comment_id/reactions",
      "text": "Create reaction for an issue comment",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a reaction to an [issue comment](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/issues/comments/comment_id/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_issues_comments_comment_id_reactions_reaction_id": {
      "provider_intent": "delete_repos_owner_repo_issues_comments_comment_id_reactions_reaction_id",
      "provider_alias_intent": "/repos/owner/repo/issues/comments/comment_id/reactions/reaction_id",
      "text": "Delete an issue comment reaction",
      "category": "Reactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
        "alias_endpoint": "/github/repos/owner/repo/issues/comments/comment_id/reactions/reaction_id",
        "api_ref": "https://docs.github.com/rest/reference/reactions#delete-an-issue-comment-reaction"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_issues_issue_number_reactions": {
      "provider_intent": "get_repos_owner_repo_issues_issue_number_reactions",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/reactions",
      "text": "List reactions for an issue",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the reactions to an [issue](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_issues_issue_number_reactions": {
      "provider_intent": "post_repos_owner_repo_issues_issue_number_reactions",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/reactions",
      "text": "Create reaction for an issue",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a reaction to an [issue](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_issues_issue_number_reactions_reaction_id": {
      "provider_intent": "delete_repos_owner_repo_issues_issue_number_reactions_reaction_id",
      "provider_alias_intent": "/repos/owner/repo/issues/issue_number/reactions/reaction_id",
      "text": "Delete an issue reaction",
      "category": "Reactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "issue_number": {
          "type": "integer",
          "text": "The number that identifies the issue",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
        "alias_endpoint": "/github/repos/owner/repo/issues/issue_number/reactions/reaction_id",
        "api_ref": "https://docs.github.com/rest/reference/reactions#delete-an-issue-reaction"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pulls_comments_comment_id_reactions": {
      "provider_intent": "get_repos_owner_repo_pulls_comments_comment_id_reactions",
      "provider_alias_intent": "/repos/owner/repo/pulls/comments/comment_id/reactions",
      "text": "List reactions for a pull request review comment",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the reactions to a [pull request review comment](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/pulls/comments/comment_id/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pulls_comments_comment_id_reactions": {
      "provider_intent": "post_repos_owner_repo_pulls_comments_comment_id_reactions",
      "provider_alias_intent": "/repos/owner/repo/pulls/comments/comment_id/reactions",
      "text": "Create reaction for a pull request review comment",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a reaction to a [pull request review comment](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/pulls/comments/comment_id/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_pulls_comments_comment_id_reactions_reaction_id": {
      "provider_intent": "delete_repos_owner_repo_pulls_comments_comment_id_reactions_reaction_id",
      "provider_alias_intent": "/repos/owner/repo/pulls/comments/comment_id/reactions/reaction_id",
      "text": "Delete a pull request comment reaction",
      "category": "Reactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
        "alias_endpoint": "/github/repos/owner/repo/pulls/comments/comment_id/reactions/reaction_id",
        "api_ref": "https://docs.github.com/rest/reference/reactions#delete-a-pull-request-comment-reaction"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_releases_release_id_reactions": {
      "provider_intent": "get_repos_owner_repo_releases_release_id_reactions",
      "provider_alias_intent": "/repos/owner/repo/releases/release_id/reactions",
      "text": "List reactions for a release",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the reactions to a [release](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/releases/release_id/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-release"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_releases_release_id_reactions": {
      "provider_intent": "post_repos_owner_repo_releases_release_id_reactions",
      "provider_alias_intent": "/repos/owner/repo/releases/release_id/reactions",
      "text": "Create reaction for a release",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a reaction to a [release](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/reactions",
        "alias_endpoint": "/github/repos/owner/repo/releases/release_id/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-release"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_releases_release_id_reactions_reaction_id": {
      "provider_intent": "delete_repos_owner_repo_releases_release_id_reactions_reaction_id",
      "provider_alias_intent": "/repos/owner/repo/releases/release_id/reactions/reaction_id",
      "text": "Delete a release reaction",
      "category": "Reactions",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        },
        "reaction_id": {
          "type": "integer",
          "text": "The unique identifier of the reaction",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}",
        "alias_endpoint": "/github/repos/owner/repo/releases/release_id/reactions/reaction_id",
        "api_ref": "https://docs.github.com/rest/reference/reactions/#delete-a-release-reaction"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_discussions_discussion_number_comments_comment_number_reactions": {
      "provider_intent": "get_teams_team_id_discussions_discussion_number_comments_comment_number_reactions",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/comments/comment_number/reactions",
      "text": "List reactions for a team discussion comment (Legacy)",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/comments/comment_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_teams_team_id_discussions_discussion_number_comments_comment_number_reactions": {
      "provider_intent": "post_teams_team_id_discussions_discussion_number_comments_comment_number_reactions",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/comments/comment_number/reactions",
      "text": "Create reaction for a team discussion comment (Legacy)",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/comments/comment_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_discussions_discussion_number_reactions": {
      "provider_intent": "get_teams_team_id_discussions_discussion_number_reactions",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/reactions",
      "text": "List reactions for a team discussion (Legacy)",
      "category": "Reactions",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "content": {
          "type": "string",
          "text": "Returns a single [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/reactions",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_teams_team_id_discussions_discussion_number_reactions": {
      "provider_intent": "post_teams_team_id_discussions_discussion_number_reactions",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/reactions",
      "text": "Create reaction for a team discussion (Legacy)",
      "category": "Reactions",
      "method": "POST",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "content": {
          "type": "string",
          "text": "The [reaction type](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/reactions",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/reactions",
        "api_ref": "https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_repos": {
      "provider_intent": "get_orgs_org_repos",
      "provider_alias_intent": "/orgs/org/repos",
      "text": "List organization repositories",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "Specifies the types of repositories you want returned"
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The order to sort by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists repositories for the specified organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/repos",
        "alias_endpoint": "/github/orgs/org/repos",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-organization-repositories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_repos": {
      "provider_intent": "post_orgs_org_repos",
      "provider_alias_intent": "/orgs/org/repos",
      "text": "Create an organization repository",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the repository"
        },
        "description": {
          "type": "string",
          "text": "A short description of the repository"
        },
        "homepage": {
          "type": "string",
          "text": "A URL with more information about the repository"
        },
        "private": {
          "type": "boolean",
          "text": "Whether the repository is private",
          "enum": [
            true,
            false
          ]
        },
        "visibility": {
          "type": "string",
          "text": "The visibility of the repository"
        },
        "has_issues": {
          "type": "boolean",
          "text": "Either `true` to enable issues for this repository or `false` to disable them",
          "enum": [
            true,
            false
          ]
        },
        "has_projects": {
          "type": "boolean",
          "text": "Either `true` to enable projects for this repository or `false` to disable them",
          "enum": [
            true,
            false
          ]
        },
        "has_wiki": {
          "type": "boolean",
          "text": "Either `true` to enable the wiki for this repository or `false` to disable it",
          "enum": [
            true,
            false
          ]
        },
        "has_downloads": {
          "type": "boolean",
          "text": "Whether downloads are enabled",
          "enum": [
            true,
            false
          ]
        },
        "is_template": {
          "type": "boolean",
          "text": "Either `true` to make this repo available as a template repository or `false` to prevent it",
          "enum": [
            true,
            false
          ]
        },
        "team_id": {
          "type": "integer",
          "text": "The id of the team that will be granted access to this repository"
        },
        "auto_init": {
          "type": "boolean",
          "text": "Pass `true` to create an initial commit with empty README",
          "enum": [
            true,
            false
          ]
        },
        "gitignore_template": {
          "type": "string",
          "text": "Desired language or platform ["
        },
        "license_template": {
          "type": "string",
          "text": "Choose an [open source license template](https",
          "enum": [
            "",
            "",
            "choosealicense"
          ]
        },
        "allow_squash_merge": {
          "type": "boolean",
          "text": "Either `true` to allow squash-merging pull requests or `false` to prevent squash-merging",
          "enum": [
            true,
            false
          ]
        },
        "allow_merge_commit": {
          "type": "boolean",
          "text": "Either `true` to allow merging pull requests with a merge commit or `false` to prevent merging pull requests with merge commits",
          "enum": [
            true,
            false
          ]
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "text": "Either `true` to allow rebase-merging pull requests or `false` to prevent rebase-merging",
          "enum": [
            true,
            false
          ]
        },
        "allow_auto_merge": {
          "type": "boolean",
          "text": "Either `true` to allow auto-merge on pull requests or `false` to disallow auto-merge",
          "enum": [
            true,
            false
          ]
        },
        "delete_branch_on_merge": {
          "type": "boolean",
          "text": "Either `true` to allow automatically deleting head branches when pull requests are merged or `false` to prevent automatic deletion",
          "enum": [
            true,
            false
          ]
        },
        "use_squash_pr_title_as_default": {
          "type": "boolean",
          "text": "Either `true` to allow squash-merge commits to use pull request title or `false` to use commit message",
          "enum": [
            true,
            false
          ]
        },
        "squash_merge_commit_title": {
          "type": "string",
          "text": "The default value for a squash merge commit title",
          "enum": [
            "- `PR_TITLE` - default to the pull request's title"
          ]
        },
        "squash_merge_commit_message": {
          "type": "string",
          "text": "The default value for a squash merge commit message",
          "enum": [
            "- `PR_BODY` - default to the pull request's body"
          ]
        },
        "merge_commit_title": {
          "type": "string",
          "text": "The default value for a merge commit title"
        },
        "merge_commit_message": {
          "type": "string",
          "text": "The default value for a merge commit message"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new repository in the specified organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/repos",
        "alias_endpoint": "/github/orgs/org/repos",
        "api_ref": "https://docs.github.com/rest/reference/repos#create-an-organization-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_rulesets": {
      "provider_intent": "get_orgs_org_rulesets",
      "provider_alias_intent": "/orgs/org/rulesets",
      "text": "Get all organization repository rulesets",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get all the repository rulesets for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/rulesets",
        "alias_endpoint": "/github/orgs/org/rulesets",
        "api_ref": "https://docs.github.com/rest/repos/rules#get-organization-rulesets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_rulesets": {
      "provider_intent": "post_orgs_org_rulesets",
      "provider_alias_intent": "/orgs/org/rulesets",
      "text": "Create an organization repository ruleset",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the ruleset"
        },
        "target": {
          "type": "string",
          "text": "The target of the ruleset"
        },
        "enforcement": {
          "type": "string",
          "text": "The enforcement level of the ruleset"
        },
        "bypass_actors": {
          "type": "array",
          "text": "The actors that can bypass the rules in this ruleset"
        },
        "conditions": {
          "type": "object",
          "text": "Conditions for a organization ruleset"
        },
        "rules": {
          "type": "array",
          "text": "An array of rules within the ruleset"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a repository ruleset for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/rulesets",
        "alias_endpoint": "/github/orgs/org/rulesets",
        "api_ref": "https://docs.github.com/rest/repos/rules#create-organization-repository-ruleset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_rulesets_ruleset_id": {
      "provider_intent": "get_orgs_org_rulesets_ruleset_id",
      "provider_alias_intent": "/orgs/org/rulesets/ruleset_id",
      "text": "Get an organization repository ruleset",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a repository ruleset for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/rulesets/{ruleset_id}",
        "alias_endpoint": "/github/orgs/org/rulesets/ruleset_id",
        "api_ref": "https://docs.github.com/rest/repos/rules#get-organization-ruleset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_rulesets_ruleset_id": {
      "provider_intent": "put_orgs_org_rulesets_ruleset_id",
      "provider_alias_intent": "/orgs/org/rulesets/ruleset_id",
      "text": "Update an organization repository ruleset",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the ruleset"
        },
        "target": {
          "type": "string",
          "text": "The target of the ruleset"
        },
        "enforcement": {
          "type": "string",
          "text": "The enforcement level of the ruleset"
        },
        "bypass_actors": {
          "type": "array",
          "text": "The actors that can bypass the rules in this ruleset"
        },
        "conditions": {
          "type": "object",
          "text": "Conditions for a organization ruleset"
        },
        "rules": {
          "type": "array",
          "text": "An array of rules within the ruleset"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update a ruleset for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/rulesets/{ruleset_id}",
        "alias_endpoint": "/github/orgs/org/rulesets/ruleset_id",
        "api_ref": "https://docs.github.com/rest/repos/rules#update-organization-ruleset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_rulesets_ruleset_id": {
      "provider_intent": "delete_orgs_org_rulesets_ruleset_id",
      "provider_alias_intent": "/orgs/org/rulesets/ruleset_id",
      "text": "Delete an organization repository ruleset",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Delete a ruleset for an organization.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/rulesets/{ruleset_id}",
        "alias_endpoint": "/github/orgs/org/rulesets/ruleset_id",
        "api_ref": "https://docs.github.com/rest/repos/rules#delete-organization-ruleset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo": {
      "provider_intent": "get_repos_owner_repo",
      "provider_alias_intent": "/repos/owner/repo",
      "text": "Get a repository",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The `parent` and `source` objects are present when the repository is a fork.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}",
        "alias_endpoint": "/github/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo": {
      "provider_intent": "patch_repos_owner_repo",
      "provider_alias_intent": "/repos/owner/repo",
      "text": "Update a repository",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the repository"
        },
        "description": {
          "type": "string",
          "text": "A short description of the repository"
        },
        "homepage": {
          "type": "string",
          "text": "A URL with more information about the repository"
        },
        "private": {
          "type": "boolean",
          "text": "Either `true` to make the repository private or `false` to make it public",
          "enum": [
            true,
            false
          ]
        },
        "visibility": {
          "type": "string",
          "text": "The visibility of the repository"
        },
        "security_and_analysis": {
          "type": "object",
          "text": "Specify which security and analysis features to enable or disable for the repository"
        },
        "has_issues": {
          "type": "boolean",
          "text": "Either `true` to enable issues for this repository or `false` to disable them",
          "enum": [
            true,
            false
          ]
        },
        "has_projects": {
          "type": "boolean",
          "text": "Either `true` to enable projects for this repository or `false` to disable them",
          "enum": [
            true,
            false
          ]
        },
        "has_wiki": {
          "type": "boolean",
          "text": "Either `true` to enable the wiki for this repository or `false` to disable it",
          "enum": [
            true,
            false
          ]
        },
        "is_template": {
          "type": "boolean",
          "text": "Either `true` to make this repo available as a template repository or `false` to prevent it",
          "enum": [
            true,
            false
          ]
        },
        "default_branch": {
          "type": "string",
          "text": "Updates the default branch for this repository"
        },
        "allow_squash_merge": {
          "type": "boolean",
          "text": "Either `true` to allow squash-merging pull requests or `false` to prevent squash-merging",
          "enum": [
            true,
            false
          ]
        },
        "allow_merge_commit": {
          "type": "boolean",
          "text": "Either `true` to allow merging pull requests with a merge commit or `false` to prevent merging pull requests with merge commits",
          "enum": [
            true,
            false
          ]
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "text": "Either `true` to allow rebase-merging pull requests or `false` to prevent rebase-merging",
          "enum": [
            true,
            false
          ]
        },
        "allow_auto_merge": {
          "type": "boolean",
          "text": "Either `true` to allow auto-merge on pull requests or `false` to disallow auto-merge",
          "enum": [
            true,
            false
          ]
        },
        "delete_branch_on_merge": {
          "type": "boolean",
          "text": "Either `true` to allow automatically deleting head branches when pull requests are merged or `false` to prevent automatic deletion",
          "enum": [
            true,
            false
          ]
        },
        "allow_update_branch": {
          "type": "boolean",
          "text": "Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging or false otherwise",
          "enum": [
            true,
            false
          ]
        },
        "use_squash_pr_title_as_default": {
          "type": "boolean",
          "text": "Either `true` to allow squash-merge commits to use pull request title or `false` to use commit message",
          "enum": [
            true,
            false
          ]
        },
        "squash_merge_commit_title": {
          "type": "string",
          "text": "The default value for a squash merge commit title - `PR_TITLE` - default to the pull request's title"
        },
        "squash_merge_commit_message": {
          "type": "string",
          "text": "The default value for a squash merge commit message",
          "enum": [
            "-  `PR_BODY` - default to the pull request's body"
          ]
        },
        "merge_commit_title": {
          "type": "string",
          "text": "The default value for a merge commit title"
        },
        "merge_commit_message": {
          "type": "string",
          "text": "The default value for a merge commit message"
        },
        "archived": {
          "type": "boolean",
          "text": "Whether to archive this repository",
          "enum": [
            true,
            false
          ]
        },
        "allow_forking": {
          "type": "boolean",
          "text": "Either `true` to allow private forks or `false` to prevent private forks",
          "enum": [
            true,
            false
          ]
        },
        "web_commit_signoff_required": {
          "type": "boolean",
          "text": "Either `true` to require contributors to sign off on web-based commits or `false` to not require contributors to sign off on web-based commits",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note**: To edit a repository's topics use the [Replace all repository topics](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}",
        "alias_endpoint": "/github/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/repos/repos#update-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo": {
      "provider_intent": "delete_repos_owner_repo",
      "provider_alias_intent": "/repos/owner/repo",
      "text": "Delete a repository",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deleting a repository requires admin access.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}",
        "alias_endpoint": "/github/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/repos#delete-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_autolinks": {
      "provider_intent": "get_repos_owner_repo_autolinks",
      "provider_alias_intent": "/repos/owner/repo/autolinks",
      "text": "List all autolinks of a repository",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This returns a list of autolinks configured for the given repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/autolinks",
        "alias_endpoint": "/github/repos/owner/repo/autolinks",
        "api_ref": "https://docs.github.com/rest/repos/autolinks#list-all-autolinks-of-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_autolinks": {
      "provider_intent": "post_repos_owner_repo_autolinks",
      "provider_alias_intent": "/repos/owner/repo/autolinks",
      "text": "Create an autolink reference for a repository",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "key_prefix": {
          "type": "string",
          "text": "This prefix appended by certain characters will generate a link any time it is found in an issue pull request or commit"
        },
        "url_template": {
          "type": "string",
          "text": "The URL must contain `<num>` for the reference number"
        },
        "is_alphanumeric": {
          "type": "boolean",
          "text": "Whether this autolink reference matches alphanumeric characters",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with admin access to the repository can create an autolink.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/autolinks",
        "alias_endpoint": "/github/repos/owner/repo/autolinks",
        "api_ref": "https://docs.github.com/rest/repos/autolinks#create-an-autolink-reference-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_autolinks_autolink_id": {
      "provider_intent": "get_repos_owner_repo_autolinks_autolink_id",
      "provider_alias_intent": "/repos/owner/repo/autolinks/autolink_id",
      "text": "Get an autolink reference of a repository",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "autolink_id": {
          "type": "integer",
          "text": "The unique identifier of the autolink",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "autolink_id": {
          "type": "integer",
          "text": "The unique identifier of the autolink",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This returns a single autolink reference by ID that was configured for the given repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/autolinks/{autolink_id}",
        "alias_endpoint": "/github/repos/owner/repo/autolinks/autolink_id",
        "api_ref": "https://docs.github.com/rest/repos/autolinks#get-an-autolink-reference-of-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_autolinks_autolink_id": {
      "provider_intent": "delete_repos_owner_repo_autolinks_autolink_id",
      "provider_alias_intent": "/repos/owner/repo/autolinks/autolink_id",
      "text": "Delete an autolink reference from a repository",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "autolink_id": {
          "type": "integer",
          "text": "The unique identifier of the autolink",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "autolink_id": {
          "type": "integer",
          "text": "The unique identifier of the autolink",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This deletes a single autolink reference by ID that was configured for the given repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/autolinks/{autolink_id}",
        "alias_endpoint": "/github/repos/owner/repo/autolinks/autolink_id",
        "api_ref": "https://docs.github.com/rest/repos/autolinks#delete-an-autolink-reference-from-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_automated-security-fixes": {
      "provider_intent": "put_repos_owner_repo_automated-security-fixes",
      "provider_alias_intent": "/repos/owner/repo/automated-security-fixes",
      "text": "Enable automated security fixes",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables automated security fixes for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/automated-security-fixes",
        "alias_endpoint": "/github/repos/owner/repo/automated-security-fixes",
        "api_ref": "https://docs.github.com/rest/reference/repos#enable-automated-security-fixes"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_automated-security-fixes": {
      "provider_intent": "delete_repos_owner_repo_automated-security-fixes",
      "provider_alias_intent": "/repos/owner/repo/automated-security-fixes",
      "text": "Disable automated security fixes",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Disables automated security fixes for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/automated-security-fixes",
        "alias_endpoint": "/github/repos/owner/repo/automated-security-fixes",
        "api_ref": "https://docs.github.com/rest/reference/repos#disable-automated-security-fixes"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches": {
      "provider_intent": "get_repos_owner_repo_branches",
      "provider_alias_intent": "/repos/owner/repo/branches",
      "text": "List branches",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "protected": {
          "type": "boolean",
          "text": "Setting to `true` returns only protected branches",
          "enum": [
            true,
            false
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches",
        "alias_endpoint": "/github/repos/owner/repo/branches",
        "api_ref": "https://docs.github.com/rest/branches/branches#list-branches"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch": {
      "provider_intent": "get_repos_owner_repo_branches_branch",
      "provider_alias_intent": "/repos/owner/repo/branches/branch",
      "text": "Get a branch",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch",
        "api_ref": "https://docs.github.com/rest/branches/branches#get-a-branch"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection",
      "text": "Get branch protection",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#get-branch-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_branches_branch_protection": {
      "provider_intent": "put_repos_owner_repo_branches_branch_protection",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection",
      "text": "Update branch protection",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "required_status_checks": {
          "type": "object",
          "text": "Require status checks to pass before merging"
        },
        "enforce_admins": {
          "type": "boolean",
          "text": "Enforce all configured restrictions for administrators",
          "enum": [
            true,
            false
          ]
        },
        "required_pull_request_reviews": {
          "type": "object",
          "text": "Require at least one approving review on a pull request before merging"
        },
        "restrictions": {
          "type": "object",
          "text": "Restrict who can push to the protected branch"
        },
        "required_linear_history": {
          "type": "boolean",
          "text": "Enforces a linear commit Git history which prevents anyone from pushing merge commits to a branch",
          "enum": [
            true,
            false
          ]
        },
        "allow_force_pushes": {
          "type": "boolean",
          "text": "Permits force pushes to the protected branch by anyone with write access to the repository",
          "enum": [
            true,
            false
          ]
        },
        "allow_deletions": {
          "type": "boolean",
          "text": "Allows deletion of the protected branch by anyone with write access to the repository",
          "enum": [
            true,
            false
          ]
        },
        "block_creations": {
          "type": "boolean",
          "text": "If set to `true` the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches unless the push is initiated by a user team or app which has the ability to push",
          "enum": [
            true,
            false
          ]
        },
        "required_conversation_resolution": {
          "type": "boolean",
          "text": "Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule",
          "enum": [
            true,
            false
          ]
        },
        "lock_branch": {
          "type": "boolean",
          "text": "Whether to set the branch as read-only",
          "enum": [
            true,
            false
          ]
        },
        "allow_fork_syncing": {
          "type": "boolean",
          "text": "Whether users can pull changes from upstream when the branch is locked",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#update-branch-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection",
      "text": "Delete branch protection",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#delete-branch-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_enforce_admins": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_enforce_admins",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/enforce_admins",
      "text": "Get admin branch protection",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/enforce_admins",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#get-admin-branch-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_branches_branch_protection_enforce_admins": {
      "provider_intent": "post_repos_owner_repo_branches_branch_protection_enforce_admins",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/enforce_admins",
      "text": "Set admin branch protection",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/enforce_admins",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#set-admin-branch-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_enforce_admins": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_enforce_admins",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/enforce_admins",
      "text": "Delete admin branch protection",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/enforce_admins",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#delete-admin-branch-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_required_pull_request_reviews": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_required_pull_request_reviews",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_pull_request_reviews",
      "text": "Get pull request review protection",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_pull_request_reviews",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#get-pull-request-review-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_branches_branch_protection_required_pull_request_reviews": {
      "provider_intent": "patch_repos_owner_repo_branches_branch_protection_required_pull_request_reviews",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_pull_request_reviews",
      "text": "Update pull request review protection",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "dismissal_restrictions": {
          "type": "object",
          "text": "Specify which users teams and apps can dismiss pull request reviews"
        },
        "dismiss_stale_reviews": {
          "type": "boolean",
          "text": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit",
          "enum": [
            true,
            false
          ]
        },
        "require_code_owner_reviews": {
          "type": "boolean",
          "text": "Blocks merging pull requests until [code owners](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "required_approving_review_count": {
          "type": "integer",
          "text": "Specifies the number of reviewers required to approve pull requests"
        },
        "require_last_push_approval": {
          "type": "boolean",
          "text": "Whether the most recent push must be approved by someone other than the person who pushed it",
          "enum": [
            true,
            false
          ]
        },
        "bypass_pull_request_allowances": {
          "type": "object",
          "text": "Allow specific users teams or apps to bypass pull request requirements"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_pull_request_reviews",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#update-pull-request-review-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_required_pull_request_reviews": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_required_pull_request_reviews",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_pull_request_reviews",
      "text": "Delete pull request review protection",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_pull_request_reviews",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#delete-pull-request-review-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_required_signatures": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_required_signatures",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_signatures",
      "text": "Get commit signature protection",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_signatures",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#get-commit-signature-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_branches_branch_protection_required_signatures": {
      "provider_intent": "post_repos_owner_repo_branches_branch_protection_required_signatures",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_signatures",
      "text": "Create commit signature protection",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_signatures",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#create-commit-signature-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_required_signatures": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_required_signatures",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_signatures",
      "text": "Delete commit signature protection",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_signatures",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_required_status_checks": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_required_status_checks",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_status_checks",
      "text": "Get status checks protection",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_status_checks",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_branches_branch_protection_required_status_checks": {
      "provider_intent": "patch_repos_owner_repo_branches_branch_protection_required_status_checks",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_status_checks",
      "text": "Update status check protection",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "strict": {
          "type": "boolean",
          "text": "Require branches to be up to date before merging",
          "enum": [
            true,
            false
          ]
        },
        "contexts": {
          "type": "array",
          "text": "**Deprecated**",
          "enum": [
            "The list of status checks to require in order to merge into this branch"
          ]
        },
        "checks": {
          "type": "array",
          "text": "The list of status checks to require in order to merge into this branch"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_status_checks",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#update-status-check-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_required_status_checks": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_required_status_checks",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_status_checks",
      "text": "Remove status check protection",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_status_checks",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_required_status_checks_contexts": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_required_status_checks_contexts",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_status_checks/contexts",
      "text": "Get all status check contexts",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_status_checks/contexts",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_branches_branch_protection_required_status_checks_contexts": {
      "provider_intent": "post_repos_owner_repo_branches_branch_protection_required_status_checks_contexts",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_status_checks/contexts",
      "text": "Add status check contexts",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_status_checks/contexts",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#add-status-check-contexts"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_branches_branch_protection_required_status_checks_contexts": {
      "provider_intent": "put_repos_owner_repo_branches_branch_protection_required_status_checks_contexts",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_status_checks/contexts",
      "text": "Set status check contexts",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_status_checks/contexts",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#set-status-check-contexts"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_required_status_checks_contexts": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_required_status_checks_contexts",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/required_status_checks/contexts",
      "text": "Remove status check contexts",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/required_status_checks/contexts",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#remove-status-check-contexts"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_restrictions": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_restrictions",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions",
      "text": "Get access restrictions",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#get-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_restrictions": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_restrictions",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions",
      "text": "Delete access restrictions",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_restrictions_apps": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_restrictions_apps",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/apps",
      "text": "Get apps with access to the protected branch",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/apps",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#list-apps-with-access-to-the-protected-branch"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_branches_branch_protection_restrictions_apps": {
      "provider_intent": "post_repos_owner_repo_branches_branch_protection_restrictions_apps",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/apps",
      "text": "Add app access restrictions",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/apps",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#add-app-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_branches_branch_protection_restrictions_apps": {
      "provider_intent": "put_repos_owner_repo_branches_branch_protection_restrictions_apps",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/apps",
      "text": "Set app access restrictions",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/apps",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#set-app-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_restrictions_apps": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_restrictions_apps",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/apps",
      "text": "Remove app access restrictions",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/apps",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#remove-app-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_restrictions_teams": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_restrictions_teams",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/teams",
      "text": "Get teams with access to the protected branch",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/teams",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#list-teams-with-access-to-the-protected-branch"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_branches_branch_protection_restrictions_teams": {
      "provider_intent": "post_repos_owner_repo_branches_branch_protection_restrictions_teams",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/teams",
      "text": "Add team access restrictions",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/teams",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_branches_branch_protection_restrictions_teams": {
      "provider_intent": "put_repos_owner_repo_branches_branch_protection_restrictions_teams",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/teams",
      "text": "Set team access restrictions",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/teams",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_restrictions_teams": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_restrictions_teams",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/teams",
      "text": "Remove team access restrictions",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/teams",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#remove-team-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_branches_branch_protection_restrictions_users": {
      "provider_intent": "get_repos_owner_repo_branches_branch_protection_restrictions_users",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/users",
      "text": "Get users with access to the protected branch",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/users",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#list-users-with-access-to-the-protected-branch"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_branches_branch_protection_restrictions_users": {
      "provider_intent": "post_repos_owner_repo_branches_branch_protection_restrictions_users",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/users",
      "text": "Add user access restrictions",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/users",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_branches_branch_protection_restrictions_users": {
      "provider_intent": "put_repos_owner_repo_branches_branch_protection_restrictions_users",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/users",
      "text": "Set user access restrictions",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/users",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#set-user-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_branches_branch_protection_restrictions_users": {
      "provider_intent": "delete_repos_owner_repo_branches_branch_protection_restrictions_users",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/protection/restrictions/users",
      "text": "Remove user access restrictions",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/protection/restrictions/users",
        "api_ref": "https://docs.github.com/rest/branches/branch-protection#remove-user-access-restrictions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_branches_branch_rename": {
      "provider_intent": "post_repos_owner_repo_branches_branch_rename",
      "provider_alias_intent": "/repos/owner/repo/branches/branch/rename",
      "text": "Rename a branch",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "new_name": {
          "type": "string",
          "text": "The new name of the branch"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Renames a branch in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/rename",
        "alias_endpoint": "/github/repos/owner/repo/branches/branch/rename",
        "api_ref": "https://docs.github.com/rest/branches/branches#rename-a-branch"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_codeowners_errors": {
      "provider_intent": "get_repos_owner_repo_codeowners_errors",
      "provider_alias_intent": "/repos/owner/repo/codeowners/errors",
      "text": "List CODEOWNERS errors",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "A branch tag or commit name used to determine which version of the CODEOWNERS file to use"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List any syntax errors that are detected in the CODEOWNERS\nfile.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/codeowners/errors",
        "alias_endpoint": "/github/repos/owner/repo/codeowners/errors",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-codeowners-errors"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_collaborators": {
      "provider_intent": "get_repos_owner_repo_collaborators",
      "provider_alias_intent": "/repos/owner/repo/collaborators",
      "text": "List repository collaborators",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "affiliation": {
          "type": "string",
          "text": "Filter collaborators returned by their affiliation"
        },
        "permission": {
          "type": "string",
          "text": "Filter collaborators by the permissions they have on the repository"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "For organization-owned repositories the list of collaborators includes outside collaborators organization members that are direct collaborators organization members with access through team memberships organization members with access through default organization permissions and organization owners.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/collaborators",
        "alias_endpoint": "/github/repos/owner/repo/collaborators",
        "api_ref": "https://docs.github.com/rest/collaborators/collaborators#list-repository-collaborators"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_collaborators_username": {
      "provider_intent": "get_repos_owner_repo_collaborators_username",
      "provider_alias_intent": "/repos/owner/repo/collaborators/username",
      "text": "Check if a user is a repository collaborator",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "For organization-owned repositories the list of collaborators includes outside collaborators organization members that are direct collaborators organization members with access through team memberships organization members with access through default organization permissions and organization owners.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/collaborators/{username}",
        "alias_endpoint": "/github/repos/owner/repo/collaborators/username",
        "api_ref": "https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_collaborators_username": {
      "provider_intent": "put_repos_owner_repo_collaborators_username",
      "provider_alias_intent": "/repos/owner/repo/collaborators/username",
      "text": "Add a repository collaborator",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "permission": {
          "type": "string",
          "text": "The permission to grant the collaborator"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This endpoint triggers [notifications](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/collaborators/{username}",
        "alias_endpoint": "/github/repos/owner/repo/collaborators/username",
        "api_ref": "https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_collaborators_username": {
      "provider_intent": "delete_repos_owner_repo_collaborators_username",
      "provider_alias_intent": "/repos/owner/repo/collaborators/username",
      "text": "Remove a repository collaborator",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/collaborators/{username}",
        "alias_endpoint": "/github/repos/owner/repo/collaborators/username",
        "api_ref": "https://docs.github.com/rest/collaborators/collaborators#remove-a-repository-collaborator"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_collaborators_username_permission": {
      "provider_intent": "get_repos_owner_repo_collaborators_username_permission",
      "provider_alias_intent": "/repos/owner/repo/collaborators/username/permission",
      "text": "Get repository permissions for a user",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Checks the repository permission of a collaborator.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/collaborators/{username}/permission",
        "alias_endpoint": "/github/repos/owner/repo/collaborators/username/permission",
        "api_ref": "https://docs.github.com/rest/collaborators/collaborators#get-repository-permissions-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_comments": {
      "provider_intent": "get_repos_owner_repo_comments",
      "provider_alias_intent": "/repos/owner/repo/comments",
      "text": "List commit comments for a repository",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Commit Comments use [these custom media types](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/comments",
        "alias_endpoint": "/github/repos/owner/repo/comments",
        "api_ref": "https://docs.github.com/rest/commits/comments#list-commit-comments-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_comments_comment_id": {
      "provider_intent": "get_repos_owner_repo_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/comments/comment_id",
      "text": "Get a commit comment",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/commits/comments#get-a-commit-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_comments_comment_id": {
      "provider_intent": "patch_repos_owner_repo_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/comments/comment_id",
      "text": "Update a commit comment",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The contents of the comment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/commits/comments#update-a-commit-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_comments_comment_id": {
      "provider_intent": "delete_repos_owner_repo_comments_comment_id",
      "provider_alias_intent": "/repos/owner/repo/comments/comment_id",
      "text": "Delete a commit comment",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "comment_id": {
          "type": "integer",
          "text": "The unique identifier of the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}",
        "alias_endpoint": "/github/repos/owner/repo/comments/comment_id",
        "api_ref": "https://docs.github.com/rest/commits/comments#delete-a-commit-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits": {
      "provider_intent": "get_repos_owner_repo_commits",
      "provider_alias_intent": "/repos/owner/repo/commits",
      "text": "List commits",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sha": {
          "type": "string",
          "text": "SHA or branch to start listing commits from"
        },
        "path": {
          "type": "string",
          "text": "Only commits containing this file path will be returned"
        },
        "author": {
          "type": "string",
          "text": "GitHub username or email address to use to filter by commit author"
        },
        "committer": {
          "type": "string",
          "text": "GitHub username or email address to use to filter by commit committer"
        },
        "since": {
          "type": "string",
          "text": "Only show notifications updated after the given time"
        },
        "until": {
          "type": "string",
          "text": "Only commits before this date will be returned"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits",
        "alias_endpoint": "/github/repos/owner/repo/commits",
        "api_ref": "https://docs.github.com/rest/commits/commits#list-commits"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits_commit_sha_branches-where-head": {
      "provider_intent": "get_repos_owner_repo_commits_commit_sha_branches-where-head",
      "provider_alias_intent": "/repos/owner/repo/commits/commit_sha/branches-where-head",
      "text": "List branches for HEAD commit",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations and in public and private repositories with GitHub Pro GitHub Team GitHub Enterprise Cloud and GitHub Enterprise Server.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
        "alias_endpoint": "/github/repos/owner/repo/commits/commit_sha/branches-where-head",
        "api_ref": "https://docs.github.com/rest/commits/commits#list-branches-for-head-commit"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits_commit_sha_comments": {
      "provider_intent": "get_repos_owner_repo_commits_commit_sha_comments",
      "provider_alias_intent": "/repos/owner/repo/commits/commit_sha/comments",
      "text": "List commit comments",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Use the `:commit_sha` to specify the commit that will have its comments listed.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/comments",
        "alias_endpoint": "/github/repos/owner/repo/commits/commit_sha/comments",
        "api_ref": "https://docs.github.com/rest/commits/comments#list-commit-comments"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_commits_commit_sha_comments": {
      "provider_intent": "post_repos_owner_repo_commits_commit_sha_comments",
      "provider_alias_intent": "/repos/owner/repo/commits/commit_sha/comments",
      "text": "Create a commit comment",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The contents of the comment"
        },
        "path": {
          "type": "string",
          "text": "Relative path of the file to comment on"
        },
        "position": {
          "type": "integer",
          "text": "Line index in the diff to comment on"
        },
        "line": {
          "type": "integer",
          "text": "**Deprecated**"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a comment for a commit using its `:commit_sha`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/comments",
        "alias_endpoint": "/github/repos/owner/repo/commits/commit_sha/comments",
        "api_ref": "https://docs.github.com/rest/commits/comments#create-a-commit-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits_commit_sha_pulls": {
      "provider_intent": "get_repos_owner_repo_commits_commit_sha_pulls",
      "provider_alias_intent": "/repos/owner/repo/commits/commit_sha/pulls",
      "text": "List pull requests associated with a commit",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "commit_sha": {
          "type": "string",
          "text": "The SHA of the commit",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the merged pull request that introduced the commit to the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
        "alias_endpoint": "/github/repos/owner/repo/commits/commit_sha/pulls",
        "api_ref": "https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits_ref": {
      "provider_intent": "get_repos_owner_repo_commits_ref",
      "provider_alias_intent": "/repos/owner/repo/commits/ref",
      "text": "Get a commit",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns the contents of a single commit reference.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{ref}",
        "alias_endpoint": "/github/repos/owner/repo/commits/ref",
        "api_ref": "https://docs.github.com/rest/commits/commits#get-a-commit"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits_ref_status": {
      "provider_intent": "get_repos_owner_repo_commits_ref_status",
      "provider_alias_intent": "/repos/owner/repo/commits/ref/status",
      "text": "Get the combined status for a specific reference",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{ref}/status",
        "alias_endpoint": "/github/repos/owner/repo/commits/ref/status",
        "api_ref": "https://docs.github.com/rest/commits/statuses#get-the-combined-status-for-a-specific-reference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_commits_ref_statuses": {
      "provider_intent": "get_repos_owner_repo_commits_ref_statuses",
      "provider_alias_intent": "/repos/owner/repo/commits/ref/statuses",
      "text": "List commit statuses for a reference",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "ref parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with pull access in a repository can view commit statuses for a given ref.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/commits/{ref}/statuses",
        "alias_endpoint": "/github/repos/owner/repo/commits/ref/statuses",
        "api_ref": "https://docs.github.com/rest/commits/statuses#list-commit-statuses-for-a-reference"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_community_profile": {
      "provider_intent": "get_repos_owner_repo_community_profile",
      "provider_alias_intent": "/repos/owner/repo/community/profile",
      "text": "Get community profile metrics",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns all community profile metrics for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/community/profile",
        "alias_endpoint": "/github/repos/owner/repo/community/profile",
        "api_ref": "https://docs.github.com/rest/metrics/community#get-community-profile-metrics"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_compare_basehead": {
      "provider_intent": "get_repos_owner_repo_compare_basehead",
      "provider_alias_intent": "/repos/owner/repo/compare/basehead",
      "text": "Compare two commits",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "basehead": {
          "type": "string",
          "text": "The base branch and head branch to compare",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "basehead": {
          "type": "string",
          "text": "The base branch and head branch to compare",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Compares two commits against one another.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/compare/{basehead}",
        "alias_endpoint": "/github/repos/owner/repo/compare/basehead",
        "api_ref": "https://docs.github.com/rest/commits/commits#compare-two-commits"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_contents_path": {
      "provider_intent": "get_repos_owner_repo_contents_path",
      "provider_alias_intent": "/repos/owner/repo/contents/path",
      "text": "Get repository content",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "path": {
          "type": "string",
          "text": "path parameter",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "The name of the commit/branch/tag"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "path": {
          "type": "string",
          "text": "path parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the contents of a file or directory in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/contents/{path}",
        "alias_endpoint": "/github/repos/owner/repo/contents/path",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-repository-content"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_contents_path": {
      "provider_intent": "put_repos_owner_repo_contents_path",
      "provider_alias_intent": "/repos/owner/repo/contents/path",
      "text": "Create or update file contents",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "path": {
          "type": "string",
          "text": "path parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "message": {
          "type": "string",
          "text": "The commit message"
        },
        "content": {
          "type": "string",
          "text": "The new file content using Base64 encoding"
        },
        "sha": {
          "type": "string",
          "text": "**Required if you are updating a file**"
        },
        "branch": {
          "type": "string",
          "text": "The branch name"
        },
        "committer": {
          "type": "object",
          "text": "The person that committed the file"
        },
        "author": {
          "type": "object",
          "text": "The author of the file"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "path": {
          "type": "string",
          "text": "path parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new file or replaces an existing file in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/contents/{path}",
        "alias_endpoint": "/github/repos/owner/repo/contents/path",
        "api_ref": "https://docs.github.com/rest/reference/repos#create-or-update-file-contents"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_contents_path": {
      "provider_intent": "delete_repos_owner_repo_contents_path",
      "provider_alias_intent": "/repos/owner/repo/contents/path",
      "text": "Delete a file",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "path": {
          "type": "string",
          "text": "path parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "message": {
          "type": "string",
          "text": "The commit message"
        },
        "sha": {
          "type": "string",
          "text": "The blob SHA of the file being deleted"
        },
        "branch": {
          "type": "string",
          "text": "The branch name"
        },
        "committer": {
          "type": "object",
          "text": "object containing information about the committer"
        },
        "author": {
          "type": "object",
          "text": "object containing information about the author"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "path": {
          "type": "string",
          "text": "path parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a file in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/contents/{path}",
        "alias_endpoint": "/github/repos/owner/repo/contents/path",
        "api_ref": "https://docs.github.com/rest/reference/repos#delete-a-file"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_contributors": {
      "provider_intent": "get_repos_owner_repo_contributors",
      "provider_alias_intent": "/repos/owner/repo/contributors",
      "text": "List repository contributors",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "anon": {
          "type": "string",
          "text": "Set to `1` or `true` to include anonymous contributors in results"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/contributors",
        "alias_endpoint": "/github/repos/owner/repo/contributors",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-repository-contributors"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_deployments": {
      "provider_intent": "get_repos_owner_repo_deployments",
      "provider_alias_intent": "/repos/owner/repo/deployments",
      "text": "List deployments",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sha": {
          "type": "string",
          "text": "The SHA recorded at creation time"
        },
        "ref": {
          "type": "string",
          "text": "The name of the ref"
        },
        "task": {
          "type": "string",
          "text": "The name of the task for the deployment (e"
        },
        "environment": {
          "type": "string",
          "text": "The name of the environment that was deployed to (e"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Simple filtering of deployments is available via query parameters:.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/deployments",
        "alias_endpoint": "/github/repos/owner/repo/deployments",
        "api_ref": "https://docs.github.com/rest/deployments/deployments#list-deployments"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_deployments": {
      "provider_intent": "post_repos_owner_repo_deployments",
      "provider_alias_intent": "/repos/owner/repo/deployments",
      "text": "Create a deployment",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "ref": {
          "type": "string",
          "text": "The ref to deploy"
        },
        "task": {
          "type": "string",
          "text": "Specifies a task to execute (e"
        },
        "auto_merge": {
          "type": "boolean",
          "text": "Attempts to automatically merge the default branch into the requested ref if it's behind the default branch",
          "enum": [
            true,
            false
          ]
        },
        "required_contexts": {
          "type": "array",
          "text": "The [status](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "payload": {
          "type": "undefined"
        },
        "environment": {
          "type": "string",
          "text": "Name for the target deployment environment (e"
        },
        "description": {
          "type": "string",
          "text": "Short description of the deployment"
        },
        "transient_environment": {
          "type": "boolean",
          "text": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future",
          "enum": [
            true,
            false
          ]
        },
        "production_environment": {
          "type": "boolean",
          "text": "Specifies if the given environment is one that end-users directly interact with",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deployments offer a few configurable parameters with certain defaults.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/deployments",
        "alias_endpoint": "/github/repos/owner/repo/deployments",
        "api_ref": "https://docs.github.com/rest/deployments/deployments#create-a-deployment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_deployments_deployment_id": {
      "provider_intent": "get_repos_owner_repo_deployments_deployment_id",
      "provider_alias_intent": "/repos/owner/repo/deployments/deployment_id",
      "text": "Get a deployment",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}",
        "alias_endpoint": "/github/repos/owner/repo/deployments/deployment_id",
        "api_ref": "https://docs.github.com/rest/deployments/deployments#get-a-deployment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_deployments_deployment_id": {
      "provider_intent": "delete_repos_owner_repo_deployments_deployment_id",
      "provider_alias_intent": "/repos/owner/repo/deployments/deployment_id",
      "text": "Delete a deployment",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "If the repository only has one deployment you can delete the deployment regardless of its status.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}",
        "alias_endpoint": "/github/repos/owner/repo/deployments/deployment_id",
        "api_ref": "https://docs.github.com/rest/deployments/deployments#delete-a-deployment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_deployments_deployment_id_statuses": {
      "provider_intent": "get_repos_owner_repo_deployments_deployment_id_statuses",
      "provider_alias_intent": "/repos/owner/repo/deployments/deployment_id/statuses",
      "text": "List deployment statuses",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with pull access can view deployment statuses for a deployment:.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        "alias_endpoint": "/github/repos/owner/repo/deployments/deployment_id/statuses",
        "api_ref": "https://docs.github.com/rest/deployments/statuses#list-deployment-statuses"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_deployments_deployment_id_statuses": {
      "provider_intent": "post_repos_owner_repo_deployments_deployment_id_statuses",
      "provider_alias_intent": "/repos/owner/repo/deployments/deployment_id/statuses",
      "text": "Create a deployment status",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "state": {
          "type": "string",
          "text": "The state of the status"
        },
        "target_url": {
          "type": "string",
          "text": "The target URL to associate with this status"
        },
        "log_url": {
          "type": "string",
          "text": "The full URL of the deployment's output"
        },
        "description": {
          "type": "string",
          "text": "A short description of the status"
        },
        "environment": {
          "type": "string",
          "text": "Name for the target deployment environment which can be changed when setting a deploy status"
        },
        "environment_url": {
          "type": "string",
          "text": "Sets the URL for accessing your environment"
        },
        "auto_inactive": {
          "type": "boolean",
          "text": "Adds a new `inactive` status to all prior non-transient non-production environment deployments with the same repository and `environment` name as the created status's deployment",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with `push` access can create deployment statuses for a given deployment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        "alias_endpoint": "/github/repos/owner/repo/deployments/deployment_id/statuses",
        "api_ref": "https://docs.github.com/rest/deployments/statuses#create-a-deployment-status"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_deployments_deployment_id_statuses_status_id": {
      "provider_intent": "get_repos_owner_repo_deployments_deployment_id_statuses_status_id",
      "provider_alias_intent": "/repos/owner/repo/deployments/deployment_id/statuses/status_id",
      "text": "Get a deployment status",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        },
        "status_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "deployment_id": {
          "type": "integer",
          "text": "deployment_id parameter",
          "required": true
        },
        "status_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with pull access can view a deployment status for a deployment:.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
        "alias_endpoint": "/github/repos/owner/repo/deployments/deployment_id/statuses/status_id",
        "api_ref": "https://docs.github.com/rest/deployments/statuses#get-a-deployment-status"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_dispatches": {
      "provider_intent": "post_repos_owner_repo_dispatches",
      "provider_alias_intent": "/repos/owner/repo/dispatches",
      "text": "Create a repository dispatch event",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "event_type": {
          "type": "string",
          "text": "A custom webhook event name"
        },
        "client_payload": {
          "type": "object",
          "text": "JSON payload with extra information about the webhook event that your action or workflow may use"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/dispatches",
        "alias_endpoint": "/github/repos/owner/repo/dispatches",
        "api_ref": "https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_environments": {
      "provider_intent": "get_repos_owner_repo_environments",
      "provider_alias_intent": "/repos/owner/repo/environments",
      "text": "List environments",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the environments for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments",
        "alias_endpoint": "/github/repos/owner/repo/environments",
        "api_ref": "https://docs.github.com/rest/deployments/environments#list-environments"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_environments_environment_name": {
      "provider_intent": "get_repos_owner_repo_environments_environment_name",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name",
      "text": "Get an environment",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** To get information about name patterns that branches must match in order to deploy to this environment see \"[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy).",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name",
        "api_ref": "https://docs.github.com/rest/deployments/environments#get-an-environment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_environments_environment_name": {
      "provider_intent": "put_repos_owner_repo_environments_environment_name",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name",
      "text": "Create or update an environment",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "wait_timer": {
          "type": "integer",
          "text": "The amount of time to delay a job after the job is initially triggered"
        },
        "reviewers": {
          "type": "array",
          "text": "The people or teams that may review jobs that reference the environment"
        },
        "deployment_branch_policy": {
          "type": "object",
          "text": "The type of deployment branch policy for this environment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create or update an environment with protection rules such as required reviewers.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name",
        "api_ref": "https://docs.github.com/rest/deployments/environments#create-or-update-an-environment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_environments_environment_name": {
      "provider_intent": "delete_repos_owner_repo_environments_environment_name",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name",
      "text": "Delete an environment",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You must authenticate using an access token with the repo scope to use this endpoint.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name",
        "api_ref": "https://docs.github.com/rest/deployments/environments#delete-an-environment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_environments_environment_name_deployment-branch-policies": {
      "provider_intent": "get_repos_owner_repo_environments_environment_name_deployment-branch-policies",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment-branch-policies",
      "text": "List deployment branch policies",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the deployment branch policies for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment-branch-policies",
        "api_ref": "https://docs.github.com/rest/deployments/branch-policies#list-deployment-branch-policies"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_environments_environment_name_deployment-branch-policies": {
      "provider_intent": "post_repos_owner_repo_environments_environment_name_deployment-branch-policies",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment-branch-policies",
      "text": "Create a deployment branch policy",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name pattern that branches must match in order to deploy to the environment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a deployment branch policy for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment-branch-policies",
        "api_ref": "https://docs.github.com/rest/deployments/branch-policies#create-deployment-branch-policy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_environments_environment_name_deployment-branch-policies_branch_policy_id": {
      "provider_intent": "get_repos_owner_repo_environments_environment_name_deployment-branch-policies_branch_policy_id",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment-branch-policies/branch_policy_id",
      "text": "Get a deployment branch policy",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "branch_policy_id": {
          "type": "integer",
          "text": "The unique identifier of the branch policy",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "branch_policy_id": {
          "type": "integer",
          "text": "The unique identifier of the branch policy",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a deployment branch policy for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment-branch-policies/branch_policy_id",
        "api_ref": "https://docs.github.com/rest/deployments/branch-policies#get-deployment-branch-policy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_environments_environment_name_deployment-branch-policies_branch_policy_id": {
      "provider_intent": "put_repos_owner_repo_environments_environment_name_deployment-branch-policies_branch_policy_id",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment-branch-policies/branch_policy_id",
      "text": "Update a deployment branch policy",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "branch_policy_id": {
          "type": "integer",
          "text": "The unique identifier of the branch policy",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name pattern that branches must match in order to deploy to the environment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "branch_policy_id": {
          "type": "integer",
          "text": "The unique identifier of the branch policy",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates a deployment branch policy for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment-branch-policies/branch_policy_id",
        "api_ref": "https://docs.github.com/rest/deployments/branch-policies#update-deployment-branch-policy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_environments_environment_name_deployment-branch-policies_branch_policy_id": {
      "provider_intent": "delete_repos_owner_repo_environments_environment_name_deployment-branch-policies_branch_policy_id",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment-branch-policies/branch_policy_id",
      "text": "Delete a deployment branch policy",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "branch_policy_id": {
          "type": "integer",
          "text": "The unique identifier of the branch policy",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "branch_policy_id": {
          "type": "integer",
          "text": "The unique identifier of the branch policy",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a deployment branch policy for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment-branch-policies/branch_policy_id",
        "api_ref": "https://docs.github.com/rest/deployments/branch-policies#delete-deployment-branch-policy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_environments_environment_name_deployment_protection_rules": {
      "provider_intent": "get_repos_owner_repo_environments_environment_name_deployment_protection_rules",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment_protection_rules",
      "text": "Get all deployment protection rules for an environment",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets all custom deployment protection rules that are enabled for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment_protection_rules",
        "api_ref": "https://docs.github.com/rest/deployments/protection-rules#get-all-deployment-protection-rules"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_environments_environment_name_deployment_protection_rules": {
      "provider_intent": "post_repos_owner_repo_environments_environment_name_deployment_protection_rules",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment_protection_rules",
      "text": "Create a custom deployment protection rule on an environment",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "integration_id": {
          "type": "integer",
          "text": "The ID of the custom app that will be enabled on the environment"
        }
      },
      "path": {
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enable a custom deployment protection rule for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment_protection_rules",
        "api_ref": "https://docs.github.com/rest/deployments/deployment-protection-rules#create-a-deployment-protection-rule"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_environments_environment_name_deployment_protection_rules_apps": {
      "provider_intent": "get_repos_owner_repo_environments_environment_name_deployment_protection_rules_apps",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment_protection_rules/apps",
      "text": "List custom deployment rule integrations available for an environment",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets all custom deployment protection rule integrations that are available for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment_protection_rules/apps",
        "api_ref": "https://docs.github.com/rest/deployments/protection-rules#list-custom-deployment-rule-integrations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_environments_environment_name_deployment_protection_rules_protection_rule_id": {
      "provider_intent": "get_repos_owner_repo_environments_environment_name_deployment_protection_rules_protection_rule_id",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment_protection_rules/protection_rule_id",
      "text": "Get a custom deployment protection rule",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "protection_rule_id": {
          "type": "integer",
          "text": "The unique identifier of the protection rule",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "protection_rule_id": {
          "type": "integer",
          "text": "The unique identifier of the protection rule",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets an enabled custom deployment protection rule for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment_protection_rules/protection_rule_id",
        "api_ref": "https://docs.github.com/rest/deployments/protection-rules#get-a-deployment-protection-rule"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_environments_environment_name_deployment_protection_rules_protection_rule_id": {
      "provider_intent": "delete_repos_owner_repo_environments_environment_name_deployment_protection_rules_protection_rule_id",
      "provider_alias_intent": "/repos/owner/repo/environments/environment_name/deployment_protection_rules/protection_rule_id",
      "text": "Disable a custom protection rule for an environment",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "protection_rule_id": {
          "type": "integer",
          "text": "The unique identifier of the protection rule",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "environment_name": {
          "type": "string",
          "text": "The name of the environment",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "protection_rule_id": {
          "type": "integer",
          "text": "The unique identifier of the protection rule",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Disables a custom deployment protection rule for an environment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
        "alias_endpoint": "/github/repos/owner/repo/environments/environment_name/deployment_protection_rules/protection_rule_id",
        "api_ref": "https://docs.github.com/rest/deployments/protection-rules#disable-deployment-protection-rule"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_forks": {
      "provider_intent": "get_repos_owner_repo_forks",
      "provider_alias_intent": "/repos/owner/repo/forks",
      "text": "List forks",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "The sort order"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/forks",
        "alias_endpoint": "/github/repos/owner/repo/forks",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-forks"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_forks": {
      "provider_intent": "post_repos_owner_repo_forks",
      "provider_alias_intent": "/repos/owner/repo/forks",
      "text": "Create a fork",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "organization": {
          "type": "string",
          "text": "Optional parameter to specify the organization name if forking into an organization"
        },
        "name": {
          "type": "string",
          "text": "When forking from an existing repository a new name for the fork"
        },
        "default_branch_only": {
          "type": "boolean",
          "text": "When forking from an existing repository fork with only the default branch",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a fork for the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/forks",
        "alias_endpoint": "/github/repos/owner/repo/forks",
        "api_ref": "https://docs.github.com/rest/reference/repos#create-a-fork"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_hooks": {
      "provider_intent": "get_repos_owner_repo_hooks",
      "provider_alias_intent": "/repos/owner/repo/hooks",
      "text": "List repository webhooks",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists webhooks for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks",
        "alias_endpoint": "/github/repos/owner/repo/hooks",
        "api_ref": "https://docs.github.com/rest/webhooks/repos#list-repository-webhooks"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_hooks": {
      "provider_intent": "post_repos_owner_repo_hooks",
      "provider_alias_intent": "/repos/owner/repo/hooks",
      "text": "Create a repository webhook",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "Use `web` to create a webhook"
        },
        "config": {
          "type": "object",
          "text": "Key/value pairs to provide settings for this webhook"
        },
        "events": {
          "type": "array",
          "text": "Determines what [events](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "active": {
          "type": "boolean",
          "text": "Determines if notifications are sent when the webhook is triggered",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Repositories can have multiple webhooks installed.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks",
        "alias_endpoint": "/github/repos/owner/repo/hooks",
        "api_ref": "https://docs.github.com/rest/webhooks/repos#create-a-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_hooks_hook_id": {
      "provider_intent": "get_repos_owner_repo_hooks_hook_id",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id",
      "text": "Get a repository webhook",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a webhook configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id",
        "api_ref": "https://docs.github.com/rest/webhooks/repos#get-a-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_hooks_hook_id": {
      "provider_intent": "patch_repos_owner_repo_hooks_hook_id",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id",
      "text": "Update a repository webhook",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "config": {
          "type": "object",
          "text": "Key/value pairs to provide settings for this webhook"
        },
        "events": {
          "type": "array",
          "text": "Determines what [events](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "add_events": {
          "type": "array",
          "text": "Determines a list of events to be added to the list of events that the Hook triggers for"
        },
        "remove_events": {
          "type": "array",
          "text": "Determines a list of events to be removed from the list of events that the Hook triggers for"
        },
        "active": {
          "type": "boolean",
          "text": "Determines if notifications are sent when the webhook is triggered",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates a webhook configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id",
        "api_ref": "https://docs.github.com/rest/webhooks/repos#update-a-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_hooks_hook_id": {
      "provider_intent": "delete_repos_owner_repo_hooks_hook_id",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id",
      "text": "Delete a repository webhook",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id",
        "api_ref": "https://docs.github.com/rest/webhooks/repos#delete-a-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_hooks_hook_id_config": {
      "provider_intent": "get_repos_owner_repo_hooks_hook_id_config",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id/config",
      "text": "Get a webhook configuration for a repository",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns the webhook configuration for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/config",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id/config",
        "api_ref": "https://docs.github.com/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_hooks_hook_id_config": {
      "provider_intent": "patch_repos_owner_repo_hooks_hook_id_config",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id/config",
      "text": "Update a webhook configuration for a repository",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "url": {
          "type": "string",
          "text": "The URL to which the payloads will be delivered"
        },
        "content_type": {
          "type": "string",
          "text": "The media type used to serialize the payloads"
        },
        "secret": {
          "type": "string",
          "text": "If provided the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "insecure_ssl": {
          "type": "undefined"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates the webhook configuration for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/config",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id/config",
        "api_ref": "https://docs.github.com/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_hooks_hook_id_deliveries": {
      "provider_intent": "get_repos_owner_repo_hooks_hook_id_deliveries",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id/deliveries",
      "text": "List deliveries for a repository webhook",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "cursor": {
          "type": "string",
          "text": "Used for pagination",
          "enum": [
            "the starting delivery from which the page of deliveries is fetched"
          ]
        },
        "redelivery": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a list of webhook deliveries for a webhook configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id/deliveries",
        "api_ref": "https://docs.github.com/rest/webhooks/repo-deliveries#list-deliveries-for-a-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_hooks_hook_id_deliveries_delivery_id": {
      "provider_intent": "get_repos_owner_repo_hooks_hook_id_deliveries_delivery_id",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id/deliveries/delivery_id",
      "text": "Get a delivery for a repository webhook",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a delivery for a webhook configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id/deliveries/delivery_id",
        "api_ref": "https://docs.github.com/rest/webhooks/repo-deliveries#get-a-delivery-for-a-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_hooks_hook_id_deliveries_delivery_id_attempts": {
      "provider_intent": "post_repos_owner_repo_hooks_hook_id_deliveries_delivery_id_attempts",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id/deliveries/delivery_id/attempts",
      "text": "Redeliver a delivery for a repository webhook",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        },
        "delivery_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Redeliver a webhook delivery for a webhook configured in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id/deliveries/delivery_id/attempts",
        "api_ref": "https://docs.github.com/rest/webhooks/repo-deliveries#redeliver-a-delivery-for-a-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_hooks_hook_id_pings": {
      "provider_intent": "post_repos_owner_repo_hooks_hook_id_pings",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id/pings",
      "text": "Ping a repository webhook",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This will trigger a [ping event](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id/pings",
        "api_ref": "https://docs.github.com/rest/webhooks/repos#ping-a-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_hooks_hook_id_tests": {
      "provider_intent": "post_repos_owner_repo_hooks_hook_id_tests",
      "provider_alias_intent": "/repos/owner/repo/hooks/hook_id/tests",
      "text": "Test the push repository webhook",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "hook_id": {
          "type": "integer",
          "text": "The unique identifier of the hook",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests",
        "alias_endpoint": "/github/repos/owner/repo/hooks/hook_id/tests",
        "api_ref": "https://docs.github.com/rest/webhooks/repos#test-the-push-repository-webhook"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_invitations": {
      "provider_intent": "get_repos_owner_repo_invitations",
      "provider_alias_intent": "/repos/owner/repo/invitations",
      "text": "List repository invitations",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "When authenticating as a user with admin rights to a repository this endpoint will list all currently open repository invitations.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/invitations",
        "alias_endpoint": "/github/repos/owner/repo/invitations",
        "api_ref": "https://docs.github.com/rest/collaborators/invitations#list-repository-invitations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_invitations_invitation_id": {
      "provider_intent": "patch_repos_owner_repo_invitations_invitation_id",
      "provider_alias_intent": "/repos/owner/repo/invitations/invitation_id",
      "text": "Update a repository invitation",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "permissions": {
          "type": "string",
          "text": "The permissions that the associated user will have on the repository"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/invitations/{invitation_id}",
        "alias_endpoint": "/github/repos/owner/repo/invitations/invitation_id",
        "api_ref": "https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_invitations_invitation_id": {
      "provider_intent": "delete_repos_owner_repo_invitations_invitation_id",
      "provider_alias_intent": "/repos/owner/repo/invitations/invitation_id",
      "text": "Delete a repository invitation",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/invitations/{invitation_id}",
        "alias_endpoint": "/github/repos/owner/repo/invitations/invitation_id",
        "api_ref": "https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_keys": {
      "provider_intent": "get_repos_owner_repo_keys",
      "provider_alias_intent": "/repos/owner/repo/keys",
      "text": "List deploy keys",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/keys",
        "alias_endpoint": "/github/repos/owner/repo/keys",
        "api_ref": "https://docs.github.com/rest/deploy-keys#list-deploy-keys"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_keys": {
      "provider_intent": "post_repos_owner_repo_keys",
      "provider_alias_intent": "/repos/owner/repo/keys",
      "text": "Create a deploy key",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "A name for the key"
        },
        "key": {
          "type": "string",
          "text": "The contents of the key"
        },
        "read_only": {
          "type": "boolean",
          "text": "If `true` the key will only be able to read repository contents",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can create a read-only deploy key.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/keys",
        "alias_endpoint": "/github/repos/owner/repo/keys",
        "api_ref": "https://docs.github.com/rest/deploy-keys#create-a-deploy-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_keys_key_id": {
      "provider_intent": "get_repos_owner_repo_keys_key_id",
      "provider_alias_intent": "/repos/owner/repo/keys/key_id",
      "text": "Get a deploy key",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "key_id": {
          "type": "integer",
          "text": "The unique identifier of the key",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "key_id": {
          "type": "integer",
          "text": "The unique identifier of the key",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/keys/{key_id}",
        "alias_endpoint": "/github/repos/owner/repo/keys/key_id",
        "api_ref": "https://docs.github.com/rest/deploy-keys#get-a-deploy-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_keys_key_id": {
      "provider_intent": "delete_repos_owner_repo_keys_key_id",
      "provider_alias_intent": "/repos/owner/repo/keys/key_id",
      "text": "Delete a deploy key",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "key_id": {
          "type": "integer",
          "text": "The unique identifier of the key",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "key_id": {
          "type": "integer",
          "text": "The unique identifier of the key",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deploy keys are immutable.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/keys/{key_id}",
        "alias_endpoint": "/github/repos/owner/repo/keys/key_id",
        "api_ref": "https://docs.github.com/rest/deploy-keys#delete-a-deploy-key"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_languages": {
      "provider_intent": "get_repos_owner_repo_languages",
      "provider_alias_intent": "/repos/owner/repo/languages",
      "text": "List repository languages",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists languages for the specified repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/languages",
        "alias_endpoint": "/github/repos/owner/repo/languages",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-repository-languages"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_lfs": {
      "provider_intent": "put_repos_owner_repo_lfs",
      "provider_alias_intent": "/repos/owner/repo/lfs",
      "text": "Enable Git LFS for a repository",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables Git LFS for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/lfs",
        "alias_endpoint": "/github/repos/owner/repo/lfs",
        "api_ref": "https://docs.github.com/rest/reference/repos#enable-git-lfs-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_lfs": {
      "provider_intent": "delete_repos_owner_repo_lfs",
      "provider_alias_intent": "/repos/owner/repo/lfs",
      "text": "Disable Git LFS for a repository",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Disables Git LFS for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/lfs",
        "alias_endpoint": "/github/repos/owner/repo/lfs",
        "api_ref": "https://docs.github.com/rest/reference/repos#disable-git-lfs-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_merge-upstream": {
      "provider_intent": "post_repos_owner_repo_merge-upstream",
      "provider_alias_intent": "/repos/owner/repo/merge-upstream",
      "text": "Sync a fork branch with the upstream repository",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "branch": {
          "type": "string",
          "text": "The name of the branch which should be updated to match upstream"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sync a branch of a forked repository to keep it up-to-date with the upstream repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/merge-upstream",
        "alias_endpoint": "/github/repos/owner/repo/merge-upstream",
        "api_ref": "https://docs.github.com/rest/branches/branches#sync-a-fork-branch-with-the-upstream-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_merges": {
      "provider_intent": "post_repos_owner_repo_merges",
      "provider_alias_intent": "/repos/owner/repo/merges",
      "text": "Merge a branch",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "base": {
          "type": "string",
          "text": "The name of the base branch that the head will be merged into"
        },
        "head": {
          "type": "string",
          "text": "The head to merge"
        },
        "commit_message": {
          "type": "string",
          "text": "Commit message to use for the merge commit"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/merges",
        "alias_endpoint": "/github/repos/owner/repo/merges",
        "api_ref": "https://docs.github.com/rest/branches/branches#merge-a-branch"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pages": {
      "provider_intent": "get_repos_owner_repo_pages",
      "provider_alias_intent": "/repos/owner/repo/pages",
      "text": "Get a GitHub Pages site",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a GitHub Pages site.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages",
        "alias_endpoint": "/github/repos/owner/repo/pages",
        "api_ref": "https://docs.github.com/rest/pages#get-a-github-pages-site"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pages": {
      "provider_intent": "post_repos_owner_repo_pages",
      "provider_alias_intent": "/repos/owner/repo/pages",
      "text": "Create a GitHub Pages site",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "build_type": {
          "type": "string",
          "text": "The process in which the Page will be built"
        },
        "source": {
          "type": "object",
          "text": "The source branch and directory used to publish your Pages site"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Configures a GitHub Pages site.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages",
        "alias_endpoint": "/github/repos/owner/repo/pages",
        "api_ref": "https://docs.github.com/rest/pages#create-a-github-pages-site"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_pages": {
      "provider_intent": "put_repos_owner_repo_pages",
      "provider_alias_intent": "/repos/owner/repo/pages",
      "text": "Update information about a GitHub Pages site",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "cname": {
          "type": "string",
          "text": "Specify a custom domain for the repository"
        },
        "https_enforced": {
          "type": "boolean",
          "text": "Specify whether HTTPS should be enforced for the repository",
          "enum": [
            true,
            false
          ]
        },
        "build_type": {
          "type": "string",
          "text": "The process by which the GitHub Pages site will be built"
        },
        "source": {
          "type": "undefined"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates information for a GitHub Pages site.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages",
        "alias_endpoint": "/github/repos/owner/repo/pages",
        "api_ref": "https://docs.github.com/rest/pages#update-information-about-a-github-pages-site"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_pages": {
      "provider_intent": "delete_repos_owner_repo_pages",
      "provider_alias_intent": "/repos/owner/repo/pages",
      "text": "Delete a GitHub Pages site",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a GitHub Pages site.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages",
        "alias_endpoint": "/github/repos/owner/repo/pages",
        "api_ref": "https://docs.github.com/rest/pages#delete-a-github-pages-site"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pages_builds": {
      "provider_intent": "get_repos_owner_repo_pages_builds",
      "provider_alias_intent": "/repos/owner/repo/pages/builds",
      "text": "List GitHub Pages builds",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists builts of a GitHub Pages site.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages/builds",
        "alias_endpoint": "/github/repos/owner/repo/pages/builds",
        "api_ref": "https://docs.github.com/rest/pages#list-github-pages-builds"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pages_builds": {
      "provider_intent": "post_repos_owner_repo_pages_builds",
      "provider_alias_intent": "/repos/owner/repo/pages/builds",
      "text": "Request a GitHub Pages build",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "You can request that your site be built from the latest revision on the default branch.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages/builds",
        "alias_endpoint": "/github/repos/owner/repo/pages/builds",
        "api_ref": "https://docs.github.com/rest/pages#request-a-github-pages-build"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pages_builds_latest": {
      "provider_intent": "get_repos_owner_repo_pages_builds_latest",
      "provider_alias_intent": "/repos/owner/repo/pages/builds/latest",
      "text": "Get latest Pages build",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about the single most recent build of a GitHub Pages site.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages/builds/latest",
        "alias_endpoint": "/github/repos/owner/repo/pages/builds/latest",
        "api_ref": "https://docs.github.com/rest/pages#get-latest-pages-build"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pages_builds_build_id": {
      "provider_intent": "get_repos_owner_repo_pages_builds_build_id",
      "provider_alias_intent": "/repos/owner/repo/pages/builds/build_id",
      "text": "Get GitHub Pages build",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "build_id": {
          "type": "integer",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "build_id": {
          "type": "integer",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets information about a GitHub Pages build.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages/builds/{build_id}",
        "alias_endpoint": "/github/repos/owner/repo/pages/builds/build_id",
        "api_ref": "https://docs.github.com/rest/pages#get-github-pages-build"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_pages_deployment": {
      "provider_intent": "post_repos_owner_repo_pages_deployment",
      "provider_alias_intent": "/repos/owner/repo/pages/deployment",
      "text": "Create a GitHub Pages deployment",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "artifact_url": {
          "type": "string",
          "text": "The URL of an artifact that contains the"
        },
        "environment": {
          "type": "string",
          "text": "The target environment for this GitHub Pages deployment"
        },
        "pages_build_version": {
          "type": "string",
          "text": "A unique string that represents the version of the build for this deployment"
        },
        "oidc_token": {
          "type": "string",
          "text": "The OIDC token issued by GitHub Actions certifying the origin of the deployment"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a GitHub Pages deployment for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages/deployment",
        "alias_endpoint": "/github/repos/owner/repo/pages/deployment",
        "api_ref": "https://docs.github.com/rest/pages#create-a-github-pages-deployment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_pages_health": {
      "provider_intent": "get_repos_owner_repo_pages_health",
      "provider_alias_intent": "/repos/owner/repo/pages/health",
      "text": "Get a DNS health check for GitHub Pages",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/pages/health",
        "alias_endpoint": "/github/repos/owner/repo/pages/health",
        "api_ref": "https://docs.github.com/rest/pages#get-a-dns-health-check-for-github-pages"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_readme": {
      "provider_intent": "get_repos_owner_repo_readme",
      "provider_alias_intent": "/repos/owner/repo/readme",
      "text": "Get a repository README",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "The name of the commit/branch/tag"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the preferred README for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/readme",
        "alias_endpoint": "/github/repos/owner/repo/readme",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-a-repository-readme"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_readme_dir": {
      "provider_intent": "get_repos_owner_repo_readme_dir",
      "provider_alias_intent": "/repos/owner/repo/readme/dir",
      "text": "Get a repository README for a directory",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "dir": {
          "type": "string",
          "text": "The alternate path to look for a README file",
          "required": true
        },
        "ref": {
          "type": "string",
          "text": "The name of the commit/branch/tag"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "dir": {
          "type": "string",
          "text": "The alternate path to look for a README file",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets the README from a repository directory.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/readme/{dir}",
        "alias_endpoint": "/github/repos/owner/repo/readme/dir",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-a-repository-directory-readme"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_releases": {
      "provider_intent": "get_repos_owner_repo_releases",
      "provider_alias_intent": "/repos/owner/repo/releases",
      "text": "List releases",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This returns a list of releases which does not include regular Git tags that have not been associated with a release.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases",
        "alias_endpoint": "/github/repos/owner/repo/releases",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-releases"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_releases": {
      "provider_intent": "post_repos_owner_repo_releases",
      "provider_alias_intent": "/repos/owner/repo/releases",
      "text": "Create a release",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "tag_name": {
          "type": "string",
          "text": "The name of the tag"
        },
        "target_commitish": {
          "type": "string",
          "text": "Specifies the commitish value that determines where the Git tag is created from"
        },
        "name": {
          "type": "string",
          "text": "The name of the release"
        },
        "body": {
          "type": "string",
          "text": "Text describing the contents of the tag"
        },
        "draft": {
          "type": "boolean",
          "text": "`true` to create a draft (unpublished) release `false` to create a published one",
          "enum": [
            true,
            false
          ]
        },
        "prerelease": {
          "type": "boolean",
          "text": "`true` to identify the release as a prerelease",
          "enum": [
            true,
            false
          ]
        },
        "discussion_category_name": {
          "type": "string",
          "text": "If specified a discussion of the specified category is created and linked to the release"
        },
        "generate_release_notes": {
          "type": "boolean",
          "text": "Whether to automatically generate the name and body for this release",
          "enum": [
            true,
            false
          ]
        },
        "make_latest": {
          "type": "string",
          "text": "Specifies whether this release should be set as the latest release for the repository"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with push access to the repository can create a release.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases",
        "alias_endpoint": "/github/repos/owner/repo/releases",
        "api_ref": "https://docs.github.com/rest/releases/releases#create-a-release"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_releases_assets_asset_id": {
      "provider_intent": "get_repos_owner_repo_releases_assets_asset_id",
      "provider_alias_intent": "/repos/owner/repo/releases/assets/asset_id",
      "text": "Get a release asset",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "asset_id": {
          "type": "integer",
          "text": "The unique identifier of the asset",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "asset_id": {
          "type": "integer",
          "text": "The unique identifier of the asset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "To download the asset's binary content set the `Accept` header of the request to [`application/octet-stream`](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "alias_endpoint": "/github/repos/owner/repo/releases/assets/asset_id",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-a-release-asset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_releases_assets_asset_id": {
      "provider_intent": "patch_repos_owner_repo_releases_assets_asset_id",
      "provider_alias_intent": "/repos/owner/repo/releases/assets/asset_id",
      "text": "Update a release asset",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "asset_id": {
          "type": "integer",
          "text": "The unique identifier of the asset",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The file name of the asset"
        },
        "label": {
          "type": "string",
          "text": "An alternate short description of the asset"
        },
        "state": {
          "type": "string"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "asset_id": {
          "type": "integer",
          "text": "The unique identifier of the asset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with push access to the repository can edit a release asset.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "alias_endpoint": "/github/repos/owner/repo/releases/assets/asset_id",
        "api_ref": "https://docs.github.com/rest/reference/repos#update-a-release-asset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_releases_assets_asset_id": {
      "provider_intent": "delete_repos_owner_repo_releases_assets_asset_id",
      "provider_alias_intent": "/repos/owner/repo/releases/assets/asset_id",
      "text": "Delete a release asset",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "asset_id": {
          "type": "integer",
          "text": "The unique identifier of the asset",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "asset_id": {
          "type": "integer",
          "text": "The unique identifier of the asset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "alias_endpoint": "/github/repos/owner/repo/releases/assets/asset_id",
        "api_ref": "https://docs.github.com/rest/reference/repos#delete-a-release-asset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_releases_generate-notes": {
      "provider_intent": "post_repos_owner_repo_releases_generate-notes",
      "provider_alias_intent": "/repos/owner/repo/releases/generate-notes",
      "text": "Generate release notes content for a release",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "tag_name": {
          "type": "string",
          "text": "The tag name for the release"
        },
        "target_commitish": {
          "type": "string",
          "text": "Specifies the commitish value that will be the target for the release's tag"
        },
        "previous_tag_name": {
          "type": "string",
          "text": "The name of the previous tag to use as the starting point for the release notes"
        },
        "configuration_file_path": {
          "type": "string",
          "text": "Specifies a path to a file in the repository containing configuration settings used for generating the release notes"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Generate a name and body describing a [release](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/generate-notes",
        "alias_endpoint": "/github/repos/owner/repo/releases/generate-notes",
        "api_ref": "https://docs.github.com/rest/reference/repos#generate-release-notes"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_releases_latest": {
      "provider_intent": "get_repos_owner_repo_releases_latest",
      "provider_alias_intent": "/repos/owner/repo/releases/latest",
      "text": "Get the latest release",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "View the latest published full release for the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/latest",
        "alias_endpoint": "/github/repos/owner/repo/releases/latest",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-the-latest-release"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_releases_tags_tag": {
      "provider_intent": "get_repos_owner_repo_releases_tags_tag",
      "provider_alias_intent": "/repos/owner/repo/releases/tags/tag",
      "text": "Get a release by tag name",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tag": {
          "type": "string",
          "text": "tag parameter",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tag": {
          "type": "string",
          "text": "tag parameter",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a published release with the specified tag.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/tags/{tag}",
        "alias_endpoint": "/github/repos/owner/repo/releases/tags/tag",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_releases_release_id": {
      "provider_intent": "get_repos_owner_repo_releases_release_id",
      "provider_alias_intent": "/repos/owner/repo/releases/release_id",
      "text": "Get a release",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/{release_id}",
        "alias_endpoint": "/github/repos/owner/repo/releases/release_id",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-a-release"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_releases_release_id": {
      "provider_intent": "patch_repos_owner_repo_releases_release_id",
      "provider_alias_intent": "/repos/owner/repo/releases/release_id",
      "text": "Update a release",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "tag_name": {
          "type": "string",
          "text": "The name of the tag"
        },
        "target_commitish": {
          "type": "string",
          "text": "Specifies the commitish value that determines where the Git tag is created from"
        },
        "name": {
          "type": "string",
          "text": "The name of the release"
        },
        "body": {
          "type": "string",
          "text": "Text describing the contents of the tag"
        },
        "draft": {
          "type": "boolean",
          "text": "`true` makes the release a draft and `false` publishes the release",
          "enum": [
            true,
            false
          ]
        },
        "prerelease": {
          "type": "boolean",
          "text": "`true` to identify the release as a prerelease `false` to identify the release as a full release",
          "enum": [
            true,
            false
          ]
        },
        "make_latest": {
          "type": "string",
          "text": "Specifies whether this release should be set as the latest release for the repository"
        },
        "discussion_category_name": {
          "type": "string",
          "text": "If specified a discussion of the specified category is created and linked to the release"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with push access to the repository can edit a release.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/{release_id}",
        "alias_endpoint": "/github/repos/owner/repo/releases/release_id",
        "api_ref": "https://docs.github.com/rest/reference/repos#update-a-release"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_releases_release_id": {
      "provider_intent": "delete_repos_owner_repo_releases_release_id",
      "provider_alias_intent": "/repos/owner/repo/releases/release_id",
      "text": "Delete a release",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with push access to the repository can delete a release.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/{release_id}",
        "alias_endpoint": "/github/repos/owner/repo/releases/release_id",
        "api_ref": "https://docs.github.com/rest/reference/repos#delete-a-release"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_releases_release_id_assets": {
      "provider_intent": "get_repos_owner_repo_releases_release_id_assets",
      "provider_alias_intent": "/repos/owner/repo/releases/release_id/assets",
      "text": "List release assets",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/assets",
        "alias_endpoint": "/github/repos/owner/repo/releases/release_id/assets",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-release-assets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_releases_release_id_assets": {
      "provider_intent": "post_repos_owner_repo_releases_release_id_assets",
      "provider_alias_intent": "/repos/owner/repo/releases/release_id/assets",
      "text": "Upload a release asset",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        },
        "label": {
          "type": "string"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "release_id": {
          "type": "integer",
          "text": "The unique identifier of the release",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This endpoint makes use of [a Hypermedia relation](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/assets",
        "alias_endpoint": "/github/repos/owner/repo/releases/release_id/assets",
        "api_ref": "https://docs.github.com/rest/reference/repos#upload-a-release-asset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_rules_branches_branch": {
      "provider_intent": "get_repos_owner_repo_rules_branches_branch",
      "provider_alias_intent": "/repos/owner/repo/rules/branches/branch",
      "text": "Get rules for a branch",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "branch": {
          "type": "string",
          "text": "The name of the branch",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns all rules that apply to the specified branch.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/rules/branches/{branch}",
        "alias_endpoint": "/github/repos/owner/repo/rules/branches/branch",
        "api_ref": "https://docs.github.com/rest/repos/rules#get-rules-for-a-branch"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_rulesets": {
      "provider_intent": "get_repos_owner_repo_rulesets",
      "provider_alias_intent": "/repos/owner/repo/rulesets",
      "text": "Get all repository rulesets",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "includes_parents": {
          "type": "boolean",
          "text": "Include rulesets configured at higher levels that apply to this repository",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get all the rulesets for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/rulesets",
        "alias_endpoint": "/github/repos/owner/repo/rulesets",
        "api_ref": "https://docs.github.com/rest/repos/rules#get-repository-rulesets"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_rulesets": {
      "provider_intent": "post_repos_owner_repo_rulesets",
      "provider_alias_intent": "/repos/owner/repo/rulesets",
      "text": "Create a repository ruleset",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the ruleset"
        },
        "target": {
          "type": "string",
          "text": "The target of the ruleset"
        },
        "enforcement": {
          "type": "string",
          "text": "The enforcement level of the ruleset"
        },
        "bypass_mode": {
          "type": "string",
          "text": "The permission level required to bypass this ruleset"
        },
        "bypass_actors": {
          "type": "array",
          "text": "The actors that can bypass the rules in this ruleset"
        },
        "conditions": {
          "type": "object",
          "text": "Parameters for a repository ruleset ref name condition"
        },
        "rules": {
          "type": "array",
          "text": "An array of rules within the ruleset"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Create a ruleset for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/rulesets",
        "alias_endpoint": "/github/repos/owner/repo/rulesets",
        "api_ref": "https://docs.github.com/rest/repos/rules#create-repository-ruleset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_rulesets_ruleset_id": {
      "provider_intent": "get_repos_owner_repo_rulesets_ruleset_id",
      "provider_alias_intent": "/repos/owner/repo/rulesets/ruleset_id",
      "text": "Get a repository ruleset",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        },
        "includes_parents": {
          "type": "boolean",
          "text": "Include rulesets configured at higher levels that apply to this repository",
          "enum": [
            true,
            false
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a ruleset for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        "alias_endpoint": "/github/repos/owner/repo/rulesets/ruleset_id",
        "api_ref": "https://docs.github.com/rest/repos/rules#get-repository-ruleset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_rulesets_ruleset_id": {
      "provider_intent": "put_repos_owner_repo_rulesets_ruleset_id",
      "provider_alias_intent": "/repos/owner/repo/rulesets/ruleset_id",
      "text": "Update a repository ruleset",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the ruleset"
        },
        "target": {
          "type": "string",
          "text": "The target of the ruleset"
        },
        "enforcement": {
          "type": "string",
          "text": "The enforcement level of the ruleset"
        },
        "bypass_mode": {
          "type": "string",
          "text": "The permission level required to bypass this ruleset"
        },
        "bypass_actors": {
          "type": "array",
          "text": "The actors that can bypass the rules in this ruleset"
        },
        "conditions": {
          "type": "object",
          "text": "Parameters for a repository ruleset ref name condition"
        },
        "rules": {
          "type": "array",
          "text": "An array of rules within the ruleset"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update a ruleset for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        "alias_endpoint": "/github/repos/owner/repo/rulesets/ruleset_id",
        "api_ref": "https://docs.github.com/rest/repos/rules#update-repository-ruleset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_rulesets_ruleset_id": {
      "provider_intent": "delete_repos_owner_repo_rulesets_ruleset_id",
      "provider_alias_intent": "/repos/owner/repo/rulesets/ruleset_id",
      "text": "Delete a repository ruleset",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ruleset_id": {
          "type": "integer",
          "text": "The ID of the ruleset",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Delete a ruleset for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        "alias_endpoint": "/github/repos/owner/repo/rulesets/ruleset_id",
        "api_ref": "https://docs.github.com/rest/repos/rules#delete-repository-ruleset"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_stats_code_frequency": {
      "provider_intent": "get_repos_owner_repo_stats_code_frequency",
      "provider_alias_intent": "/repos/owner/repo/stats/code_frequency",
      "text": "Get the weekly commit activity",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/stats/code_frequency",
        "alias_endpoint": "/github/repos/owner/repo/stats/code_frequency",
        "api_ref": "https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_stats_commit_activity": {
      "provider_intent": "get_repos_owner_repo_stats_commit_activity",
      "provider_alias_intent": "/repos/owner/repo/stats/commit_activity",
      "text": "Get the last year of commit activity",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns the last year of commit activity grouped by week.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/stats/commit_activity",
        "alias_endpoint": "/github/repos/owner/repo/stats/commit_activity",
        "api_ref": "https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_stats_contributors": {
      "provider_intent": "get_repos_owner_repo_stats_contributors",
      "provider_alias_intent": "/repos/owner/repo/stats/contributors",
      "text": "Get all contributor commit activity",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "\nReturns the `total` number of commits authored by the contributor.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/stats/contributors",
        "alias_endpoint": "/github/repos/owner/repo/stats/contributors",
        "api_ref": "https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_stats_participation": {
      "provider_intent": "get_repos_owner_repo_stats_participation",
      "provider_alias_intent": "/repos/owner/repo/stats/participation",
      "text": "Get the weekly commit count",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Returns the total commit counts for the `owner` and total commit counts in `all`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/stats/participation",
        "alias_endpoint": "/github/repos/owner/repo/stats/participation",
        "api_ref": "https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-count"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_stats_punch_card": {
      "provider_intent": "get_repos_owner_repo_stats_punch_card",
      "provider_alias_intent": "/repos/owner/repo/stats/punch_card",
      "text": "Get the hourly commit count for each day",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Each array contains the day number hour number and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example `[2 14 25]` indicates that there were 25 total commits during the 2:00pm hour on Tuesdays.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/stats/punch_card",
        "alias_endpoint": "/github/repos/owner/repo/stats/punch_card",
        "api_ref": "https://docs.github.com/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_statuses_sha": {
      "provider_intent": "post_repos_owner_repo_statuses_sha",
      "provider_alias_intent": "/repos/owner/repo/statuses/sha",
      "text": "Create a commit status",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sha": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "state": {
          "type": "string",
          "text": "The state of the status"
        },
        "target_url": {
          "type": "string",
          "text": "The target URL to associate with this status"
        },
        "description": {
          "type": "string",
          "text": "A short description of the status"
        },
        "context": {
          "type": "string",
          "text": "A string label to differentiate this status from the status of other systems"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "sha": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Users with push access in a repository can create commit statuses for a given SHA.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/statuses/{sha}",
        "alias_endpoint": "/github/repos/owner/repo/statuses/sha",
        "api_ref": "https://docs.github.com/rest/commits/statuses#create-a-commit-status"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_tags": {
      "provider_intent": "get_repos_owner_repo_tags",
      "provider_alias_intent": "/repos/owner/repo/tags",
      "text": "List repository tags",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/tags",
        "alias_endpoint": "/github/repos/owner/repo/tags",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-repository-tags"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_tags_protection": {
      "provider_intent": "get_repos_owner_repo_tags_protection",
      "provider_alias_intent": "/repos/owner/repo/tags/protection",
      "text": "List tag protection states for a repository",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This returns the tag protection states of a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/tags/protection",
        "alias_endpoint": "/github/repos/owner/repo/tags/protection",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-tag-protection-state-of-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_tags_protection": {
      "provider_intent": "post_repos_owner_repo_tags_protection",
      "provider_alias_intent": "/repos/owner/repo/tags/protection",
      "text": "Create a tag protection state for a repository",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "pattern": {
          "type": "string",
          "text": "An optional glob pattern to match against when enforcing tag protection"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This creates a tag protection state for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/tags/protection",
        "alias_endpoint": "/github/repos/owner/repo/tags/protection",
        "api_ref": "https://docs.github.com/rest/reference/repos#create-tag-protection-state-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_tags_protection_tag_protection_id": {
      "provider_intent": "delete_repos_owner_repo_tags_protection_tag_protection_id",
      "provider_alias_intent": "/repos/owner/repo/tags/protection/tag_protection_id",
      "text": "Delete a tag protection state for a repository",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tag_protection_id": {
          "type": "integer",
          "text": "The unique identifier of the tag protection",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "tag_protection_id": {
          "type": "integer",
          "text": "The unique identifier of the tag protection",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This deletes a tag protection state for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/tags/protection/{tag_protection_id}",
        "alias_endpoint": "/github/repos/owner/repo/tags/protection/tag_protection_id",
        "api_ref": "https://docs.github.com/rest/reference/repos#delete-tag-protection-state-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_tarball_ref": {
      "provider_intent": "get_repos_owner_repo_tarball_ref",
      "provider_alias_intent": "/repos/owner/repo/tarball/ref",
      "text": "Download a repository archive (tar)",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a redirect URL to download a tar archive for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/tarball/{ref}",
        "alias_endpoint": "/github/repos/owner/repo/tarball/ref",
        "api_ref": "https://docs.github.com/rest/reference/repos#download-a-repository-archive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_teams": {
      "provider_intent": "get_repos_owner_repo_teams",
      "provider_alias_intent": "/repos/owner/repo/teams",
      "text": "List repository teams",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/teams",
        "alias_endpoint": "/github/repos/owner/repo/teams",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-repository-teams"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_topics": {
      "provider_intent": "get_repos_owner_repo_topics",
      "provider_alias_intent": "/repos/owner/repo/topics",
      "text": "Get all repository topics",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/topics",
        "alias_endpoint": "/github/repos/owner/repo/topics",
        "api_ref": "https://docs.github.com/rest/reference/repos#get-all-repository-topics"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_topics": {
      "provider_intent": "put_repos_owner_repo_topics",
      "provider_alias_intent": "/repos/owner/repo/topics",
      "text": "Replace all repository topics",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "names": {
          "type": "array",
          "text": "An array of topics to add to the repository"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/topics",
        "alias_endpoint": "/github/repos/owner/repo/topics",
        "api_ref": "https://docs.github.com/rest/reference/repos#replace-all-repository-topics"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_traffic_clones": {
      "provider_intent": "get_repos_owner_repo_traffic_clones",
      "provider_alias_intent": "/repos/owner/repo/traffic/clones",
      "text": "Get repository clones",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per": {
          "type": "string",
          "text": "The time frame to display results for"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get the total number of clones and breakdown per day or week for the last 14 days.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/traffic/clones",
        "alias_endpoint": "/github/repos/owner/repo/traffic/clones",
        "api_ref": "https://docs.github.com/rest/metrics/traffic#get-repository-clones"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_traffic_popular_paths": {
      "provider_intent": "get_repos_owner_repo_traffic_popular_paths",
      "provider_alias_intent": "/repos/owner/repo/traffic/popular/paths",
      "text": "Get top referral paths",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get the top 10 popular contents over the last 14 days.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/traffic/popular/paths",
        "alias_endpoint": "/github/repos/owner/repo/traffic/popular/paths",
        "api_ref": "https://docs.github.com/rest/metrics/traffic#get-top-referral-paths"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_traffic_popular_referrers": {
      "provider_intent": "get_repos_owner_repo_traffic_popular_referrers",
      "provider_alias_intent": "/repos/owner/repo/traffic/popular/referrers",
      "text": "Get top referral sources",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get the top 10 referrers over the last 14 days.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/traffic/popular/referrers",
        "alias_endpoint": "/github/repos/owner/repo/traffic/popular/referrers",
        "api_ref": "https://docs.github.com/rest/metrics/traffic#get-top-referral-sources"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_traffic_views": {
      "provider_intent": "get_repos_owner_repo_traffic_views",
      "provider_alias_intent": "/repos/owner/repo/traffic/views",
      "text": "Get page views",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "per": {
          "type": "string",
          "text": "The time frame to display results for"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get the total number of views and breakdown per day or week for the last 14 days.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/traffic/views",
        "alias_endpoint": "/github/repos/owner/repo/traffic/views",
        "api_ref": "https://docs.github.com/rest/metrics/traffic#get-page-views"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_transfer": {
      "provider_intent": "post_repos_owner_repo_transfer",
      "provider_alias_intent": "/repos/owner/repo/transfer",
      "text": "Transfer a repository",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "new_owner": {
          "type": "string",
          "text": "The username or organization name the repository will be transferred to"
        },
        "new_name": {
          "type": "string",
          "text": "The new name to be given to the repository"
        },
        "team_ids": {
          "type": "array",
          "text": "ID of the team or teams to add to the repository"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/transfer",
        "alias_endpoint": "/github/repos/owner/repo/transfer",
        "api_ref": "https://docs.github.com/rest/reference/repos#transfer-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_vulnerability-alerts": {
      "provider_intent": "get_repos_owner_repo_vulnerability-alerts",
      "provider_alias_intent": "/repos/owner/repo/vulnerability-alerts",
      "text": "Check if vulnerability alerts are enabled for a repository",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Shows whether dependency alerts are enabled or disabled for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts",
        "alias_endpoint": "/github/repos/owner/repo/vulnerability-alerts",
        "api_ref": "https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_repos_owner_repo_vulnerability-alerts": {
      "provider_intent": "put_repos_owner_repo_vulnerability-alerts",
      "provider_alias_intent": "/repos/owner/repo/vulnerability-alerts",
      "text": "Enable vulnerability alerts",
      "category": "Repos",
      "method": "PUT",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Enables dependency alerts and the dependency graph for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts",
        "alias_endpoint": "/github/repos/owner/repo/vulnerability-alerts",
        "api_ref": "https://docs.github.com/rest/reference/repos#enable-vulnerability-alerts"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_repos_owner_repo_vulnerability-alerts": {
      "provider_intent": "delete_repos_owner_repo_vulnerability-alerts",
      "provider_alias_intent": "/repos/owner/repo/vulnerability-alerts",
      "text": "Disable vulnerability alerts",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Disables dependency alerts and the dependency graph for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts",
        "alias_endpoint": "/github/repos/owner/repo/vulnerability-alerts",
        "api_ref": "https://docs.github.com/rest/reference/repos#disable-vulnerability-alerts"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_zipball_ref": {
      "provider_intent": "get_repos_owner_repo_zipball_ref",
      "provider_alias_intent": "/repos/owner/repo/zipball/ref",
      "text": "Download a repository archive (zip)",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ref": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a redirect URL to download a zip archive for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/zipball/{ref}",
        "alias_endpoint": "/github/repos/owner/repo/zipball/ref",
        "api_ref": "https://docs.github.com/rest/reference/repos#download-a-repository-archive"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_template_owner_template_repo_generate": {
      "provider_intent": "post_repos_template_owner_template_repo_generate",
      "provider_alias_intent": "/repos/template_owner/template_repo/generate",
      "text": "Create a repository using a template",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {
        "template_owner": {
          "type": "string",
          "required": true
        },
        "template_repo": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "owner": {
          "type": "string",
          "text": "The organization or person who will own the new repository"
        },
        "name": {
          "type": "string",
          "text": "The name of the new repository"
        },
        "description": {
          "type": "string",
          "text": "A short description of the new repository"
        },
        "include_all_branches": {
          "type": "boolean",
          "text": "Set to `true` to include the directory structure and files from all branches in the template repository and not just the default branch",
          "enum": [
            true,
            false
          ]
        },
        "private": {
          "type": "boolean",
          "text": "Either `true` to create a new private repository or `false` to create a new public one",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "template_owner": {
          "type": "string",
          "required": true
        },
        "template_repo": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new repository using a repository template.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{template_owner}/{template_repo}/generate",
        "alias_endpoint": "/github/repos/template_owner/template_repo/generate",
        "api_ref": "https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repositories": {
      "provider_intent": "get_repositories",
      "provider_alias_intent": "/repositories",
      "text": "List public repositories",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "since": {
          "type": "integer",
          "text": "A repository ID"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all public repositories in the order that they were created.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repositories",
        "alias_endpoint": "/github/repositories",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-public-repositories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_repos": {
      "provider_intent": "get_user_repos",
      "provider_alias_intent": "/user/repos",
      "text": "List repositories for the authenticated user",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "visibility": {
          "type": "string",
          "text": "Limit results to repositories with the specified visibility"
        },
        "affiliation": {
          "type": "string",
          "text": "Comma-separated list of values"
        },
        "type": {
          "type": "string",
          "text": "Limit results to repositories of the specified type"
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The order to sort by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "since": {
          "type": "string",
          "text": "Only show repositories updated after the given time"
        },
        "before": {
          "type": "string",
          "text": "Only show repositories updated before the given time"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists repositories that the authenticated user has explicit permission (`:read` `:write` or `:admin`) to access.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/repos",
        "alias_endpoint": "/github/user/repos",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_repos": {
      "provider_intent": "post_user_repos",
      "provider_alias_intent": "/user/repos",
      "text": "Create a repository for the authenticated user",
      "category": "Repos",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the repository"
        },
        "description": {
          "type": "string",
          "text": "A short description of the repository"
        },
        "homepage": {
          "type": "string",
          "text": "A URL with more information about the repository"
        },
        "private": {
          "type": "boolean",
          "text": "Whether the repository is private",
          "enum": [
            true,
            false
          ]
        },
        "has_issues": {
          "type": "boolean",
          "text": "Whether issues are enabled",
          "enum": [
            true,
            false
          ]
        },
        "has_projects": {
          "type": "boolean",
          "text": "Whether projects are enabled",
          "enum": [
            true,
            false
          ]
        },
        "has_wiki": {
          "type": "boolean",
          "text": "Whether the wiki is enabled",
          "enum": [
            true,
            false
          ]
        },
        "has_discussions": {
          "type": "boolean",
          "text": "Whether discussions are enabled",
          "enum": [
            true,
            false
          ]
        },
        "team_id": {
          "type": "integer",
          "text": "The id of the team that will be granted access to this repository"
        },
        "auto_init": {
          "type": "boolean",
          "text": "Whether the repository is initialized with a minimal README",
          "enum": [
            true,
            false
          ]
        },
        "gitignore_template": {
          "type": "string",
          "text": "The desired language or platform to apply to the"
        },
        "license_template": {
          "type": "string",
          "text": "The license keyword of the open source license for this repository"
        },
        "allow_squash_merge": {
          "type": "boolean",
          "text": "Whether to allow squash merges for pull requests",
          "enum": [
            true,
            false
          ]
        },
        "allow_merge_commit": {
          "type": "boolean",
          "text": "Whether to allow merge commits for pull requests",
          "enum": [
            true,
            false
          ]
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "text": "Whether to allow rebase merges for pull requests",
          "enum": [
            true,
            false
          ]
        },
        "allow_auto_merge": {
          "type": "boolean",
          "text": "Whether to allow Auto-merge to be used on pull requests",
          "enum": [
            true,
            false
          ]
        },
        "delete_branch_on_merge": {
          "type": "boolean",
          "text": "Whether to delete head branches when pull requests are merged",
          "enum": [
            true,
            false
          ]
        },
        "squash_merge_commit_title": {
          "type": "string",
          "text": "The default value for a squash merge commit title",
          "enum": [
            "- `PR_TITLE` - default to the pull request's title"
          ]
        },
        "squash_merge_commit_message": {
          "type": "string",
          "text": "The default value for a squash merge commit message",
          "enum": [
            "- `PR_BODY` - default to the pull request's body"
          ]
        },
        "merge_commit_title": {
          "type": "string",
          "text": "The default value for a merge commit title"
        },
        "merge_commit_message": {
          "type": "string",
          "text": "The default value for a merge commit message"
        },
        "has_downloads": {
          "type": "boolean",
          "text": "Whether downloads are enabled",
          "enum": [
            true,
            false
          ]
        },
        "is_template": {
          "type": "boolean",
          "text": "Whether this repository acts as a template that can be used to generate new repositories",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new repository for the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/repos",
        "alias_endpoint": "/github/user/repos",
        "api_ref": "https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_repository_invitations": {
      "provider_intent": "get_user_repository_invitations",
      "provider_alias_intent": "/user/repository_invitations",
      "text": "List repository invitations for the authenticated user",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "When authenticating as a user this endpoint will list all currently open repository invitations for that user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/repository_invitations",
        "alias_endpoint": "/github/user/repository_invitations",
        "api_ref": "https://docs.github.com/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_user_repository_invitations_invitation_id": {
      "provider_intent": "patch_user_repository_invitations_invitation_id",
      "provider_alias_intent": "/user/repository_invitations/invitation_id",
      "text": "Accept a repository invitation",
      "category": "Repos",
      "method": "PATCH",
      "type": "API",
      "params": {
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/repository_invitations/{invitation_id}",
        "alias_endpoint": "/github/user/repository_invitations/invitation_id",
        "api_ref": "https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_repository_invitations_invitation_id": {
      "provider_intent": "delete_user_repository_invitations_invitation_id",
      "provider_alias_intent": "/user/repository_invitations/invitation_id",
      "text": "Decline a repository invitation",
      "category": "Repos",
      "method": "DELETE",
      "type": "API",
      "params": {
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "invitation_id": {
          "type": "integer",
          "text": "The unique identifier of the invitation",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/repository_invitations/{invitation_id}",
        "alias_endpoint": "/github/user/repository_invitations/invitation_id",
        "api_ref": "https://docs.github.com/rest/collaborators/invitations#decline-a-repository-invitation"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_repos": {
      "provider_intent": "get_users_username_repos",
      "provider_alias_intent": "/users/username/repos",
      "text": "List repositories for a user",
      "category": "Repos",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "type": {
          "type": "string",
          "text": "Limit results to repositories of the specified type"
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The order to sort by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists public repositories for the specified user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/repos",
        "alias_endpoint": "/github/users/username/repos",
        "api_ref": "https://docs.github.com/rest/reference/repos#list-repositories-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_search_code": {
      "provider_intent": "get_search_code",
      "provider_alias_intent": "/search/code",
      "text": "Search code",
      "category": "Search",
      "method": "GET",
      "type": "API",
      "params": {
        "q": {
          "type": "string",
          "text": "The query contains one or more search keywords and qualifiers",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "**This field is deprecated"
        },
        "order": {
          "type": "string",
          "text": "**This field is deprecated"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Searches for query terms inside of a file.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/search/code",
        "alias_endpoint": "/github/search/code",
        "api_ref": "https://docs.github.com/rest/reference/search#search-code"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_search_commits": {
      "provider_intent": "get_search_commits",
      "provider_alias_intent": "/search/commits",
      "text": "Search commits",
      "category": "Search",
      "method": "GET",
      "type": "API",
      "params": {
        "q": {
          "type": "string",
          "text": "The query contains one or more search keywords and qualifiers",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "Sorts the results of your query by `author-date` or `committer-date`"
        },
        "order": {
          "type": "string",
          "text": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`)"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Find commits via various criteria on the default branch (usually `main`).",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/search/commits",
        "alias_endpoint": "/github/search/commits",
        "api_ref": "https://docs.github.com/rest/reference/search#search-commits"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_search_issues": {
      "provider_intent": "get_search_issues",
      "provider_alias_intent": "/search/issues",
      "text": "Search issues and pull requests",
      "category": "Search",
      "method": "GET",
      "type": "API",
      "params": {
        "q": {
          "type": "string",
          "text": "The query contains one or more search keywords and qualifiers",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "Sorts the results of your query by the number of `comments` `reactions` `reactions-+1` `reactions--1` `reactions-smile` `reactions-thinking_face` `reactions-heart` `reactions-tada` or `interactions`"
        },
        "order": {
          "type": "string",
          "text": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`)"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Find issues by state and keyword.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/search/issues",
        "alias_endpoint": "/github/search/issues",
        "api_ref": "https://docs.github.com/rest/reference/search#search-issues-and-pull-requests"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_search_labels": {
      "provider_intent": "get_search_labels",
      "provider_alias_intent": "/search/labels",
      "text": "Search labels",
      "category": "Search",
      "method": "GET",
      "type": "API",
      "params": {
        "repository_id": {
          "type": "integer",
          "text": "The id of the repository",
          "required": true
        },
        "q": {
          "type": "string",
          "text": "The search keywords",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "Sorts the results of your query by when the label was `created` or `updated`"
        },
        "order": {
          "type": "string",
          "text": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`)"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Find labels in a repository with names or descriptions that match search keywords.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/search/labels",
        "alias_endpoint": "/github/search/labels",
        "api_ref": "https://docs.github.com/rest/reference/search#search-labels"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_search_repositories": {
      "provider_intent": "get_search_repositories",
      "provider_alias_intent": "/search/repositories",
      "text": "Search repositories",
      "category": "Search",
      "method": "GET",
      "type": "API",
      "params": {
        "q": {
          "type": "string",
          "text": "The query contains one or more search keywords and qualifiers",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "Sorts the results of your query by number of `stars` `forks` or `help-wanted-issues` or how recently the items were `updated`"
        },
        "order": {
          "type": "string",
          "text": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`)"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Find repositories via various criteria.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/search/repositories",
        "alias_endpoint": "/github/search/repositories",
        "api_ref": "https://docs.github.com/rest/reference/search#search-repositories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_search_topics": {
      "provider_intent": "get_search_topics",
      "provider_alias_intent": "/search/topics",
      "text": "Search topics",
      "category": "Search",
      "method": "GET",
      "type": "API",
      "params": {
        "q": {
          "type": "string",
          "text": "The query contains one or more search keywords and qualifiers",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Find topics via various criteria.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/search/topics",
        "alias_endpoint": "/github/search/topics",
        "api_ref": "https://docs.github.com/rest/reference/search#search-topics"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_search_users": {
      "provider_intent": "get_search_users",
      "provider_alias_intent": "/search/users",
      "text": "Search users",
      "category": "Search",
      "method": "GET",
      "type": "API",
      "params": {
        "q": {
          "type": "string",
          "text": "The query contains one or more search keywords and qualifiers",
          "required": true
        },
        "sort": {
          "type": "string",
          "text": "Sorts the results of your query by number of `followers` or `repositories` or when the person `joined` GitHub"
        },
        "order": {
          "type": "string",
          "text": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`)"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Find users via various criteria.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/search/users",
        "alias_endpoint": "/github/search/users",
        "api_ref": "https://docs.github.com/rest/reference/search#search-users"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_enterprises_enterprise_secret-scanning_alerts": {
      "provider_intent": "get_enterprises_enterprise_secret-scanning_alerts",
      "provider_alias_intent": "/enterprises/enterprise/secret-scanning/alerts",
      "text": "List secret scanning alerts for an enterprise",
      "category": "Secret Scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "enterprise": {
          "type": "string",
          "text": "The slug version of the enterprise name",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state"
        },
        "secret_type": {
          "type": "string",
          "text": "A comma-separated list of secret types to return"
        },
        "resolution": {
          "type": "string",
          "text": "A comma-separated list of resolutions"
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "before": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "after": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "enterprise": {
          "type": "string",
          "text": "The slug version of the enterprise name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists secret scanning alerts for eligible repositories in an enterprise from newest to oldest.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/enterprises/{enterprise}/secret-scanning/alerts",
        "alias_endpoint": "/github/enterprises/enterprise/secret-scanning/alerts",
        "api_ref": "https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-enterprise"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_secret-scanning_alerts": {
      "provider_intent": "get_orgs_org_secret-scanning_alerts",
      "provider_alias_intent": "/orgs/org/secret-scanning/alerts",
      "text": "List secret scanning alerts for an organization",
      "category": "Secret Scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state"
        },
        "secret_type": {
          "type": "string",
          "text": "A comma-separated list of secret types to return"
        },
        "resolution": {
          "type": "string",
          "text": "A comma-separated list of resolutions"
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "before": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "after": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists secret scanning alerts for eligible repositories in an organization from newest to oldest.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/secret-scanning/alerts",
        "alias_endpoint": "/github/orgs/org/secret-scanning/alerts",
        "api_ref": "https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-organization"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_secret-scanning_alerts": {
      "provider_intent": "get_repos_owner_repo_secret-scanning_alerts",
      "provider_alias_intent": "/repos/owner/repo/secret-scanning/alerts",
      "text": "List secret scanning alerts for a repository",
      "category": "Secret Scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "state": {
          "type": "string",
          "text": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state"
        },
        "secret_type": {
          "type": "string",
          "text": "A comma-separated list of secret types to return"
        },
        "resolution": {
          "type": "string",
          "text": "A comma-separated list of resolutions"
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "before": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "after": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists secret scanning alerts for an eligible repository from newest to oldest.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts",
        "alias_endpoint": "/github/repos/owner/repo/secret-scanning/alerts",
        "api_ref": "https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_secret-scanning_alerts_alert_number": {
      "provider_intent": "get_repos_owner_repo_secret-scanning_alerts_alert_number",
      "provider_alias_intent": "/repos/owner/repo/secret-scanning/alerts/alert_number",
      "text": "Get a secret scanning alert",
      "category": "Secret Scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a single secret scanning alert detected in an eligible repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        "alias_endpoint": "/github/repos/owner/repo/secret-scanning/alerts/alert_number",
        "api_ref": "https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_secret-scanning_alerts_alert_number": {
      "provider_intent": "patch_repos_owner_repo_secret-scanning_alerts_alert_number",
      "provider_alias_intent": "/repos/owner/repo/secret-scanning/alerts/alert_number",
      "text": "Update a secret scanning alert",
      "category": "Secret Scanning",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "state": {
          "type": "string",
          "text": "Sets the state of the secret scanning alert"
        },
        "resolution": {
          "type": "string",
          "text": "**Required when the `state` is `resolved`"
        },
        "resolution_comment": {
          "type": "string",
          "text": "An optional comment when closing an alert"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Updates the status of a secret scanning alert in an eligible repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        "alias_endpoint": "/github/repos/owner/repo/secret-scanning/alerts/alert_number",
        "api_ref": "https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_secret-scanning_alerts_alert_number_locations": {
      "provider_intent": "get_repos_owner_repo_secret-scanning_alerts_alert_number_locations",
      "provider_alias_intent": "/repos/owner/repo/secret-scanning/alerts/alert_number/locations",
      "text": "List locations for a secret scanning alert",
      "category": "Secret Scanning",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "alert_number": {
          "type": "integer",
          "text": "The number that identifies an alert",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all locations for a given secret scanning alert for an eligible repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
        "alias_endpoint": "/github/repos/owner/repo/secret-scanning/alerts/alert_number/locations",
        "api_ref": "https://docs.github.com/rest/reference/secret-scanning#list-locations-for-a-secret-scanning-alert"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_security-advisories": {
      "provider_intent": "get_repos_owner_repo_security-advisories",
      "provider_alias_intent": "/repos/owner/repo/security-advisories",
      "text": "List repository security advisories",
      "category": "Security Advisories",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "sort": {
          "type": "string",
          "text": "The property to sort the results by"
        },
        "before": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "after": {
          "type": "string",
          "text": "A cursor as given in the [Link header](https",
          "enum": [
            "",
            "",
            "docs"
          ]
        },
        "per_page": {
          "type": "integer",
          "text": "Number of advisories to return per page"
        },
        "state": {
          "type": "string",
          "text": "Filter by state of the repository advisories"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists security advisories in a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/security-advisories",
        "alias_endpoint": "/github/repos/owner/repo/security-advisories",
        "api_ref": "https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_security-advisories": {
      "provider_intent": "post_repos_owner_repo_security-advisories",
      "provider_alias_intent": "/repos/owner/repo/security-advisories",
      "text": "Create a repository security advisory",
      "category": "Security Advisories",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "summary": {
          "type": "string",
          "text": "A short summary of the advisory"
        },
        "description": {
          "type": "string",
          "text": "A detailed description of what the advisory impacts"
        },
        "cve_id": {
          "type": "string",
          "text": "The Common Vulnerabilities and Exposures (CVE) ID"
        },
        "vulnerabilities": {
          "type": "array",
          "text": "A product affected by the vulnerability detailed in a repository security advisory"
        },
        "cwe_ids": {
          "type": "array",
          "text": "A list of Common Weakness Enumeration (CWE) IDs"
        },
        "credits": {
          "type": "array",
          "text": "A list of users receiving credit for their participation in the security advisory"
        },
        "severity": {
          "type": "string",
          "text": "The severity of the advisory"
        },
        "cvss_vector_string": {
          "type": "string",
          "text": "The CVSS vector that calculates the severity of the advisory"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new repository security advisory.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/security-advisories",
        "alias_endpoint": "/github/repos/owner/repo/security-advisories",
        "api_ref": "https://docs.github.com/rest/security-advisories/repository-advisories#create-a-repository-security-advisory"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_repos_owner_repo_security-advisories_reports": {
      "provider_intent": "post_repos_owner_repo_security-advisories_reports",
      "provider_alias_intent": "/repos/owner/repo/security-advisories/reports",
      "text": "Privately report a security vulnerability",
      "category": "Security Advisories",
      "method": "POST",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "summary": {
          "type": "string",
          "text": "A short summary of the advisory"
        },
        "description": {
          "type": "string",
          "text": "A detailed description of what the advisory impacts"
        },
        "vulnerabilities": {
          "type": "array",
          "text": "An array of products affected by the vulnerability detailed in a repository security advisory"
        },
        "cwe_ids": {
          "type": "array",
          "text": "A list of Common Weakness Enumeration (CWE) IDs"
        },
        "severity": {
          "type": "string",
          "text": "The severity of the advisory"
        },
        "cvss_vector_string": {
          "type": "string",
          "text": "The CVSS vector that calculates the severity of the advisory"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Report a security vulnerability to the maintainers of the repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/security-advisories/reports",
        "alias_endpoint": "/github/repos/owner/repo/security-advisories/reports",
        "api_ref": "https://docs.github.com/rest/security-advisories/repository-advisories#privately-report-a-security-vulnerability"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_repos_owner_repo_security-advisories_ghsa_id": {
      "provider_intent": "get_repos_owner_repo_security-advisories_ghsa_id",
      "provider_alias_intent": "/repos/owner/repo/security-advisories/ghsa_id",
      "text": "Get a repository security advisory",
      "category": "Security Advisories",
      "method": "GET",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ghsa_id": {
          "type": "string",
          "text": "The GHSA (GitHub Security Advisory) identifier of the advisory",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ghsa_id": {
          "type": "string",
          "text": "The GHSA (GitHub Security Advisory) identifier of the advisory",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}",
        "alias_endpoint": "/github/repos/owner/repo/security-advisories/ghsa_id",
        "api_ref": "https://docs.github.com/rest/security-advisories/repository-advisories#get-a-repository-security-advisory"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_repos_owner_repo_security-advisories_ghsa_id": {
      "provider_intent": "patch_repos_owner_repo_security-advisories_ghsa_id",
      "provider_alias_intent": "/repos/owner/repo/security-advisories/ghsa_id",
      "text": "Update a repository security advisory",
      "category": "Security Advisories",
      "method": "PATCH",
      "type": "API",
      "params": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ghsa_id": {
          "type": "string",
          "text": "The GHSA (GitHub Security Advisory) identifier of the advisory",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "summary": {
          "type": "string",
          "text": "A short summary of the advisory"
        },
        "description": {
          "type": "string",
          "text": "A detailed description of what the advisory impacts"
        },
        "cve_id": {
          "type": "string",
          "text": "The Common Vulnerabilities and Exposures (CVE) ID"
        },
        "vulnerabilities": {
          "type": "array",
          "text": "A product affected by the vulnerability detailed in a repository security advisory"
        },
        "cwe_ids": {
          "type": "array",
          "text": "A list of Common Weakness Enumeration (CWE) IDs"
        },
        "credits": {
          "type": "array",
          "text": "A list of users receiving credit for their participation in the security advisory"
        },
        "severity": {
          "type": "string",
          "text": "The severity of the advisory"
        },
        "cvss_vector_string": {
          "type": "string",
          "text": "The CVSS vector that calculates the severity of the advisory"
        },
        "state": {
          "type": "string",
          "text": "The state of the advisory"
        }
      },
      "path": {
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        },
        "ghsa_id": {
          "type": "string",
          "text": "The GHSA (GitHub Security Advisory) identifier of the advisory",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}",
        "alias_endpoint": "/github/repos/owner/repo/security-advisories/ghsa_id",
        "api_ref": "https://docs.github.com/rest/security-advisories/repository-advisories#update-a-repository-security-advisory"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams": {
      "provider_intent": "get_orgs_org_teams",
      "provider_alias_intent": "/orgs/org/teams",
      "text": "List teams",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all teams in an organization that are visible to the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams",
        "alias_endpoint": "/github/orgs/org/teams",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-teams"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_teams": {
      "provider_intent": "post_orgs_org_teams",
      "provider_alias_intent": "/orgs/org/teams",
      "text": "Create a team",
      "category": "Teams",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the team"
        },
        "description": {
          "type": "string",
          "text": "The description of the team"
        },
        "maintainers": {
          "type": "array",
          "text": "List GitHub IDs for organization members who will become team maintainers"
        },
        "repo_names": {
          "type": "array",
          "text": "The full name (e"
        },
        "privacy": {
          "type": "string",
          "text": "The level of privacy this team should have"
        },
        "notification_setting": {
          "type": "string",
          "text": "The notification setting the team has chosen"
        },
        "permission": {
          "type": "string",
          "text": "**Deprecated**"
        },
        "parent_team_id": {
          "type": "integer",
          "text": "The ID of a team to set as the parent team"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "To create a team the authenticated user must be a member or owner of `{org}`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams",
        "alias_endpoint": "/github/orgs/org/teams",
        "api_ref": "https://docs.github.com/rest/reference/teams#create-a-team"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug": {
      "provider_intent": "get_orgs_org_teams_team_slug",
      "provider_alias_intent": "/orgs/org/teams/team_slug",
      "text": "Get a team by name",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets a team using the team's `slug`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug",
        "api_ref": "https://docs.github.com/rest/reference/teams#get-a-team-by-name"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_orgs_org_teams_team_slug": {
      "provider_intent": "patch_orgs_org_teams_team_slug",
      "provider_alias_intent": "/orgs/org/teams/team_slug",
      "text": "Update a team",
      "category": "Teams",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the team"
        },
        "description": {
          "type": "string",
          "text": "The description of the team"
        },
        "privacy": {
          "type": "string",
          "text": "The level of privacy this team should have"
        },
        "notification_setting": {
          "type": "string",
          "text": "The notification setting the team has chosen"
        },
        "permission": {
          "type": "string",
          "text": "**Deprecated**"
        },
        "parent_team_id": {
          "type": "integer",
          "text": "The ID of a team to set as the parent team"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "To edit a team the authenticated user must either be an organization owner or a team maintainer.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug",
        "api_ref": "https://docs.github.com/rest/reference/teams#update-a-team"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_teams_team_slug": {
      "provider_intent": "delete_orgs_org_teams_team_slug",
      "provider_alias_intent": "/orgs/org/teams/team_slug",
      "text": "Delete a team",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "To delete a team the authenticated user must be an organization owner or team maintainer.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug",
        "api_ref": "https://docs.github.com/rest/reference/teams#delete-a-team"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_discussions": {
      "provider_intent": "get_orgs_org_teams_team_slug_discussions",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions",
      "text": "List discussions",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        },
        "pinned": {
          "type": "string",
          "text": "Pinned discussions only filter"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all discussions on a team's page.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-discussions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_teams_team_slug_discussions": {
      "provider_intent": "post_orgs_org_teams_team_slug_discussions",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions",
      "text": "Create a discussion",
      "category": "Teams",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "The discussion post's title"
        },
        "body": {
          "type": "string",
          "text": "The discussion post's body text"
        },
        "private": {
          "type": "boolean",
          "text": "Private posts are only visible to team members organization owners and team maintainers",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new discussion post on a team's page.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions",
        "api_ref": "https://docs.github.com/rest/reference/teams#create-a-discussion"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_discussions_discussion_number": {
      "provider_intent": "get_orgs_org_teams_team_slug_discussions_discussion_number",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number",
      "text": "Get a discussion",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a specific discussion on a team's page.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#get-a-discussion"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_orgs_org_teams_team_slug_discussions_discussion_number": {
      "provider_intent": "patch_orgs_org_teams_team_slug_discussions_discussion_number",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number",
      "text": "Update a discussion",
      "category": "Teams",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "The discussion post's title"
        },
        "body": {
          "type": "string",
          "text": "The discussion post's body text"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Edits the title and body text of a discussion post.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#update-a-discussion"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_teams_team_slug_discussions_discussion_number": {
      "provider_intent": "delete_orgs_org_teams_team_slug_discussions_discussion_number",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number",
      "text": "Delete a discussion",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Delete a discussion from a team's page.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#delete-a-discussion"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_discussions_discussion_number_comments": {
      "provider_intent": "get_orgs_org_teams_team_slug_discussions_discussion_number_comments",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/comments",
      "text": "List discussion comments",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all comments on a team discussion.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/comments",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-discussion-comments"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_orgs_org_teams_team_slug_discussions_discussion_number_comments": {
      "provider_intent": "post_orgs_org_teams_team_slug_discussions_discussion_number_comments",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/comments",
      "text": "Create a discussion comment",
      "category": "Teams",
      "method": "POST",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The discussion comment's body text"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates a new comment on a team discussion.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/comments",
        "api_ref": "https://docs.github.com/rest/reference/teams#create-a-discussion-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number": {
      "provider_intent": "get_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number",
      "text": "Get a discussion comment",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Get a specific comment on a team discussion.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#get-a-discussion-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number": {
      "provider_intent": "patch_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number",
      "text": "Update a discussion comment",
      "category": "Teams",
      "method": "PATCH",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The discussion comment's body text"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Edits the body text of a discussion comment.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#update-a-discussion-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number": {
      "provider_intent": "delete_orgs_org_teams_team_slug_discussions_discussion_number_comments_comment_number",
      "provider_alias_intent": "/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number",
      "text": "Delete a discussion comment",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes a comment on a team discussion.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/discussions/discussion_number/comments/comment_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#delete-a-discussion-comment"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_invitations": {
      "provider_intent": "get_orgs_org_teams_team_slug_invitations",
      "provider_alias_intent": "/orgs/org/teams/team_slug/invitations",
      "text": "List pending team invitations",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member` `admin` `billing_manager` `hiring_manager` or `reinstate`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/invitations",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/invitations",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-pending-team-invitations"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_members": {
      "provider_intent": "get_orgs_org_teams_team_slug_members",
      "provider_alias_intent": "/orgs/org/teams/team_slug/members",
      "text": "List team members",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "role": {
          "type": "string",
          "text": "Filters members returned by their role in the team"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Team members will include the members of child teams.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/members",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/members",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-team-members"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_memberships_username": {
      "provider_intent": "get_orgs_org_teams_team_slug_memberships_username",
      "provider_alias_intent": "/orgs/org/teams/team_slug/memberships/username",
      "text": "Get team membership for a user",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Team members will include the members of child teams.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_teams_team_slug_memberships_username": {
      "provider_intent": "put_orgs_org_teams_team_slug_memberships_username",
      "provider_alias_intent": "/orgs/org/teams/team_slug/memberships/username",
      "text": "Add or update team membership for a user",
      "category": "Teams",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "role": {
          "type": "string",
          "text": "The role that this user should have in the team"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds an organization member to a team.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_teams_team_slug_memberships_username": {
      "provider_intent": "delete_orgs_org_teams_team_slug_memberships_username",
      "provider_alias_intent": "/orgs/org/teams/team_slug/memberships/username",
      "text": "Remove team membership for a user",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "To remove a membership between a user and a team the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_projects": {
      "provider_intent": "get_orgs_org_teams_team_slug_projects",
      "provider_alias_intent": "/orgs/org/teams/team_slug/projects",
      "text": "List team projects",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the organization projects for a team.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/projects",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/projects",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-team-projects"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_projects_project_id": {
      "provider_intent": "get_orgs_org_teams_team_slug_projects_project_id",
      "provider_alias_intent": "/orgs/org/teams/team_slug/projects/project_id",
      "text": "Check team permissions for a project",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Checks whether a team has `read` `write` or `admin` permissions for an organization project.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_teams_team_slug_projects_project_id": {
      "provider_intent": "put_orgs_org_teams_team_slug_projects_project_id",
      "provider_alias_intent": "/orgs/org/teams/team_slug/projects/project_id",
      "text": "Add or update team project permissions",
      "category": "Teams",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "permission": {
          "type": "string",
          "text": "The permission to grant to the team for this project"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds an organization project to a team.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_teams_team_slug_projects_project_id": {
      "provider_intent": "delete_orgs_org_teams_team_slug_projects_project_id",
      "provider_alias_intent": "/orgs/org/teams/team_slug/projects/project_id",
      "text": "Remove a project from a team",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes an organization project from a team.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_repos": {
      "provider_intent": "get_orgs_org_teams_team_slug_repos",
      "provider_alias_intent": "/orgs/org/teams/team_slug/repos",
      "text": "List team repositories",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists a team's repositories visible to the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/repos",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/repos",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-team-repositories"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_repos_owner_repo": {
      "provider_intent": "get_orgs_org_teams_team_slug_repos_owner_repo",
      "provider_alias_intent": "/orgs/org/teams/team_slug/repos/owner/repo",
      "text": "Check team permissions for a repository",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Checks whether a team has `admin` `push` `maintain` `triage` or `pull` permission for a repository.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_orgs_org_teams_team_slug_repos_owner_repo": {
      "provider_intent": "put_orgs_org_teams_team_slug_repos_owner_repo",
      "provider_alias_intent": "/orgs/org/teams/team_slug/repos/owner/repo",
      "text": "Add or update team repository permissions",
      "category": "Teams",
      "method": "PUT",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "permission": {
          "type": "string",
          "text": "The permission to grant the team on this repository"
        }
      },
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "To add a repository to a team or update the team's permission on a repository the authenticated user must have admin access to the repository and must be able to see the team.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_orgs_org_teams_team_slug_repos_owner_repo": {
      "provider_intent": "delete_orgs_org_teams_team_slug_repos_owner_repo",
      "provider_alias_intent": "/orgs/org/teams/team_slug/repos/owner/repo",
      "text": "Remove a repository from a team",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "If the authenticated user is an organization owner or a team maintainer they can remove any repositories from the team.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_orgs_org_teams_team_slug_teams": {
      "provider_intent": "get_orgs_org_teams_team_slug_teams",
      "provider_alias_intent": "/orgs/org/teams/team_slug/teams",
      "text": "List child teams",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "org": {
          "type": "string",
          "text": "The organization name",
          "required": true
        },
        "team_slug": {
          "type": "string",
          "text": "The slug of the team name",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the child teams of the team specified by `{team_slug}`.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/orgs/{org}/teams/{team_slug}/teams",
        "alias_endpoint": "/github/orgs/org/teams/team_slug/teams",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-child-teams"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id": {
      "provider_intent": "get_teams_team_id",
      "provider_alias_intent": "/teams/team_id",
      "text": "Get a team (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}",
        "alias_endpoint": "/github/teams/team_id",
        "api_ref": "https://docs.github.com/rest/reference/teams/#get-a-team-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_teams_team_id": {
      "provider_intent": "patch_teams_team_id",
      "provider_alias_intent": "/teams/team_id",
      "text": "Update a team (Legacy)",
      "category": "Teams",
      "method": "PATCH",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The name of the team"
        },
        "description": {
          "type": "string",
          "text": "The description of the team"
        },
        "privacy": {
          "type": "string",
          "text": "The level of privacy this team should have"
        },
        "notification_setting": {
          "type": "string",
          "text": "The notification setting the team has chosen"
        },
        "permission": {
          "type": "string",
          "text": "**Deprecated**"
        },
        "parent_team_id": {
          "type": "integer",
          "text": "The ID of a team to set as the parent team"
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}",
        "alias_endpoint": "/github/teams/team_id",
        "api_ref": "https://docs.github.com/rest/reference/teams/#update-a-team-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_teams_team_id": {
      "provider_intent": "delete_teams_team_id",
      "provider_alias_intent": "/teams/team_id",
      "text": "Delete a team (Legacy)",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}",
        "alias_endpoint": "/github/teams/team_id",
        "api_ref": "https://docs.github.com/rest/reference/teams/#delete-a-team-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_discussions": {
      "provider_intent": "get_teams_team_id_discussions",
      "provider_alias_intent": "/teams/team_id/discussions",
      "text": "List discussions (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions",
        "alias_endpoint": "/github/teams/team_id/discussions",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-discussions-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_teams_team_id_discussions": {
      "provider_intent": "post_teams_team_id_discussions",
      "provider_alias_intent": "/teams/team_id/discussions",
      "text": "Create a discussion (Legacy)",
      "category": "Teams",
      "method": "POST",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "The discussion post's title"
        },
        "body": {
          "type": "string",
          "text": "The discussion post's body text"
        },
        "private": {
          "type": "boolean",
          "text": "Private posts are only visible to team members organization owners and team maintainers",
          "enum": [
            true,
            false
          ]
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions",
        "alias_endpoint": "/github/teams/team_id/discussions",
        "api_ref": "https://docs.github.com/rest/reference/teams#create-a-discussion-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_discussions_discussion_number": {
      "provider_intent": "get_teams_team_id_discussions_discussion_number",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number",
      "text": "Get a discussion (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#get-a-discussion-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_teams_team_id_discussions_discussion_number": {
      "provider_intent": "patch_teams_team_id_discussions_discussion_number",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number",
      "text": "Update a discussion (Legacy)",
      "category": "Teams",
      "method": "PATCH",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "The discussion post's title"
        },
        "body": {
          "type": "string",
          "text": "The discussion post's body text"
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#update-a-discussion-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_teams_team_id_discussions_discussion_number": {
      "provider_intent": "delete_teams_team_id_discussions_discussion_number",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number",
      "text": "Delete a discussion (Legacy)",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_discussions_discussion_number_comments": {
      "provider_intent": "get_teams_team_id_discussions_discussion_number_comments",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/comments",
      "text": "List discussion comments (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "direction": {
          "type": "string",
          "text": "The direction to sort the results by"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/comments",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_teams_team_id_discussions_discussion_number_comments": {
      "provider_intent": "post_teams_team_id_discussions_discussion_number_comments",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/comments",
      "text": "Create a discussion comment (Legacy)",
      "category": "Teams",
      "method": "POST",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The discussion comment's body text"
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/comments",
        "api_ref": "https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_discussions_discussion_number_comments_comment_number": {
      "provider_intent": "get_teams_team_id_discussions_discussion_number_comments_comment_number",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/comments/comment_number",
      "text": "Get a discussion comment (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/comments/comment_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_teams_team_id_discussions_discussion_number_comments_comment_number": {
      "provider_intent": "patch_teams_team_id_discussions_discussion_number_comments_comment_number",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/comments/comment_number",
      "text": "Update a discussion comment (Legacy)",
      "category": "Teams",
      "method": "PATCH",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "body": {
          "type": "string",
          "text": "The discussion comment's body text"
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/comments/comment_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#update-a-discussion-comment-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_teams_team_id_discussions_discussion_number_comments_comment_number": {
      "provider_intent": "delete_teams_team_id_discussions_discussion_number_comments_comment_number",
      "provider_alias_intent": "/teams/team_id/discussions/discussion_number/comments/comment_number",
      "text": "Delete a discussion comment (Legacy)",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "discussion_number": {
          "type": "integer",
          "text": "The number that identifies the discussion",
          "required": true
        },
        "comment_number": {
          "type": "integer",
          "text": "The number that identifies the comment",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "alias_endpoint": "/github/teams/team_id/discussions/discussion_number/comments/comment_number",
        "api_ref": "https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_invitations": {
      "provider_intent": "get_teams_team_id_invitations",
      "provider_alias_intent": "/teams/team_id/invitations",
      "text": "List pending team invitations (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/invitations",
        "alias_endpoint": "/github/teams/team_id/invitations",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_members": {
      "provider_intent": "get_teams_team_id_members",
      "provider_alias_intent": "/teams/team_id/members",
      "text": "List team members (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "role": {
          "type": "string",
          "text": "Filters members returned by their role in the team"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/members",
        "alias_endpoint": "/github/teams/team_id/members",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-team-members-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_members_username": {
      "provider_intent": "get_teams_team_id_members_username",
      "provider_alias_intent": "/teams/team_id/members/username",
      "text": "Get team member (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The \"Get team member\" endpoint (described below) is deprecated.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/members/{username}",
        "alias_endpoint": "/github/teams/team_id/members/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#get-team-member-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_teams_team_id_members_username": {
      "provider_intent": "put_teams_team_id_members_username",
      "provider_alias_intent": "/teams/team_id/members/username",
      "text": "Add team member (Legacy)",
      "category": "Teams",
      "method": "PUT",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The \"Add team member\" endpoint (described below) is deprecated.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/members/{username}",
        "alias_endpoint": "/github/teams/team_id/members/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#add-team-member-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_teams_team_id_members_username": {
      "provider_intent": "delete_teams_team_id_members_username",
      "provider_alias_intent": "/teams/team_id/members/username",
      "text": "Remove team member (Legacy)",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "The \"Remove team member\" endpoint (described below) is deprecated.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/members/{username}",
        "alias_endpoint": "/github/teams/team_id/members/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#remove-team-member-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_memberships_username": {
      "provider_intent": "get_teams_team_id_memberships_username",
      "provider_alias_intent": "/teams/team_id/memberships/username",
      "text": "Get team membership for a user (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/memberships/{username}",
        "alias_endpoint": "/github/teams/team_id/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_teams_team_id_memberships_username": {
      "provider_intent": "put_teams_team_id_memberships_username",
      "provider_alias_intent": "/teams/team_id/memberships/username",
      "text": "Add or update team membership for a user (Legacy)",
      "category": "Teams",
      "method": "PUT",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "role": {
          "type": "string",
          "text": "The role that this user should have in the team"
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/memberships/{username}",
        "alias_endpoint": "/github/teams/team_id/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_teams_team_id_memberships_username": {
      "provider_intent": "delete_teams_team_id_memberships_username",
      "provider_alias_intent": "/teams/team_id/memberships/username",
      "text": "Remove team membership for a user (Legacy)",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/memberships/{username}",
        "alias_endpoint": "/github/teams/team_id/memberships/username",
        "api_ref": "https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_projects": {
      "provider_intent": "get_teams_team_id_projects",
      "provider_alias_intent": "/teams/team_id/projects",
      "text": "List team projects (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/projects",
        "alias_endpoint": "/github/teams/team_id/projects",
        "api_ref": "https://docs.github.com/rest/reference/teams/#list-team-projects-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_projects_project_id": {
      "provider_intent": "get_teams_team_id_projects_project_id",
      "provider_alias_intent": "/teams/team_id/projects/project_id",
      "text": "Check team permissions for a project (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/projects/{project_id}",
        "alias_endpoint": "/github/teams/team_id/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_teams_team_id_projects_project_id": {
      "provider_intent": "put_teams_team_id_projects_project_id",
      "provider_alias_intent": "/teams/team_id/projects/project_id",
      "text": "Add or update team project permissions (Legacy)",
      "category": "Teams",
      "method": "PUT",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "permission": {
          "type": "string",
          "text": "The permission to grant to the team for this project"
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/projects/{project_id}",
        "alias_endpoint": "/github/teams/team_id/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/teams/#add-or-update-team-project-permissions-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_teams_team_id_projects_project_id": {
      "provider_intent": "delete_teams_team_id_projects_project_id",
      "provider_alias_intent": "/teams/team_id/projects/project_id",
      "text": "Remove a project from a team (Legacy)",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "project_id": {
          "type": "integer",
          "text": "The unique identifier of the project",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/projects/{project_id}",
        "alias_endpoint": "/github/teams/team_id/projects/project_id",
        "api_ref": "https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_repos": {
      "provider_intent": "get_teams_team_id_repos",
      "provider_alias_intent": "/teams/team_id/repos",
      "text": "List team repositories (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/repos",
        "alias_endpoint": "/github/teams/team_id/repos",
        "api_ref": "https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_repos_owner_repo": {
      "provider_intent": "get_teams_team_id_repos_owner_repo",
      "provider_alias_intent": "/teams/team_id/repos/owner/repo",
      "text": "Check team permissions for a repository (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note**: Repositories inherited through a parent team will also be checked.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/repos/{owner}/{repo}",
        "alias_endpoint": "/github/teams/team_id/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_teams_team_id_repos_owner_repo": {
      "provider_intent": "put_teams_team_id_repos_owner_repo",
      "provider_alias_intent": "/teams/team_id/repos/owner/repo",
      "text": "Add or update team repository permissions (Legacy)",
      "category": "Teams",
      "method": "PUT",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {
        "permission": {
          "type": "string",
          "text": "The permission to grant the team on this repository"
        }
      },
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/repos/{owner}/{repo}",
        "alias_endpoint": "/github/teams/team_id/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_teams_team_id_repos_owner_repo": {
      "provider_intent": "delete_teams_team_id_repos_owner_repo",
      "provider_alias_intent": "/teams/team_id/repos/owner/repo",
      "text": "Remove a repository from a team (Legacy)",
      "category": "Teams",
      "method": "DELETE",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "owner": {
          "type": "string",
          "text": "The account owner of the repository",
          "required": true
        },
        "repo": {
          "type": "string",
          "text": "The name of the repository",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/repos/{owner}/{repo}",
        "alias_endpoint": "/github/teams/team_id/repos/owner/repo",
        "api_ref": "https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_teams_team_id_teams": {
      "provider_intent": "get_teams_team_id_teams",
      "provider_alias_intent": "/teams/team_id/teams",
      "text": "List child teams (Legacy)",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "team_id": {
          "type": "integer",
          "text": "The unique identifier of the team",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/teams/{team_id}/teams",
        "alias_endpoint": "/github/teams/team_id/teams",
        "api_ref": "https://docs.github.com/rest/reference/teams/#list-child-teams-legacy"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_teams": {
      "provider_intent": "get_user_teams",
      "provider_alias_intent": "/user/teams",
      "text": "List teams for the authenticated user",
      "category": "Teams",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List all of the teams across all of the organizations to which the authenticated user belongs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/teams",
        "alias_endpoint": "/github/user/teams",
        "api_ref": "https://docs.github.com/rest/reference/teams#list-teams-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user": {
      "provider_intent": "get_user",
      "provider_alias_intent": "/user",
      "text": "Get the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "If the authenticated user is authenticated with an OAuth token with the `user` scope then the response lists public and private profile information.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user",
        "alias_endpoint": "/github/user",
        "api_ref": "https://docs.github.com/rest/reference/users#get-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_user": {
      "provider_intent": "patch_user",
      "provider_alias_intent": "/user",
      "text": "Update the authenticated user",
      "category": "Users",
      "method": "PATCH",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "The new name of the user"
        },
        "email": {
          "type": "string",
          "text": "The publicly visible email address of the user"
        },
        "blog": {
          "type": "string",
          "text": "The new blog URL of the user"
        },
        "twitter_username": {
          "type": "string",
          "text": "The new Twitter username of the user"
        },
        "company": {
          "type": "string",
          "text": "The new company of the user"
        },
        "location": {
          "type": "string",
          "text": "The new location of the user"
        },
        "hireable": {
          "type": "boolean",
          "text": "The new hiring availability of the user",
          "enum": [
            true,
            false
          ]
        },
        "bio": {
          "type": "string",
          "text": "The new short biography of the user"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user",
        "alias_endpoint": "/github/user",
        "api_ref": "https://docs.github.com/rest/reference/users/#update-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_blocks": {
      "provider_intent": "get_user_blocks",
      "provider_alias_intent": "/user/blocks",
      "text": "List users blocked by the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "List the users you've blocked on your personal account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/blocks",
        "alias_endpoint": "/github/user/blocks",
        "api_ref": "https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_blocks_username": {
      "provider_intent": "get_user_blocks_username",
      "provider_alias_intent": "/user/blocks/username",
      "text": "Check if a user is blocked by the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/blocks/{username}",
        "alias_endpoint": "/github/user/blocks/username",
        "api_ref": "https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_user_blocks_username": {
      "provider_intent": "put_user_blocks_username",
      "provider_alias_intent": "/user/blocks/username",
      "text": "Block a user",
      "category": "Users",
      "method": "PUT",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/blocks/{username}",
        "alias_endpoint": "/github/user/blocks/username",
        "api_ref": "https://docs.github.com/rest/reference/users#block-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_blocks_username": {
      "provider_intent": "delete_user_blocks_username",
      "provider_alias_intent": "/user/blocks/username",
      "text": "Unblock a user",
      "category": "Users",
      "method": "DELETE",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/blocks/{username}",
        "alias_endpoint": "/github/user/blocks/username",
        "api_ref": "https://docs.github.com/rest/reference/users#unblock-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "patch_user_email_visibility": {
      "provider_intent": "patch_user_email_visibility",
      "provider_alias_intent": "/user/email/visibility",
      "text": "Set primary email visibility for the authenticated user",
      "category": "Users",
      "method": "PATCH",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "visibility": {
          "type": "string",
          "text": "Denotes whether an email is publicly visible"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Sets the visibility for your primary email addresses.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/email/visibility",
        "alias_endpoint": "/github/user/email/visibility",
        "api_ref": "https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_emails": {
      "provider_intent": "get_user_emails",
      "provider_alias_intent": "/user/emails",
      "text": "List email addresses for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all of your email addresses and specifies which one is visible to the public.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/emails",
        "alias_endpoint": "/github/user/emails",
        "api_ref": "https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_emails": {
      "provider_intent": "post_user_emails",
      "provider_alias_intent": "/user/emails",
      "text": "Add an email address for the authenticated user",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This endpoint is accessible with the `user` scope.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/emails",
        "alias_endpoint": "/github/user/emails",
        "api_ref": "https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_emails": {
      "provider_intent": "delete_user_emails",
      "provider_alias_intent": "/user/emails",
      "text": "Delete an email address for the authenticated user",
      "category": "Users",
      "method": "DELETE",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "This endpoint is accessible with the `user` scope.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/emails",
        "alias_endpoint": "/github/user/emails",
        "api_ref": "https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_followers": {
      "provider_intent": "get_user_followers",
      "provider_alias_intent": "/user/followers",
      "text": "List followers of the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the people following the authenticated user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/followers",
        "alias_endpoint": "/github/user/followers",
        "api_ref": "https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_following": {
      "provider_intent": "get_user_following",
      "provider_alias_intent": "/user/following",
      "text": "List the people the authenticated user follows",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the people who the authenticated user follows.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/following",
        "alias_endpoint": "/github/user/following",
        "api_ref": "https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_following_username": {
      "provider_intent": "get_user_following_username",
      "provider_alias_intent": "/user/following/username",
      "text": "Check if a person is followed by the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/following/{username}",
        "alias_endpoint": "/github/user/following/username",
        "api_ref": "https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "put_user_following_username": {
      "provider_intent": "put_user_following_username",
      "provider_alias_intent": "/user/following/username",
      "text": "Follow a user",
      "category": "Users",
      "method": "PUT",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/following/{username}",
        "alias_endpoint": "/github/user/following/username",
        "api_ref": "https://docs.github.com/rest/reference/users#follow-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_following_username": {
      "provider_intent": "delete_user_following_username",
      "provider_alias_intent": "/user/following/username",
      "text": "Unfollow a user",
      "category": "Users",
      "method": "DELETE",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/following/{username}",
        "alias_endpoint": "/github/user/following/username",
        "api_ref": "https://docs.github.com/rest/reference/users#unfollow-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_gpg_keys": {
      "provider_intent": "get_user_gpg_keys",
      "provider_alias_intent": "/user/gpg_keys",
      "text": "List GPG keys for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the current user's GPG keys.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/gpg_keys",
        "alias_endpoint": "/github/user/gpg_keys",
        "api_ref": "https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_gpg_keys": {
      "provider_intent": "post_user_gpg_keys",
      "provider_alias_intent": "/user/gpg_keys",
      "text": "Create a GPG key for the authenticated user",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "name": {
          "type": "string",
          "text": "A descriptive name for the new key"
        },
        "armored_public_key": {
          "type": "string",
          "text": "A GPG key in ASCII-armored format"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a GPG key to the authenticated user's GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/gpg_keys",
        "alias_endpoint": "/github/user/gpg_keys",
        "api_ref": "https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_gpg_keys_gpg_key_id": {
      "provider_intent": "get_user_gpg_keys_gpg_key_id",
      "provider_alias_intent": "/user/gpg_keys/gpg_key_id",
      "text": "Get a GPG key for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "gpg_key_id": {
          "type": "integer",
          "text": "The unique identifier of the GPG key",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gpg_key_id": {
          "type": "integer",
          "text": "The unique identifier of the GPG key",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "View extended details for a single GPG key.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/gpg_keys/{gpg_key_id}",
        "alias_endpoint": "/github/user/gpg_keys/gpg_key_id",
        "api_ref": "https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_gpg_keys_gpg_key_id": {
      "provider_intent": "delete_user_gpg_keys_gpg_key_id",
      "provider_alias_intent": "/user/gpg_keys/gpg_key_id",
      "text": "Delete a GPG key for the authenticated user",
      "category": "Users",
      "method": "DELETE",
      "type": "API",
      "params": {
        "gpg_key_id": {
          "type": "integer",
          "text": "The unique identifier of the GPG key",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "gpg_key_id": {
          "type": "integer",
          "text": "The unique identifier of the GPG key",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a GPG key from the authenticated user's GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/gpg_keys/{gpg_key_id}",
        "alias_endpoint": "/github/user/gpg_keys/gpg_key_id",
        "api_ref": "https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_keys": {
      "provider_intent": "get_user_keys",
      "provider_alias_intent": "/user/keys",
      "text": "List public SSH keys for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the public SSH keys for the authenticated user's GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/keys",
        "alias_endpoint": "/github/user/keys",
        "api_ref": "https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_keys": {
      "provider_intent": "post_user_keys",
      "provider_alias_intent": "/user/keys",
      "text": "Create a public SSH key for the authenticated user",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "A descriptive name for the new key"
        },
        "key": {
          "type": "string",
          "text": "The public SSH key to add to your GitHub account"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Adds a public SSH key to the authenticated user's GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/keys",
        "alias_endpoint": "/github/user/keys",
        "api_ref": "https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_keys_key_id": {
      "provider_intent": "get_user_keys_key_id",
      "provider_alias_intent": "/user/keys/key_id",
      "text": "Get a public SSH key for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "key_id": {
          "type": "integer",
          "text": "The unique identifier of the key",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "key_id": {
          "type": "integer",
          "text": "The unique identifier of the key",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "View extended details for a single public SSH key.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/keys/{key_id}",
        "alias_endpoint": "/github/user/keys/key_id",
        "api_ref": "https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_keys_key_id": {
      "provider_intent": "delete_user_keys_key_id",
      "provider_alias_intent": "/user/keys/key_id",
      "text": "Delete a public SSH key for the authenticated user",
      "category": "Users",
      "method": "DELETE",
      "type": "API",
      "params": {
        "key_id": {
          "type": "integer",
          "text": "The unique identifier of the key",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "key_id": {
          "type": "integer",
          "text": "The unique identifier of the key",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Removes a public SSH key from the authenticated user's GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/keys/{key_id}",
        "alias_endpoint": "/github/user/keys/key_id",
        "api_ref": "https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_public_emails": {
      "provider_intent": "get_user_public_emails",
      "provider_alias_intent": "/user/public_emails",
      "text": "List public email addresses for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists your publicly visible email address which you can set with the [Set primary email visibility for the authenticated user](https://docs.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/public_emails",
        "alias_endpoint": "/github/user/public_emails",
        "api_ref": "https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_social_accounts": {
      "provider_intent": "get_user_social_accounts",
      "provider_alias_intent": "/user/social_accounts",
      "text": "List social accounts for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all of your social accounts.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/social_accounts",
        "alias_endpoint": "/github/user/social_accounts",
        "api_ref": "https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_social_accounts": {
      "provider_intent": "post_user_social_accounts",
      "provider_alias_intent": "/user/social_accounts",
      "text": "Add social accounts for the authenticated user",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "account_urls": {
          "type": "array",
          "text": "Full URLs for the social media profiles to add"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Add one or more social accounts to the authenticated user's profile.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/social_accounts",
        "alias_endpoint": "/github/user/social_accounts",
        "api_ref": "https://docs.github.com/rest/users/social-accounts#add-social-account-for-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_social_accounts": {
      "provider_intent": "delete_user_social_accounts",
      "provider_alias_intent": "/user/social_accounts",
      "text": "Delete social accounts for the authenticated user",
      "category": "Users",
      "method": "DELETE",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "account_urls": {
          "type": "array",
          "text": "Full URLs for the social media profiles to delete"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes one or more social accounts from the authenticated user's profile.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/social_accounts",
        "alias_endpoint": "/github/user/social_accounts",
        "api_ref": "https://docs.github.com/rest/users/social-accounts#delete-social-account-for-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_ssh_signing_keys": {
      "provider_intent": "get_user_ssh_signing_keys",
      "provider_alias_intent": "/user/ssh_signing_keys",
      "text": "List SSH signing keys for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the SSH signing keys for the authenticated user's GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/ssh_signing_keys",
        "alias_endpoint": "/github/user/ssh_signing_keys",
        "api_ref": "https://docs.github.com/rest/reference/users#list-public-ssh-signing-keys-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "post_user_ssh_signing_keys": {
      "provider_intent": "post_user_ssh_signing_keys",
      "provider_alias_intent": "/user/ssh_signing_keys",
      "text": "Create a SSH signing key for the authenticated user",
      "category": "Users",
      "method": "POST",
      "type": "API",
      "params": {},
      "custom_headers": {},
      "body": {
        "title": {
          "type": "string",
          "text": "A descriptive name for the new key"
        },
        "key": {
          "type": "string",
          "text": "The public SSH key to add to your GitHub account"
        }
      },
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Creates an SSH signing key for the authenticated user's GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/ssh_signing_keys",
        "alias_endpoint": "/github/user/ssh_signing_keys",
        "api_ref": "https://docs.github.com/rest/reference/users#create-an-ssh-signing-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_user_ssh_signing_keys_ssh_signing_key_id": {
      "provider_intent": "get_user_ssh_signing_keys_ssh_signing_key_id",
      "provider_alias_intent": "/user/ssh_signing_keys/ssh_signing_key_id",
      "text": "Get an SSH signing key for the authenticated user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "ssh_signing_key_id": {
          "type": "integer",
          "text": "The unique identifier of the SSH signing key",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "ssh_signing_key_id": {
          "type": "integer",
          "text": "The unique identifier of the SSH signing key",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Gets extended details for an SSH signing key.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/ssh_signing_keys/{ssh_signing_key_id}",
        "alias_endpoint": "/github/user/ssh_signing_keys/ssh_signing_key_id",
        "api_ref": "https://docs.github.com/rest/reference/users#get-a-ssh-signing-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "delete_user_ssh_signing_keys_ssh_signing_key_id": {
      "provider_intent": "delete_user_ssh_signing_keys_ssh_signing_key_id",
      "provider_alias_intent": "/user/ssh_signing_keys/ssh_signing_key_id",
      "text": "Delete an SSH signing key for the authenticated user",
      "category": "Users",
      "method": "DELETE",
      "type": "API",
      "params": {
        "ssh_signing_key_id": {
          "type": "integer",
          "text": "The unique identifier of the SSH signing key",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "ssh_signing_key_id": {
          "type": "integer",
          "text": "The unique identifier of the SSH signing key",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Deletes an SSH signing key from the authenticated user's GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/user/ssh_signing_keys/{ssh_signing_key_id}",
        "alias_endpoint": "/github/user/ssh_signing_keys/ssh_signing_key_id",
        "api_ref": "https://docs.github.com/rest/reference/users#delete-a-ssh-signing-key-for-the-authenticated-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users": {
      "provider_intent": "get_users",
      "provider_alias_intent": "/users",
      "text": "List users",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "since": {
          "type": "integer",
          "text": "A user ID"
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {},
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists all users in the order that they signed up on GitHub.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users",
        "alias_endpoint": "/github/users",
        "api_ref": "https://docs.github.com/rest/reference/users#list-users"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username": {
      "provider_intent": "get_users_username",
      "provider_alias_intent": "/users/username",
      "text": "Get a user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Provides publicly available information about someone with a GitHub account.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}",
        "alias_endpoint": "/github/users/username",
        "api_ref": "https://docs.github.com/rest/reference/users#get-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_followers": {
      "provider_intent": "get_users_username_followers",
      "provider_alias_intent": "/users/username/followers",
      "text": "List followers of a user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the people following the specified user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/followers",
        "alias_endpoint": "/github/users/username/followers",
        "api_ref": "https://docs.github.com/rest/reference/users#list-followers-of-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_following": {
      "provider_intent": "get_users_username_following",
      "provider_alias_intent": "/users/username/following",
      "text": "List the people a user follows",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the people who the specified user follows.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/following",
        "alias_endpoint": "/github/users/username/following",
        "api_ref": "https://docs.github.com/rest/reference/users#list-the-people-a-user-follows"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_following_target_user": {
      "provider_intent": "get_users_username_following_target_user",
      "provider_alias_intent": "/users/username/following/target_user",
      "text": "Check if a user follows another user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "target_user": {
          "type": "string",
          "required": true
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "target_user": {
          "type": "string",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": ".",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/following/{target_user}",
        "alias_endpoint": "/github/users/username/following/target_user",
        "api_ref": "https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_gpg_keys": {
      "provider_intent": "get_users_username_gpg_keys",
      "provider_alias_intent": "/users/username/gpg_keys",
      "text": "List GPG keys for a user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the GPG keys for a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/gpg_keys",
        "alias_endpoint": "/github/users/username/gpg_keys",
        "api_ref": "https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_hovercard": {
      "provider_intent": "get_users_username_hovercard",
      "provider_alias_intent": "/users/username/hovercard",
      "text": "Get contextual information for a user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "subject_type": {
          "type": "string",
          "text": "Identifies which additional information you'd like to receive about the person's hovercard"
        },
        "subject_id": {
          "type": "string",
          "text": "Uses the ID for the `subject_type` you specified"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/hovercard",
        "alias_endpoint": "/github/users/username/hovercard",
        "api_ref": "https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_keys": {
      "provider_intent": "get_users_username_keys",
      "provider_alias_intent": "/users/username/keys",
      "text": "List public keys for a user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the _verified_ public SSH keys for a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/keys",
        "alias_endpoint": "/github/users/username/keys",
        "api_ref": "https://docs.github.com/rest/reference/users#list-public-keys-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_social_accounts": {
      "provider_intent": "get_users_username_social_accounts",
      "provider_alias_intent": "/users/username/social_accounts",
      "text": "List social accounts for a user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists social media accounts for a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/social_accounts",
        "alias_endpoint": "/github/users/username/social_accounts",
        "api_ref": "https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    },
    "get_users_username_ssh_signing_keys": {
      "provider_intent": "get_users_username_ssh_signing_keys",
      "provider_alias_intent": "/users/username/ssh_signing_keys",
      "text": "List SSH signing keys for a user",
      "category": "Users",
      "method": "GET",
      "type": "API",
      "params": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        },
        "per_page": {
          "type": "integer",
          "text": "The number of results per page (max 100)"
        },
        "page": {
          "type": "integer",
          "text": "Page number of the results to fetch"
        }
      },
      "custom_headers": {},
      "body": {},
      "path": {
        "username": {
          "type": "string",
          "text": "The handle for the GitHub user account",
          "required": true
        }
      },
      "domain_params": {},
      "meta": {
        "version": "-",
        "auth": [],
        "description": "Lists the SSH signing keys for a user.",
        "rate_limit": [],
        "api_endpoint": "https://api.github.com/users/{username}/ssh_signing_keys",
        "alias_endpoint": "/github/users/username/ssh_signing_keys",
        "api_ref": "https://docs.github.com/rest/reference/users#list-ssh-signing-keys-for-a-user"
      },
      "auth": {
        "header": {
          "headerName": "Authorization",
          "headerValue": "Bearer",
          "authKey": "accessToken"
        }
      },
      "subdomain": {},
      "wip": 0,
      "payload_type": ""
    }
  }
}